#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script kh·ªüi ƒë·ªông h·ªá th·ªëng th√¥ng b√°o chi ti·∫øt

Script n√†y k·∫øt h·ª£p c√°c module ƒë√£ t·∫°o ƒë·ªÉ kh·ªüi ƒë·ªông h·ªá th·ªëng th√¥ng b√°o chi ti·∫øt
v√† theo d√µi giao d·ªãch tr√™n Binance.
"""

import os
import sys
import json
import time
import logging
import argparse
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("start_detailed_notifications.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("start_detailed_notifications")

# Import module c·∫ßn thi·∫øt
try:
    from integrate_detailed_notifications import IntegratedNotificationSystem
    from telegram_notifier import TelegramNotifier
except ImportError as e:
    logger.error(f"L·ªói import module: {e}")
    logger.error("ƒê·∫£m b·∫£o ƒë√£ t·∫°o c√°c module c·∫ßn thi·∫øt")
    sys.exit(1)

def parse_arguments():
    """Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh"""
    parser = argparse.ArgumentParser(description='Kh·ªüi ƒë·ªông h·ªá th·ªëng th√¥ng b√°o chi ti·∫øt')
    
    parser.add_argument('--config', type=str, default='account_config.json',
                        help='ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫•u h√¨nh')
    
    parser.add_argument('--notify-interval', type=int, default=15,
                        help='Kho·∫£ng th·ªùi gian g·ª≠i th√¥ng b√°o ƒë·ªãnh k·ª≥ (ph√∫t)')
    
    parser.add_argument('--daemonize', action='store_true',
                        help='Ch·∫°y nh∆∞ daemon trong n·ªÅn')
    
    return parser.parse_args()

def save_pid():
    """L∆∞u PID v√†o file ƒë·ªÉ c√≥ th·ªÉ d·ª´ng ti·∫øn tr√¨nh sau n√†y"""
    pid = os.getpid()
    
    with open('detailed_notifications.pid', 'w') as f:
        f.write(str(pid))
    
    logger.info(f"ƒê√£ l∆∞u PID {pid} v√†o detailed_notifications.pid")

def update_config(config_path: str, notification_interval: int):
    """
    C·∫≠p nh·∫≠t c·∫•u h√¨nh v·ªõi kho·∫£ng th·ªùi gian th√¥ng b√°o
    
    Args:
        config_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫•u h√¨nh
        notification_interval (int): Kho·∫£ng th·ªùi gian g·ª≠i th√¥ng b√°o (ph√∫t)
    """
    try:
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            # C·∫≠p nh·∫≠t kho·∫£ng th·ªùi gian th√¥ng b√°o
            config['notification_interval'] = notification_interval
            
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
            
            logger.info(f"ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh v·ªõi kho·∫£ng th·ªùi gian th√¥ng b√°o {notification_interval} ph√∫t")
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh: {e}")

def main():
    """H√†m ch√≠nh"""
    try:
        # Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh
        args = parse_arguments()
        
        # L∆∞u PID
        save_pid()
        
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh
        update_config(args.config, args.notify_interval)
        
        # Th√¥ng b√°o kh·ªüi ƒë·ªông
        telegram = TelegramNotifier()
        telegram.send_notification('info', 
            f"<b>üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG TH√îNG B√ÅO CHI TI·∫æT</b>\n\n"
            f"‚öôÔ∏è Th√¥ng b√°o chi ti·∫øt c√°ch {args.notify_interval} ph√∫t\n"
            f"üìä Theo d√µi v√†o l·ªánh, ra l·ªánh, l√£i/l·ªó\n"
            f"üí∞ Th·ªëng k√™ giao d·ªãch t·ª± ƒë·ªông\n\n"
            f"<i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        
        logger.info("Kh·ªüi ƒë·ªông h·ªá th·ªëng th√¥ng b√°o chi ti·∫øt")
        
        # Kh·ªüi t·∫°o h·ªá th·ªëng
        system = IntegratedNotificationSystem(config_path=args.config)
        
        # B·∫Øt ƒë·∫ßu theo d√µi
        system.start_monitoring()
        
        # N·∫øu ch·∫°y daemon, kh√¥ng block
        if args.daemonize:
            logger.info("Ch·∫°y nh∆∞ daemon, exit")
            return 0
        
        # Gi·ªØ cho ti·∫øn tr√¨nh ch·∫°y
        try:
            while True:
                time.sleep(60)
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
            system.stop_monitoring()
        
        logger.info("H·ªá th·ªëng th√¥ng b√°o chi ti·∫øt ƒë√£ d·ª´ng")
        return 0
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())