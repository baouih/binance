#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Integrated Startup Script - Kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c d·ªãch v·ª• c·∫ßn thi·∫øt trong m·ªôt l·∫ßn ch·∫°y duy nh·∫•t
"""

import os
import sys
import time
import json
import logging
import subprocess
import argparse
import signal
from datetime import datetime
import threading

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("integrated_system.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("integrated_system")

# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c script
SCRIPTS = {
    "main_trading_bot": "python main.py",
    "auto_sltp_manager": "python auto_sltp_manager.py",
    "trailing_stop": "bash start_trailing_stop.sh",
    "market_analyzer": "python market_analysis_service.py --mode service",
    "telegram_notifier": "python telegram_notification_service.py"
}

# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c file pid
PID_FILES = {
    "main_trading_bot": "main.pid",
    "auto_sltp_manager": "auto_sltp_manager.pid",
    "trailing_stop": "trailing_stop.pid",
    "market_analyzer": "market_analyzer.pid",
    "telegram_notifier": "telegram_notifier.pid"
}

# Class qu·∫£n l√Ω c√°c ti·∫øn tr√¨nh
class ServiceManager:
    def __init__(self):
        self.processes = {}
        self.statuses = {}
        self.lock = threading.Lock()
        self.load_status()
        
    def load_status(self):
        """T·∫£i tr·∫°ng th√°i t·ª´ file n·∫øu c√≥"""
        try:
            if os.path.exists('service_status.json'):
                with open('service_status.json', 'r') as f:
                    self.statuses = json.load(f)
            else:
                self.statuses = {name: "stopped" for name in SCRIPTS.keys()}
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i d·ªãch v·ª•: {e}")
            self.statuses = {name: "stopped" for name in SCRIPTS.keys()}
    
    def save_status(self):
        """L∆∞u tr·∫°ng th√°i ra file"""
        with self.lock:
            try:
                with open('service_status.json', 'w') as f:
                    json.dump(self.statuses, f, indent=4)
            except Exception as e:
                logger.error(f"Kh√¥ng th·ªÉ l∆∞u tr·∫°ng th√°i d·ªãch v·ª•: {e}")
    
    def start_service(self, name):
        """Kh·ªüi ƒë·ªông m·ªôt d·ªãch v·ª•"""
        if name not in SCRIPTS:
            logger.error(f"D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i: {name}")
            return False
        
        if name in self.processes and self.processes[name].poll() is None:
            logger.info(f"D·ªãch v·ª• {name} ƒë√£ ƒëang ch·∫°y")
            return True
        
        cmd = SCRIPTS[name]
        try:
            logger.info(f"ƒêang kh·ªüi ƒë·ªông d·ªãch v·ª• {name} v·ªõi l·ªánh: {cmd}")
            process = subprocess.Popen(
                cmd, 
                shell=True, 
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            self.processes[name] = process
            
            # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ki·ªÉm tra xem ti·∫øn tr√¨nh c√≥ kh·ªüi ƒë·ªông th√†nh c√¥ng kh√¥ng
            time.sleep(2)
            if process.poll() is None:
                logger.info(f"D·ªãch v·ª• {name} ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng v·ªõi PID {process.pid}")
                with self.lock:
                    self.statuses[name] = "running"
                self.save_status()
                return True
            else:
                stdout, _ = process.communicate()
                logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông d·ªãch v·ª• {name}. L·ªói: {stdout}")
                with self.lock:
                    self.statuses[name] = "failed"
                self.save_status()
                return False
        except Exception as e:
            logger.error(f"L·ªói khi kh·ªüi ƒë·ªông d·ªãch v·ª• {name}: {e}")
            with self.lock:
                self.statuses[name] = "failed"
            self.save_status()
            return False
    
    def stop_service(self, name):
        """D·ª´ng m·ªôt d·ªãch v·ª•"""
        if name not in self.processes:
            logger.info(f"D·ªãch v·ª• {name} kh√¥ng ƒëang ch·∫°y")
            return True
        
        process = self.processes[name]
        pid_file = PID_FILES.get(name)
        
        try:
            # N·∫øu c√≥ file PID, ƒë·ªçc PID t·ª´ file ƒë√≥
            if pid_file and os.path.exists(pid_file):
                with open(pid_file, 'r') as f:
                    try:
                        pid = int(f.read().strip())
                        logger.info(f"ƒêang d·ª´ng d·ªãch v·ª• {name} v·ªõi PID {pid} t·ª´ file PID")
                        os.kill(pid, signal.SIGTERM)
                    except Exception as e:
                        logger.error(f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c s·ª≠ d·ª•ng PID t·ª´ file {pid_file}: {e}")
            
            # N·∫øu process v·∫´n ƒëang ch·∫°y, d·ª´ng n√≥
            if process.poll() is None:
                logger.info(f"ƒêang d·ª´ng d·ªãch v·ª• {name} v·ªõi PID {process.pid}")
                process.terminate()
                process.wait(timeout=5)
            
            # Ki·ªÉm tra xem ƒë√£ d·ª´ng ch∆∞a, n·∫øu ch∆∞a th√¨ kill
            if process.poll() is None:
                logger.warning(f"D·ªãch v·ª• {name} ch∆∞a d·ª´ng, th·ª±c hi·ªán kill")
                process.kill()
                process.wait(timeout=2)
            
            logger.info(f"ƒê√£ d·ª´ng d·ªãch v·ª• {name}")
            with self.lock:
                self.statuses[name] = "stopped"
            self.save_status()
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi d·ª´ng d·ªãch v·ª• {name}: {e}")
            with self.lock:
                self.statuses[name] = "unknown"
            self.save_status()
            return False
    
    def restart_service(self, name):
        """Kh·ªüi ƒë·ªông l·∫°i m·ªôt d·ªãch v·ª•"""
        logger.info(f"ƒêang kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• {name}")
        self.stop_service(name)
        time.sleep(2)  # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o d·ªãch v·ª• ƒë√£ d·ª´ng ho√†n to√†n
        return self.start_service(name)
    
    def start_all(self):
        """Kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c d·ªãch v·ª•"""
        success = True
        for name in SCRIPTS.keys():
            if not self.start_service(name):
                success = False
        return success
    
    def stop_all(self):
        """D·ª´ng t·∫•t c·∫£ c√°c d·ªãch v·ª•"""
        success = True
        for name in list(self.processes.keys()):
            if not self.stop_service(name):
                success = False
        return success
    
    def restart_all(self):
        """Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ c√°c d·ªãch v·ª•"""
        self.stop_all()
        time.sleep(3)  # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ d·ªãch v·ª• ƒë√£ d·ª´ng
        return self.start_all()
    
    def check_status(self, name=None):
        """Ki·ªÉm tra tr·∫°ng th√°i c·ªßa m·ªôt d·ªãch v·ª• ho·∫∑c t·∫•t c·∫£ d·ªãch v·ª•"""
        if name:
            if name not in self.processes:
                status = "stopped"
            elif self.processes[name].poll() is None:
                status = "running"
            else:
                status = "stopped"
            
            with self.lock:
                self.statuses[name] = status
            
            return {name: status}
        else:
            statuses = {}
            for name in SCRIPTS.keys():
                if name not in self.processes:
                    status = "stopped"
                elif self.processes[name].poll() is None:
                    status = "running"
                else:
                    status = "stopped"
                
                statuses[name] = status
                
                with self.lock:
                    self.statuses[name] = status
            
            self.save_status()
            return statuses
    
    def get_status_report(self):
        """T·∫°o b√°o c√°o tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ d·ªãch v·ª•"""
        self.check_status()
        
        report = "\n=== B√ÅO C√ÅO TR·∫†NG TH√ÅI D·ªäCH V·ª§ ===\n"
        report += f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        for name, status in self.statuses.items():
            status_str = {
                "running": "üü¢ ƒêang ch·∫°y",
                "stopped": "üî¥ ƒê√£ d·ª´ng",
                "failed": "üî¥ Kh·ªüi ƒë·ªông th·∫•t b·∫°i",
                "unknown": "üü† Kh√¥ng x√°c ƒë·ªãnh"
            }.get(status, f"‚ö™ {status}")
            
            report += f"{name}: {status_str}\n"
        
        return report

def main():
    parser = argparse.ArgumentParser(description="Qu·∫£n l√Ω t√≠ch h·ª£p c√°c d·ªãch v·ª• trading")
    parser.add_argument("--action", choices=["start", "stop", "restart", "status"], default="start",
                        help="H√†nh ƒë·ªông: start, stop, restart ho·∫∑c status")
    parser.add_argument("--service", help="T√™n d·ªãch v·ª• c·ª• th·ªÉ, ƒë·ªÉ tr·ªëng ƒë·ªÉ √°p d·ª•ng cho t·∫•t c·∫£")
    
    args = parser.parse_args()
    
    logger.info(f"=== KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG QU·∫¢N L√ù D·ªäCH V·ª§ ===")
    service_manager = ServiceManager()
    
    try:
        if args.action == "start":
            if args.service:
                service_manager.start_service(args.service)
            else:
                service_manager.start_all()
                logger.info("ƒê√£ kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c d·ªãch v·ª•")
        
        elif args.action == "stop":
            if args.service:
                service_manager.stop_service(args.service)
            else:
                service_manager.stop_all()
                logger.info("ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c d·ªãch v·ª•")
        
        elif args.action == "restart":
            if args.service:
                service_manager.restart_service(args.service)
            else:
                service_manager.restart_all()
                logger.info("ƒê√£ kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ c√°c d·ªãch v·ª•")
        
        elif args.action == "status":
            report = service_manager.get_status_report()
            print(report)
            logger.info(report)
        
        # Sau khi th·ª±c hi·ªán c√°c l·ªánh, lu√¥n hi·ªÉn th·ªã tr·∫°ng th√°i
        if args.action != "status":
            time.sleep(2)  # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ c√°c d·ªãch v·ª• c√≥ th·ªùi gian c·∫≠p nh·∫≠t tr·∫°ng th√°i
            report = service_manager.get_status_report()
            print(report)
    
    except KeyboardInterrupt:
        logger.info("Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu ng·∫Øt (Ctrl+C)")
        service_manager.stop_all()
        logger.info("ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c d·ªãch v·ª•")
    
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        service_manager.stop_all()
        logger.info("ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c d·ªãch v·ª• do l·ªói")

if __name__ == "__main__":
    main()