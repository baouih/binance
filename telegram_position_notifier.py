#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Position Notifier

G·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø giao d·ªãch qua Telegram
"""

import os
import sys
import time
import json
import logging
import argparse
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('telegram_notifier.log')
    ]
)
logger = logging.getLogger('telegram_notifier')

# ƒê·∫∑t ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# Import c√°c module c·∫ßn thi·∫øt
try:
    from binance_api import BinanceAPI
except ImportError:
    logger.error("Kh√¥ng th·ªÉ import module BinanceAPI")
    sys.exit(1)

class TelegramNotifier:
    """Class ƒë·ªÉ g·ª≠i th√¥ng b√°o qua Telegram"""
    
    def __init__(self, testnet: bool = False):
        """Kh·ªüi t·∫°o Telegram Notifier
        
        Args:
            testnet: S·ª≠ d·ª•ng testnet Binance n·∫øu True
        """
        self.testnet = testnet
        self.api = BinanceAPI(testnet=testnet)
        
        # ƒê·ªçc th√¥ng tin Telegram t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c file c·∫•u h√¨nh
        self.telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.telegram_chat_id = os.environ.get('TELEGRAM_CHAT_ID')
        
        if not self.telegram_token or not self.telegram_chat_id:
            logger.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin Telegram trong bi·∫øn m√¥i tr∆∞·ªùng")
            # Th·ª≠ ƒë·ªçc t·ª´ file c·∫•u h√¨nh
            try:
                if os.path.exists('configs/telegram_config.json'):
                    with open('configs/telegram_config.json', 'r') as f:
                        config = json.load(f)
                        if not self.telegram_token:
                            self.telegram_token = config.get('bot_token')
                        if not self.telegram_chat_id:
                            self.telegram_chat_id = config.get('chat_id')
                    logger.info("ƒê√£ ƒë·ªçc th√¥ng tin Telegram t·ª´ file c·∫•u h√¨nh")
            except Exception as e:
                logger.error(f"L·ªói khi ƒë·ªçc file c·∫•u h√¨nh Telegram: {str(e)}")
        
        if not self.telegram_token or not self.telegram_chat_id:
            logger.error("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin Telegram, kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o")
        else:
            logger.info("ƒê√£ kh·ªüi t·∫°o Telegram Notifier th√†nh c√¥ng")
    
    def send_message(self, message: str) -> bool:
        """G·ª≠i tin nh·∫Øn t·ªõi Telegram
        
        Args:
            message: N·ªôi dung tin nh·∫Øn
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.telegram_token or not self.telegram_chat_id:
            logger.error("Kh√¥ng c√≥ th√¥ng tin Telegram, kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            data = {
                "chat_id": self.telegram_chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                logger.info("ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {str(e)}")
            return False
    
    def get_account_summary(self) -> Dict[str, Any]:
        """L·∫•y th√¥ng tin t√≥m t·∫Øt v·ªÅ t√†i kho·∫£n
        
        Returns:
            Dict[str, Any]: Th√¥ng tin t√†i kho·∫£n
        """
        try:
            account_info = self.api.get_futures_account_info()
            balance = float(account_info.get('totalWalletBalance', 0))
            unrealized_pnl = float(account_info.get('totalUnrealizedProfit', 0))
            
            available_balance = float(account_info.get('availableBalance', 0))
            positions = self.api.get_futures_position_risk()
            active_positions = [p for p in positions if abs(float(p.get('positionAmt', 0))) > 0]
            
            return {
                "balance": balance,
                "unrealized_pnl": unrealized_pnl,
                "total_balance": balance + unrealized_pnl,
                "available_balance": available_balance,
                "active_positions": len(active_positions),
                "positions": active_positions
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n: {str(e)}")
            return {}
    
    def format_account_message(self) -> str:
        """T·∫°o tin nh·∫Øn th√¥ng tin t√†i kho·∫£n
        
        Returns:
            str: Tin nh·∫Øn ƒë√£ ƒë·ªãnh d·∫°ng
        """
        summary = self.get_account_summary()
        
        if not summary:
            return "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n"
        
        mode = "TESTNET" if self.testnet else "MAINNET"
        
        message = f"<b>üî∑ TH√îNG TIN T√ÄI KHO·∫¢N {mode}</b>\n\n"
        message += f"üí∞ S·ªë d∆∞: {summary.get('balance', 0):.2f} USDT\n"
        message += f"üìä L·ª£i nhu·∫≠n ch∆∞a th·ª±c hi·ªán: {summary.get('unrealized_pnl', 0):.2f} USDT\n"
        message += f"üíµ T·ªïng s·ªë d∆∞: {summary.get('total_balance', 0):.2f} USDT\n"
        message += f"üí≥ S·ªë d∆∞ kh·∫£ d·ª•ng: {summary.get('available_balance', 0):.2f} USDT\n\n"
        
        active_positions = summary.get('positions', [])
        
        if active_positions:
            message += f"<b>üìå V·ªä TH·∫æ ƒêANG M·ªû ({len(active_positions)})</b>\n\n"
            
            for pos in active_positions:
                symbol = pos.get('symbol', '')
                side = "LONG" if float(pos.get('positionAmt', 0)) > 0 else "SHORT"
                entry_price = float(pos.get('entryPrice', 0))
                mark_price = float(pos.get('markPrice', 0))
                pnl = float(pos.get('unRealizedProfit', 0))
                roe = float(pos.get('roe', 0)) * 100  # Convert to percentage
                
                icon = "üü¢" if side == "LONG" else "üî¥"
                pnl_icon = "‚úÖ" if pnl > 0 else "‚ùå"
                
                message += f"{icon} <b>{symbol} {side}</b>\n"
                message += f"üí≤ Gi√° v√†o: {entry_price:.2f} | Gi√° hi·ªán t·∫°i: {mark_price:.2f}\n"
                message += f"{pnl_icon} P/L: {pnl:.2f} USDT ({roe:.2f}%)\n\n"
        else:
            message += "üìå Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü\n"
        
        message += f"\n‚è± C·∫≠p nh·∫≠t: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        return message
    
    def notify_position_status(self) -> bool:
        """G·ª≠i th√¥ng b√°o v·ªÅ tr·∫°ng th√°i v·ªã th·∫ø
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        message = self.format_account_message()
        return self.send_message(message)

def main():
    """H√†m ch√≠nh"""
    parser = argparse.ArgumentParser(description='G·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø qua Telegram')
    parser.add_argument('--testnet', action='store_true', help='S·ª≠ d·ª•ng Binance Testnet')
    parser.add_argument('--message', type=str, help='G·ª≠i tin nh·∫Øn t√πy ch·ªânh thay v√¨ th√¥ng tin v·ªã th·∫ø')
    args = parser.parse_args()
    
    try:
        notifier = TelegramNotifier(testnet=args.testnet)
        
        if args.message:
            # G·ª≠i tin nh·∫Øn t√πy ch·ªânh
            result = notifier.send_message(args.message)
        else:
            # G·ª≠i th√¥ng tin v·ªã th·∫ø
            result = notifier.notify_position_status()
        
        if result:
            logger.info("ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng")
        else:
            logger.error("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o")
            
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()