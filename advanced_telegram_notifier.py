#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Advanced Telegram Notifier
=========================
H·ªá th·ªëng th√¥ng b√°o Telegram n√¢ng cao v·ªõi c√°c t√≠nh nƒÉng:
- Th√¥ng b√°o t√≠n hi·ªáu giao d·ªãch
- C·∫£nh b√°o bi·∫øn ƒë·ªông gi√°
- C·∫≠p nh·∫≠t v·ªã th·∫ø
- Th√¥ng b√°o SL/TP
- Th√¥ng b√°o h·ªá th·ªëng

S·ª≠ d·ª•ng:
    from advanced_telegram_notifier import AdvancedTelegramNotifier
    
    # Kh·ªüi t·∫°o
    notifier = AdvancedTelegramNotifier()
    
    # G·ª≠i th√¥ng b√°o t√≠n hi·ªáu giao d·ªãch
    notifier.notify_trade_signal(
        symbol="BTCUSDT",
        side="LONG",
        entry_price=85000.0,
        stop_loss=83000.0,
        take_profit=89000.0,
        risk_reward=2.0,
        timeframe="1h",
        strategy="Composite Strategy",
        confidence=75.0
    )
"""

import os
import json
import time
import logging
import datetime
import requests
from typing import List, Dict, Optional, Any, Union

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("advanced_telegram_notifier")

class AdvancedTelegramNotifier:
    """H·ªá th·ªëng th√¥ng b√°o Telegram n√¢ng cao"""
    
    def __init__(self, config_path: str = "configs/telegram_config.json"):
        """
        Kh·ªüi t·∫°o AdvancedTelegramNotifier
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫•u h√¨nh Telegram
        """
        self.config_path = config_path
        self.config = self.load_config()
        
        # L·∫•y token v√† chat_id t·ª´ config ho·∫∑c env
        token_from_config = self.config.get("bot_token")
        chat_id_from_config = self.config.get("chat_id")
        use_env_variables = self.config.get("use_env_variables", False)
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i d√πng bi·∫øn m√¥i tr∆∞·ªùng kh√¥ng
        if use_env_variables or token_from_config == "ENVIRONMENT" or not token_from_config:
            self.bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
            logger.info("S·ª≠ d·ª•ng TELEGRAM_BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
        else:
            self.bot_token = token_from_config
            
        if use_env_variables or chat_id_from_config == "ENVIRONMENT" or not chat_id_from_config:
            self.chat_id = os.environ.get("TELEGRAM_CHAT_ID")
            logger.info("S·ª≠ d·ª•ng TELEGRAM_CHAT_ID t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
        else:
            self.chat_id = chat_id_from_config
            
        self.enabled = self.config.get("enabled", True)
        
        # Load settings
        self.settings = self.config.get("notification_settings", {})
        self.templates = self.config.get("message_templates", {})
        
        # Ki·ªÉm tra c·∫•u h√¨nh
        if not self.bot_token:
            logger.warning("Ch∆∞a c·∫•u h√¨nh TELEGRAM_BOT_TOKEN. Th√¥ng b√°o Telegram s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
        if not self.chat_id:
            logger.warning("Ch∆∞a c·∫•u h√¨nh TELEGRAM_CHAT_ID. Th√¥ng b√°o Telegram s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
        
        # Theo d√µi th√¥ng b√°o
        self.notification_count = 0
        self.last_notification_reset = time.time()
        self.last_price_alert = {}  # {symbol: timestamp}
    
    def load_config(self) -> Dict:
        """
        Load c·∫•u h√¨nh t·ª´ file
        
        Returns:
            Dict: C·∫•u h√¨nh Telegram
        """
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {self.config_path}")
                return config
            else:
                # T·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i
                return self.create_default_config()
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Telegram: {str(e)}")
            return {}
    
    def create_default_config(self) -> Dict:
        """
        T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        
        Returns:
            Dict: C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        """
        config = {
            "bot_token": "",
            "chat_id": "",
            "use_env_variables": True,
            "enabled": True,
            "notification_settings": {
                "enable_trade_signals": True,
                "enable_price_alerts": True,
                "enable_position_updates": True,
                "enable_sltp_alerts": True,
                "min_price_change_percent": 3.0,
                "price_alert_cooldown": 3600,
                "position_update_interval": 3600,
                "max_notifications_per_hour": 20,
                "quiet_hours_start": 0,
                "quiet_hours_end": 0
            },
            "message_templates": {
                "startup": "üöÄ H·ªÜ TH·ªêNG GIAO D·ªäCH T·ª∞ ƒê·ªòNG ƒê√É KH·ªûI ƒê·ªòNG\n\nS·ªë d∆∞: {account_balance:.2f} USDT\nV·ªã th·∫ø ƒëang m·ªü: {positions_count}\n\nTh·ªùi gian: {date_time}",
                "trade_signal": "üö® T√çN HI·ªÜU GIAO D·ªäCH M·ªöI üö®\n\nC·∫∑p: {symbol}\nH∆∞·ªõng: {side_emoji} {side}\nGi√° v√†o l·ªánh: {entry_price:.2f}\nStop Loss: {stop_loss:.2f}\nTake Profit: {take_profit:.2f}\nRisk/Reward: 1:{risk_reward:.2f}\nKhung th·ªùi gian: {timeframe}\nChi·∫øn l∆∞·ª£c: {strategy}\nƒê·ªô tin c·∫≠y: {confidence_stars} ({confidence:.1f}%)\n\nüí° ƒê·∫∑t SL/TP theo m·ª©c ƒë∆∞·ª£c g·ª£i √Ω ƒë·ªÉ ƒë·∫£m b·∫£o qu·∫£n l√Ω v·ªën!",
                "price_alert": "üìà C·∫¢NH B√ÅO GI√Å {symbol} üìà\n\nGi√° hi·ªán t·∫°i: {current_price}\nThay ƒë·ªïi: {price_change:.2f}%\nKhung th·ªùi gian: {timeframe}\nL√Ω do: {reason}\n\nC·∫£nh b√°o n√†y d·ª±a tr√™n c√°c thay ƒë·ªïi ƒë√°ng k·ªÉ v·ªÅ gi√°.",
                "position_update": "üìä C·∫¨P NH·∫¨T V·ªä TH·∫æ\n\nV·ªã th·∫ø ƒëang m·ªü: {positions_count}\n\n{positions_detail}\n\nS·ªë d∆∞ t√†i kho·∫£n: {account_balance:.2f} USDT\nT·ªïng v·ªã th·∫ø: {total_position_size:.2f} USDT\nT·ª∑ l·ªá margin: {margin_ratio:.2f}%\nUnrealized P/L: {unrealized_pnl:.2f} USDT\nP/L ng√†y: {daily_pnl:.2f} USDT ({daily_pnl_percent:.2f}%)",
                "sltp_update": "üîÑ C·∫¨P NH·∫¨T SL/TP üîÑ\n\nC·∫∑p: {symbol}\nH∆∞·ªõng: {side_emoji} {side}\n{sl_update}{tp_update}\nL√Ω do: {reason}\n\nH·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh m·ª©c SL/TP.",
                "error": "‚ö†Ô∏è L·ªñI H·ªÜ TH·ªêNG ‚ö†Ô∏è\n\nTh·ªùi gian: {date_time}\nM√¥-ƒëun: {module}\nM·ª©c ƒë·ªô: {severity}\nM√¥ t·∫£: {description}\n\nVui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
            }
        }
        
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c cha t·ªìn t·∫°i
        os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
        
        # L∆∞u config
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
            logger.info(f"ƒê√£ t·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh t·∫°i {self.config_path}")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh: {str(e)}")
        
        return config
    
    def _should_send_notification(self) -> bool:
        """
        Ki·ªÉm tra xem c√≥ n√™n g·ª≠i th√¥ng b√°o kh√¥ng d·ª±a tr√™n c√°c ƒëi·ªÅu ki·ªán:
        - S·ªë l∆∞·ª£ng th√¥ng b√°o m·ªói gi·ªù
        - Th·ªùi gian im l·∫∑ng
        
        Returns:
            bool: True n·∫øu n√™n g·ª≠i th√¥ng b√°o
        """
        if not self.enabled or not self.bot_token or not self.chat_id:
            return False
        
        # Ki·ªÉm tra th·ªùi gian im l·∫∑ng
        quiet_start = self.settings.get("quiet_hours_start", 0)
        quiet_end = self.settings.get("quiet_hours_end", 0)
        
        if quiet_start != quiet_end:  # N·∫øu c√≥ c·∫•u h√¨nh th·ªùi gian im l·∫∑ng
            current_hour = datetime.datetime.now().hour
            if quiet_start < quiet_end:  # V√≠ d·ª•: 22h -> 6h
                if quiet_start <= current_hour < quiet_end:
                    logger.info(f"Hi·ªán t·∫°i l√† th·ªùi gian im l·∫∑ng ({quiet_start}h-{quiet_end}h). Kh√¥ng g·ª≠i th√¥ng b√°o.")
                    return False
            else:  # V√≠ d·ª•: 22h -> 6h (qua ng√†y)
                if current_hour >= quiet_start or current_hour < quiet_end:
                    logger.info(f"Hi·ªán t·∫°i l√† th·ªùi gian im l·∫∑ng ({quiet_start}h-{quiet_end}h). Kh√¥ng g·ª≠i th√¥ng b√°o.")
                    return False
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng th√¥ng b√°o m·ªói gi·ªù
        now = time.time()
        max_per_hour = self.settings.get("max_notifications_per_hour", 20)
        
        # Reset b·ªô ƒë·∫øm n·∫øu ƒë√£ qua 1 gi·ªù
        if now - self.last_notification_reset > 3600:
            self.notification_count = 0
            self.last_notification_reset = now
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªëi ƒëa
        if self.notification_count >= max_per_hour:
            logger.info(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n th√¥ng b√°o m·ªói gi·ªù ({max_per_hour}). Kh√¥ng g·ª≠i th√™m th√¥ng b√°o.")
            return False
        
        # TƒÉng b·ªô ƒë·∫øm
        self.notification_count += 1
        return True
    
    def send_message(self, text: str) -> bool:
        """
        G·ª≠i tin nh·∫Øn t·ªõi Telegram
        
        Args:
            text: N·ªôi dung tin nh·∫Øn
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self._should_send_notification():
            return False
        
        if not self.bot_token or not self.chat_id:
            logger.warning("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram do thi·∫øu bot token ho·∫∑c chat ID")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, json=payload)
            response_data = response.json()
            
            if response.status_code == 200 and response_data.get("ok"):
                logger.info("ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {response_data}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {str(e)}")
            return False
    
    def notify_system_status(self, status: str, uptime: int = 0, account_balance: float = 0.0,
                             positions_count: int = 0, next_maintenance: Optional[str] = None) -> bool:
        """
        Th√¥ng b√°o tr·∫°ng th√°i h·ªá th·ªëng
        
        Args:
            status: Tr·∫°ng th√°i (running, stopped, error)
            uptime: Th·ªùi gian ho·∫°t ƒë·ªông (gi√¢y)
            account_balance: S·ªë d∆∞ t√†i kho·∫£n
            positions_count: S·ªë l∆∞·ª£ng v·ªã th·∫ø
            next_maintenance: Th·ªùi gian b·∫£o tr√¨ ti·∫øp theo
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        # Format uptime
        uptime_str = ""
        if uptime > 0:
            days, remainder = divmod(uptime, 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)
            
            if days > 0:
                uptime_str = f"{int(days)}d {int(hours)}h {int(minutes)}m"
            elif hours > 0:
                uptime_str = f"{int(hours)}h {int(minutes)}m"
            else:
                uptime_str = f"{int(minutes)}m {int(seconds)}s"
        
        # T√πy ch·ªânh emoji d·ª±a v√†o tr·∫°ng th√°i
        if status == "running":
            status_emoji = "üü¢"
            status_text = "ƒêANG CH·∫†Y"
        elif status == "stopped":
            status_emoji = "üî¥"
            status_text = "ƒê√É D·ª™NG"
        elif status == "error":
            status_emoji = "‚ö†Ô∏è"
            status_text = "L·ªñI"
        else:
            status_emoji = "‚ÑπÔ∏è"
            status_text = status.upper()
        
        # T·∫°o th√¥ng b√°o
        date_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = self.templates.get("startup", "üöÄ H·ªÜ TH·ªêNG GIAO D·ªäCH T·ª∞ ƒê·ªòNG").format(
            status_emoji=status_emoji,
            status=status_text,
            uptime=uptime_str,
            account_balance=account_balance,
            positions_count=positions_count,
            date_time=date_time,
            next_maintenance=next_maintenance or "Kh√¥ng c√≥"
        )
        
        return self.send_message(message)
    
    def notify_trade_signal(self, symbol: str, side: str, entry_price: float, stop_loss: float,
                           take_profit: float, risk_reward: float, timeframe: str = "1h",
                           strategy: str = "", confidence: float = 0.0) -> bool:
        """
        Th√¥ng b√°o t√≠n hi·ªáu giao d·ªãch
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            side: H∆∞·ªõng (LONG/SHORT)
            entry_price: Gi√° v√†o l·ªánh
            stop_loss: Gi√° stop loss
            take_profit: Gi√° take profit
            risk_reward: T·ª∑ l·ªá Risk/Reward
            timeframe: Khung th·ªùi gian
            strategy: Chi·∫øn l∆∞·ª£c
            confidence: ƒê·ªô tin c·∫≠y (0-100%)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.settings.get("enable_trade_signals", True):
            return False
        
        # Format c√°c gi√° tr·ªã
        side = side.upper()
        side_emoji = "üü¢" if side == "LONG" else "üî¥"
        
        # T·∫°o ƒë·ªô tin c·∫≠y b·∫±ng sao
        confidence_stars = ""
        if confidence > 0:
            stars_count = min(5, max(1, int(confidence / 20)))
            confidence_stars = "‚≠ê" * stars_count
        
        # T·∫°o th√¥ng b√°o
        message = self.templates.get("trade_signal").format(
            symbol=symbol,
            side=side,
            side_emoji=side_emoji,
            entry_price=entry_price,
            stop_loss=stop_loss,
            take_profit=take_profit,
            risk_reward=risk_reward,
            timeframe=timeframe,
            strategy=strategy,
            confidence=confidence,
            confidence_stars=confidence_stars
        )
        
        return self.send_message(message)
    
    def notify_price_alert(self, symbol: str, current_price: Union[float, str], price_change: float,
                          timeframe: str = "15m", reason: str = "Significant movement") -> bool:
        """
        Th√¥ng b√°o c·∫£nh b√°o gi√°
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            current_price: Gi√° hi·ªán t·∫°i
            price_change: Ph·∫ßn trƒÉm thay ƒë·ªïi gi√°
            timeframe: Khung th·ªùi gian
            reason: L√Ω do c·∫£nh b√°o
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.settings.get("enable_price_alerts", True):
            return False
        
        # Ki·ªÉm tra ng∆∞·ª°ng thay ƒë·ªïi gi√° t·ªëi thi·ªÉu
        min_change = self.settings.get("min_price_change_percent", 3.0)
        if abs(price_change) < min_change:
            return False
        
        # Ki·ªÉm tra th·ªùi gian ch·ªù gi·ªØa c√°c c·∫£nh b√°o
        now = time.time()
        cooldown = self.settings.get("price_alert_cooldown", 3600)  # 1 gi·ªù m·∫∑c ƒë·ªãnh
        
        if symbol in self.last_price_alert and now - self.last_price_alert[symbol] < cooldown:
            logger.info(f"ƒêang trong th·ªùi gian ch·ªù cho c·∫£nh b√°o gi√° {symbol}. B·ªè qua.")
            return False
        
        # C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o cu·ªëi c√πng
        self.last_price_alert[symbol] = now
        
        # T·∫°o th√¥ng b√°o
        message = self.templates.get("price_alert").format(
            symbol=symbol,
            current_price=current_price,
            price_change=price_change,
            timeframe=timeframe,
            reason=reason
        )
        
        return self.send_message(message)
    
    def notify_position_update(self, positions: List[Dict], account_balance: float = 0.0,
                              unrealized_pnl: float = 0.0, daily_pnl: float = 0.0,
                              daily_pnl_percent: float = 0.0) -> bool:
        """
        Th√¥ng b√°o c·∫≠p nh·∫≠t v·ªã th·∫ø
        
        Args:
            positions: Danh s√°ch v·ªã th·∫ø
            account_balance: S·ªë d∆∞ t√†i kho·∫£n
            unrealized_pnl: L·ª£i nhu·∫≠n ch∆∞a th·ª±c hi·ªán
            daily_pnl: L·ª£i nhu·∫≠n ng√†y
            daily_pnl_percent: Ph·∫ßn trƒÉm l·ª£i nhu·∫≠n ng√†y
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.settings.get("enable_position_updates", True):
            return False
        
        if not positions:
            return False
        
        # T√≠nh t·ªïng gi√° tr·ªã v·ªã th·∫ø v√† margin ratio
        total_position_size = 0.0
        for pos in positions:
            amt = abs(float(pos.get("positionAmt", 0)))
            price = float(pos.get("entryPrice", 0))
            total_position_size += amt * price
        
        margin_ratio = (total_position_size / account_balance * 100) if account_balance > 0 else 0
        
        # Format chi ti·∫øt v·ªã th·∫ø
        positions_detail = ""
        for pos in positions:
            symbol = pos.get("symbol", "UNKNOWN")
            amt = float(pos.get("positionAmt", 0))
            side = "LONG" if amt > 0 else "SHORT"
            side_emoji = "üü¢" if side == "LONG" else "üî¥"
            chart_emoji = "üìà" if side == "LONG" else "üìâ"
            entry_price = float(pos.get("entryPrice", 0))
            mark_price = float(pos.get("markPrice", 0))
            unrealized_profit = float(pos.get("unrealizedProfit", 0))
            
            # T√≠nh % P/L
            position_size = abs(amt) * entry_price
            pnl_percent = (unrealized_profit / position_size * 100) if position_size > 0 else 0
            
            positions_detail += f"{side_emoji} {symbol} {chart_emoji} {side}\n"
            positions_detail += f"   Size: {abs(amt):.4f} ({abs(amt) * entry_price:.2f} USDT)\n"
            positions_detail += f"   Entry: {entry_price:.2f} | Mark: {mark_price:.2f}\n"
            positions_detail += f"   P/L: {'+' if unrealized_profit >= 0 else ''}{unrealized_profit:.2f} USDT ({'+' if pnl_percent >= 0 else ''}{pnl_percent:.2f}%)\n"
        
        # T·∫°o th√¥ng b√°o
        message = self.templates.get("position_update").format(
            positions_count=len(positions),
            positions_detail=positions_detail,
            account_balance=account_balance,
            total_position_size=total_position_size,
            margin_ratio=margin_ratio,
            unrealized_pnl=unrealized_pnl,
            daily_pnl=daily_pnl,
            daily_pnl_percent=daily_pnl_percent
        )
        
        return self.send_message(message)
    
    def notify_sltp_update(self, symbol: str, side: str, old_sl: float = 0, new_sl: float = 0,
                          old_tp: float = 0, new_tp: float = 0, reason: str = "manual") -> bool:
        """
        Th√¥ng b√°o c·∫≠p nh·∫≠t SL/TP
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            side: H∆∞·ªõng (LONG/SHORT)
            old_sl: Gi√° SL c≈©
            new_sl: Gi√° SL m·ªõi
            old_tp: Gi√° TP c≈©
            new_tp: Gi√° TP m·ªõi
            reason: L√Ω do c·∫≠p nh·∫≠t
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        if not self.settings.get("enable_sltp_alerts", True):
            return False
        
        # Ki·ªÉm tra xem c√≥ s·ª± thay ƒë·ªïi kh√¥ng
        sl_changed = old_sl > 0 and new_sl > 0 and old_sl != new_sl
        tp_changed = old_tp > 0 and new_tp > 0 and old_tp != new_tp
        
        if not sl_changed and not tp_changed:
            return False
        
        # Format c√°c gi√° tr·ªã
        side = side.upper()
        side_emoji = "üìà" if side == "LONG" else "üìâ"
        
        # Format l√Ω do
        reason_text = reason
        if reason == "trailing_stop":
            reason_text = "Trailing Stop"
        elif reason == "manual":
            reason_text = "ƒêi·ªÅu ch·ªânh th·ªß c√¥ng"
        elif reason == "breakeven":
            reason_text = "ƒêi·ªÅu ch·ªânh v·ªÅ ƒëi·ªÉm h√≤a v·ªën"
        
        # T·∫°o ph·∫ßn SL update
        sl_update = ""
        if sl_changed:
            sl_update = f"Stop Loss: {old_sl:.2f} ‚û°Ô∏è {new_sl:.2f}\n"
        
        # T·∫°o ph·∫ßn TP update
        tp_update = ""
        if tp_changed:
            tp_update = f"Take Profit: {old_tp:.2f} ‚û°Ô∏è {new_tp:.2f}\n"
        
        # T·∫°o th√¥ng b√°o
        message = self.templates.get("sltp_update").format(
            symbol=symbol,
            side=side,
            side_emoji=side_emoji,
            sl_update=sl_update,
            tp_update=tp_update,
            reason=reason_text
        )
        
        return self.send_message(message)
    
    def notify_error(self, description: str, module: str = "system", severity: str = "critical") -> bool:
        """
        Th√¥ng b√°o l·ªói h·ªá th·ªëng
        
        Args:
            description: M√¥ t·∫£ l·ªói
            module: T√™n module g·∫∑p l·ªói
            severity: M·ª©c ƒë·ªô nghi√™m tr·ªçng (critical, warning, info)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        date_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # T·∫°o th√¥ng b√°o
        message = self.templates.get("error").format(
            date_time=date_time,
            module=module,
            severity=severity,
            description=description
        )
        
        return self.send_message(message)


# For testing
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Test Advanced Telegram Notifier')
    parser.add_argument('--test', choices=['startup', 'trade', 'price', 'position', 'sltp', 'error'], 
                        help='Test notification type')
    args = parser.parse_args()
    
    notifier = AdvancedTelegramNotifier()
    
    if args.test == 'startup':
        notifier.notify_system_status('running', 3600, 10000.0, 3)
    elif args.test == 'trade':
        notifier.notify_trade_signal('BTCUSDT', 'LONG', 85000.0, 83000.0, 89000.0, 2.0, '1h', 'Breakout', 75.0)
    elif args.test == 'price':
        notifier.notify_price_alert('BTCUSDT', 86000, 5.2, '15m', 'Breakout detected')
    elif args.test == 'position':
        positions = [
            {"symbol": "BTCUSDT", "positionAmt": "0.025", "entryPrice": "85000", "markPrice": "86000", "unrealizedProfit": "25"},
            {"symbol": "ETHUSDT", "positionAmt": "-1.5", "entryPrice": "2200", "markPrice": "2210", "unrealizedProfit": "-15"}
        ]
        notifier.notify_position_update(positions, 13500.0, 10.0, 120.5, 0.89)
    elif args.test == 'sltp':
        notifier.notify_sltp_update('BTCUSDT', 'LONG', 83000.0, 83500.0, 0, 0, 'trailing_stop')
    elif args.test == 'error':
        notifier.notify_error('L·ªói k·∫øt n·ªëi t·ªõi API Binance', 'binance_api', 'critical')
    else:
        print("S·ª≠ d·ª•ng --test ƒë·ªÉ ki·ªÉm tra c√°c lo·∫°i th√¥ng b√°o")