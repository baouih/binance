#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module qu·∫£n l√Ω th√¥ng b√°o Telegram n√¢ng cao
H·ªó tr·ª£ g·ª≠i th√¥ng b√°o, t√≠n hi·ªáu giao d·ªãch, c·∫≠p nh·∫≠t v·ªã th·∫ø v√† th√¥ng b√°o h·ªá th·ªëng
"""

import os
import requests
import json
import logging
import time
from datetime import datetime
import traceback

# C·∫•u h√¨nh logging
logger = logging.getLogger("telegram_notifier")

class TelegramNotifier:
    """
    L·ªõp qu·∫£n l√Ω th√¥ng b√°o Telegram
    Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ g·ª≠i c√°c lo·∫°i th√¥ng b√°o kh√°c nhau
    """
    
    def __init__(self, token=None, chat_id=None, config_file=None):
        """
        Kh·ªüi t·∫°o v·ªõi token v√† chat_id
        
        :param token: Telegram bot token
        :param chat_id: Telegram chat ID
        :param config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh (n·∫øu kh√¥ng c√≥ token v√† chat_id)
        """
        self.token = token or os.environ.get("TELEGRAM_BOT_TOKEN")
        self.chat_id = chat_id or os.environ.get("TELEGRAM_CHAT_ID")
        self.config = self.load_config(config_file)
        self.last_notification_time = {}
        self.api_url = f"https://api.telegram.org/bot{self.token}"
    
    def load_config(self, config_file=None):
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        :param config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        :return: Dict c·∫•u h√¨nh
        """
        try:
            # N·∫øu kh√¥ng c√≥ file c·∫•u h√¨nh, th·ª≠ t√¨m file m·∫∑c ƒë·ªãnh
            if not config_file:
                config_file = "configs/telegram_config.json"
            
            if not os.path.exists(config_file):
                # Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y file
                return {
                    "notification_settings": {
                        "enable_trade_signals": True,
                        "enable_price_alerts": True,
                        "enable_position_updates": True,
                        "enable_sltp_alerts": True,
                        "min_price_change_percent": 3.0,
                        "price_alert_cooldown": 3600,
                        "position_update_interval": 3600,
                        "max_notifications_per_hour": 20,
                        "quiet_hours_start": 0,
                        "quiet_hours_end": 0
                    }
                }
            
            with open(config_file, "r") as f:
                config = json.load(f)
                return config
                
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Telegram: {str(e)}")
            # Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
            return {
                "notification_settings": {
                    "enable_trade_signals": True,
                    "enable_price_alerts": True,
                    "enable_position_updates": True,
                    "enable_sltp_alerts": True,
                    "min_price_change_percent": 3.0,
                    "price_alert_cooldown": 3600,
                    "position_update_interval": 3600,
                    "max_notifications_per_hour": 20,
                    "quiet_hours_start": 0,
                    "quiet_hours_end": 0
                }
            }
    
    def is_valid_setup(self):
        """
        Ki·ªÉm tra xem ƒë√£ c·∫•u h√¨nh token v√† chat_id ch∆∞a
        
        :return: Boolean
        """
        return bool(self.token and self.chat_id)
    
    def is_in_quiet_hours(self):
        """
        Ki·ªÉm tra xem hi·ªán t·∫°i c√≥ n·∫±m trong "quiet hours" kh√¥ng
        
        :return: Boolean
        """
        # L·∫•y c·∫•u h√¨nh quiet hours
        settings = self.config.get("notification_settings", {})
        quiet_start = settings.get("quiet_hours_start", 0)
        quiet_end = settings.get("quiet_hours_end", 0)
        
        # N·∫øu start = end = 0, kh√¥ng c√≥ quiet hours
        if quiet_start == 0 and quiet_end == 0:
            return False
        
        # L·∫•y gi·ªù hi·ªán t·∫°i
        current_hour = datetime.now().hour
        
        # Ki·ªÉm tra
        if quiet_start < quiet_end:  # VD: 22h - 6h
            return quiet_start <= current_hour < quiet_end
        else:  # VD: 22h - 6h (qua ng√†y)
            return current_hour >= quiet_start or current_hour < quiet_end
    
    def can_send_notification(self, notification_type):
        """
        Ki·ªÉm tra xem c√≥ th·ªÉ g·ª≠i th√¥ng b√°o lo·∫°i n√†y kh√¥ng
        
        :param notification_type: Lo·∫°i th√¥ng b√°o (trade_signals, price_alerts, position_updates, sltp_alerts)
        :return: Boolean
        """
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c·∫•u h√¨nh
        if not self.is_valid_setup():
            return False
        
        # Ki·ªÉm tra quiet hours
        if self.is_in_quiet_hours():
            return False
        
        # Ki·ªÉm tra c·∫•u h√¨nh cho lo·∫°i th√¥ng b√°o
        settings = self.config.get("notification_settings", {})
        
        if notification_type == "trade_signals":
            return settings.get("enable_trade_signals", True)
        elif notification_type == "price_alerts":
            return settings.get("enable_price_alerts", True)
        elif notification_type == "position_updates":
            return settings.get("enable_position_updates", True)
        elif notification_type == "sltp_alerts":
            return settings.get("enable_sltp_alerts", True)
        else:
            return True  # C√°c lo·∫°i th√¥ng b√°o kh√°c
    
    def check_cooldown(self, notification_type, identifier=None):
        """
        Ki·ªÉm tra cooldown cho lo·∫°i th√¥ng b√°o
        
        :param notification_type: Lo·∫°i th√¥ng b√°o
        :param identifier: ID ƒë·ªÉ ph√¢n bi·ªát (v√≠ d·ª•: t√™n c·∫∑p ti·ªÅn)
        :return: Boolean (True n·∫øu ƒë√£ h·∫øt cooldown)
        """
        # T·∫°o key duy nh·∫•t cho lo·∫°i th√¥ng b√°o v√† identifier
        key = f"{notification_type}_{identifier}" if identifier else notification_type
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i
        current_time = time.time()
        
        # L·∫•y c·∫•u h√¨nh cooldown
        settings = self.config.get("notification_settings", {})
        cooldown = 0
        
        if notification_type == "price_alerts":
            cooldown = settings.get("price_alert_cooldown", 3600)
        elif notification_type == "position_updates":
            cooldown = settings.get("position_update_interval", 3600)
        else:
            cooldown = 300  # M·∫∑c ƒë·ªãnh 5 ph√∫t
        
        # Ki·ªÉm tra xem ƒë√£ h·∫øt cooldown ch∆∞a
        if key in self.last_notification_time:
            last_time = self.last_notification_time[key]
            if (current_time - last_time) < cooldown:
                return False
        
        # C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i th√¥ng b√°o cu·ªëi c√πng
        self.last_notification_time[key] = current_time
        return True
    
    def send_message(self, message, parse_mode="HTML"):
        """
        G·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng
        
        :param message: N·ªôi dung tin nh·∫Øn
        :param parse_mode: Ch·∫ø ƒë·ªô parse (HTML ho·∫∑c Markdown)
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if not self.is_valid_setup():
            logger.error("Thi·∫øu th√¥ng tin token ho·∫∑c chat_id")
            return False
        
        try:
            url = f"{self.api_url}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, json=payload)
            
            if response.status_code == 200:
                logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng: {message[:50]}...")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def send_trade_signal(self, symbol, side, entry_price, stop_loss, take_profit, timeframe, strategy, confidence=None):
        """
        G·ª≠i t√≠n hi·ªáu giao d·ªãch
        
        :param symbol: C·∫∑p ti·ªÅn, v√≠ d·ª• BTCUSDT
        :param side: H∆∞·ªõng giao d·ªãch (LONG ho·∫∑c SHORT)
        :param entry_price: Gi√° v√†o l·ªánh
        :param stop_loss: Gi√° stop loss
        :param take_profit: Gi√° take profit
        :param timeframe: Khung th·ªùi gian
        :param strategy: T√™n chi·∫øn l∆∞·ª£c
        :param confidence: ƒê·ªô tin c·∫≠y (0-100%)
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if not self.can_send_notification("trade_signals"):
            return False
        
        # T√≠nh Risk/Reward
        if stop_loss and take_profit and entry_price:
            if side == "LONG":
                risk = entry_price - stop_loss
                reward = take_profit - entry_price
            else:  # SHORT
                risk = stop_loss - entry_price
                reward = entry_price - take_profit
            
            if risk > 0:
                risk_reward = reward / risk
            else:
                risk_reward = 0
        else:
            risk_reward = 0
        
        # T·∫°o emoji cho side
        side_emoji = "üü¢ LONG" if side == "LONG" else "üî¥ SHORT"
        
        # T·∫°o emoji cho ƒë·ªô tin c·∫≠y
        confidence_stars = ""
        if confidence:
            num_stars = int((confidence / 100) * 5)
            confidence_stars = "‚≠ê" * num_stars
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = f"""üö® T√çN HI·ªÜU GIAO D·ªäCH M·ªöI üö®

C·∫∑p: {symbol}
H∆∞·ªõng: {side_emoji}
Gi√° v√†o l·ªánh: {entry_price:.2f}
Stop Loss: {stop_loss:.2f}
Take Profit: {take_profit:.2f}
Risk/Reward: 1:{risk_reward:.2f}
Khung th·ªùi gian: {timeframe}
Chi·∫øn l∆∞·ª£c: {strategy}"""

        if confidence:
            message += f"\nƒê·ªô tin c·∫≠y: {confidence_stars} ({confidence:.1f}%)"
        
        message += "\n\nüí° ƒê·∫∑t SL/TP theo m·ª©c ƒë∆∞·ª£c g·ª£i √Ω ƒë·ªÉ ƒë·∫£m b·∫£o qu·∫£n l√Ω v·ªën!"
        
        return self.send_message(message)
    
    def send_price_alert(self, symbol, current_price, change_percent, timeframe, reason=None):
        """
        G·ª≠i c·∫£nh b√°o bi·∫øn ƒë·ªông gi√°
        
        :param symbol: C·∫∑p ti·ªÅn, v√≠ d·ª• BTCUSDT
        :param current_price: Gi√° hi·ªán t·∫°i
        :param change_percent: % thay ƒë·ªïi
        :param timeframe: Khung th·ªùi gian
        :param reason: L√Ω do c·∫£nh b√°o
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if not self.can_send_notification("price_alerts"):
            return False
        
        # Ki·ªÉm tra cooldown
        if not self.check_cooldown("price_alerts", symbol):
            return False
        
        # Ki·ªÉm tra % thay ƒë·ªïi t·ªëi thi·ªÉu
        settings = self.config.get("notification_settings", {})
        min_change = settings.get("min_price_change_percent", 3.0)
        
        if abs(change_percent) < min_change:
            return False
        
        # T·∫°o emoji d·ª±a tr√™n h∆∞·ªõng thay ƒë·ªïi
        emoji = "üìà" if change_percent > 0 else "üìâ"
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = f"""{emoji} C·∫¢NH B√ÅO GI√Å {symbol} {emoji}

Gi√° hi·ªán t·∫°i: {current_price}
Thay ƒë·ªïi: {'+' if change_percent > 0 else ''}{change_percent:.2f}%
Khung th·ªùi gian: {timeframe}"""

        if reason:
            message += f"\nL√Ω do: {reason}"
        
        message += "\n\nC·∫£nh b√°o n√†y d·ª±a tr√™n c√°c thay ƒë·ªïi ƒë√°ng k·ªÉ v·ªÅ gi√°."
        
        return self.send_message(message)
    
    def send_position_update(self, positions, account_balance, unrealized_pnl=None, daily_pnl=None):
        """
        G·ª≠i c·∫≠p nh·∫≠t v·ªã th·∫ø
        
        :param positions: List c√°c v·ªã th·∫ø ƒëang m·ªü
        :param account_balance: S·ªë d∆∞ t√†i kho·∫£n
        :param unrealized_pnl: L·ª£i nhu·∫≠n ch∆∞a th·ª±c hi·ªán
        :param daily_pnl: L·ª£i nhu·∫≠n trong ng√†y
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if not self.can_send_notification("position_updates"):
            return False
        
        # Ki·ªÉm tra cooldown
        if not self.check_cooldown("position_updates"):
            return False
        
        # T√≠nh t·ªïng gi√° tr·ªã v·ªã th·∫ø
        total_position_value = sum(pos.get("amount", 0) * pos.get("entry_price", 0) for pos in positions)
        
        # T√≠nh % margin
        margin_percent = (total_position_value / account_balance * 100) if account_balance > 0 else 0
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = f"""üìä C·∫¨P NH·∫¨T V·ªä TH·∫æ

V·ªã th·∫ø ƒëang m·ªü: {len(positions)}
"""
        
        # Th√™m th√¥ng tin t·ª´ng v·ªã th·∫ø
        for pos in positions:
            symbol = pos.get("symbol", "")
            side = pos.get("side", "")
            side_emoji = "üìà LONG" if side == "LONG" else "üìâ SHORT"
            amount = pos.get("amount", 0)
            entry_price = pos.get("entry_price", 0)
            mark_price = pos.get("mark_price", 0)
            unrealized_pos_pnl = pos.get("unrealized_pnl", 0)
            profit_percent = pos.get("profit_percent", 0)
            
            # T·∫°o emoji cho side
            side_emoji = "üü¢" if side == "LONG" else "üî¥"
            
            # T√≠nh gi√° tr·ªã v·ªã th·∫ø
            position_value = amount * entry_price
            
            message += f"""
{side_emoji} {symbol} {side_emoji} {side}
   Size: {amount:.4f} ({position_value:.2f} USDT)
   Entry: {entry_price:.2f} | Mark: {mark_price:.2f}
   P/L: {'+' if unrealized_pos_pnl >= 0 else ''}{unrealized_pos_pnl:.2f} USDT ({'+' if profit_percent >= 0 else ''}{profit_percent:.2f}%)
"""
        
        # Th√™m t·ªïng quan t√†i kho·∫£n
        message += f"""
S·ªë d∆∞ t√†i kho·∫£n: {account_balance:.2f} USDT
T·ªïng v·ªã th·∫ø: {total_position_value:.2f} USDT
T·ª∑ l·ªá margin: {margin_percent:.2f}%"""

        if unrealized_pnl is not None:
            message += f"\nUnrealized P/L: {'+' if unrealized_pnl >= 0 else ''}{unrealized_pnl:.2f} USDT"
        
        if daily_pnl is not None:
            daily_pnl_percent = (daily_pnl / account_balance * 100) if account_balance > 0 else 0
            message += f"\nP/L ng√†y: {'+' if daily_pnl >= 0 else ''}{daily_pnl:.2f} USDT ({'+' if daily_pnl_percent >= 0 else ''}{daily_pnl_percent:.2f}%)"
        
        return self.send_message(message)
    
    def send_sltp_update(self, symbol, side, old_sl=None, new_sl=None, old_tp=None, new_tp=None, reason=None):
        """
        G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t Stop Loss/Take Profit
        
        :param symbol: C·∫∑p ti·ªÅn, v√≠ d·ª• BTCUSDT
        :param side: H∆∞·ªõng v·ªã th·∫ø (LONG ho·∫∑c SHORT)
        :param old_sl: SL c≈©
        :param new_sl: SL m·ªõi
        :param old_tp: TP c≈©
        :param new_tp: TP m·ªõi
        :param reason: L√Ω do c·∫≠p nh·∫≠t
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if not self.can_send_notification("sltp_alerts"):
            return False
        
        # T·∫°o emoji cho side
        side_emoji = "üìà" if side == "LONG" else "üìâ"
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = f"""üîÑ C·∫¨P NH·∫¨T SL/TP üîÑ

C·∫∑p: {symbol}
H∆∞·ªõng: {side_emoji} {side}"""

        if old_sl is not None and new_sl is not None:
            message += f"\nStop Loss: {old_sl:.2f} ‚û°Ô∏è {new_sl:.2f}"
        elif new_sl is not None:
            message += f"\nStop Loss: {new_sl:.2f}"
        
        if old_tp is not None and new_tp is not None:
            message += f"\nTake Profit: {old_tp:.2f} ‚û°Ô∏è {new_tp:.2f}"
        elif new_tp is not None:
            message += f"\nTake Profit: {new_tp:.2f}"
        
        if reason:
            message += f"\nL√Ω do: {reason}"
        
        message += "\n\nH·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh m·ª©c SL/TP."
        
        return self.send_message(message)
    
    def send_system_status(self, uptime, account_balance, open_positions, daily_trades, daily_pnl=None, system_load=None):
        """
        G·ª≠i th√¥ng b√°o tr·∫°ng th√°i h·ªá th·ªëng
        
        :param uptime: Th·ªùi gian ho·∫°t ƒë·ªông (gi√¢y)
        :param account_balance: S·ªë d∆∞ t√†i kho·∫£n
        :param open_positions: S·ªë v·ªã th·∫ø ƒëang m·ªü
        :param daily_trades: S·ªë giao d·ªãch trong ng√†y
        :param daily_pnl: L·ª£i nhu·∫≠n trong ng√†y
        :param system_load: Th√¥ng tin t·∫£i h·ªá th·ªëng
        :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
        """
        # Chuy·ªÉn ƒë·ªïi uptime th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
        days, remainder = divmod(uptime, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        uptime_str = ""
        if days > 0:
            uptime_str += f"{int(days)} ng√†y "
        if hours > 0:
            uptime_str += f"{int(hours)} gi·ªù "
        if minutes > 0:
            uptime_str += f"{int(minutes)} ph√∫t "
        if seconds > 0 or uptime_str == "":
            uptime_str += f"{int(seconds)} gi√¢y"
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        message = f"""ü§ñ B√ÅO C√ÅO TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG

‚è±Ô∏è Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}
üí∞ S·ªë d∆∞ t√†i kho·∫£n: {account_balance:.2f} USDT
üìä V·ªã th·∫ø ƒëang m·ªü: {open_positions}
üîÑ Giao d·ªãch h√¥m nay: {daily_trades}"""

        if daily_pnl is not None:
            pnl_emoji = "üìà" if daily_pnl >= 0 else "üìâ"
            daily_pnl_percent = (daily_pnl / account_balance * 100) if account_balance > 0 else 0
            message += f"\n{pnl_emoji} P/L h√¥m nay: {'+' if daily_pnl >= 0 else ''}{daily_pnl:.2f} USDT ({'+' if daily_pnl_percent >= 0 else ''}{daily_pnl_percent:.2f}%)"
        
        if system_load:
            message += f"\n‚öôÔ∏è T·∫£i h·ªá th·ªëng: {system_load}"
        
        message += f"\n\nüïí Th·ªùi gian b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
        
        return self.send_message(message)

# H√†m ƒë·ªÉ th·ª≠ nghi·ªám module
def test_telegram_notifier():
    """H√†m ki·ªÉm tra ch·ª©c nƒÉng c·ªßa TelegramNotifier"""
    # C·∫•u h√¨nh logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    print("ƒêang ki·ªÉm tra TelegramNotifier...")
    
    # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    chat_id = os.environ.get("TELEGRAM_CHAT_ID")
    
    if not token or not chat_id:
        print("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID")
        return
    
    # Kh·ªüi t·∫°o notifier
    notifier = TelegramNotifier(token=token, chat_id=chat_id)
    
    # Ki·ªÉm tra g·ª≠i tin nh·∫Øn ƒë∆°n gi·∫£n
    print("ƒêang g·ª≠i tin nh·∫Øn ki·ªÉm tra...")
    message = f"ü§ñ ƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra. Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    if notifier.send_message(message):
        print("‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng")
    else:
        print("‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i")
        return
    
    # Ki·ªÉm tra g·ª≠i t√≠n hi·ªáu giao d·ªãch
    print("ƒêang g·ª≠i t√≠n hi·ªáu giao d·ªãch...")
    if notifier.send_trade_signal(
        symbol="BTCUSDT",
        side="LONG",
        entry_price=50000,
        stop_loss=49000,
        take_profit=52000,
        timeframe="1h",
        strategy="MACD + RSI",
        confidence=75
    ):
        print("‚úÖ G·ª≠i t√≠n hi·ªáu giao d·ªãch th√†nh c√¥ng")
    else:
        print("‚ùå G·ª≠i t√≠n hi·ªáu giao d·ªãch th·∫•t b·∫°i")
    
    # Ki·ªÉm tra g·ª≠i c·∫≠p nh·∫≠t v·ªã th·∫ø
    print("ƒêang g·ª≠i c·∫≠p nh·∫≠t v·ªã th·∫ø...")
    positions = [
        {
            "symbol": "BTCUSDT",
            "side": "LONG",
            "amount": 0.05,
            "entry_price": 50000,
            "mark_price": 50500,
            "unrealized_pnl": 25,
            "profit_percent": 1.0
        },
        {
            "symbol": "ETHUSDT",
            "side": "SHORT",
            "amount": 1.5,
            "entry_price": 3000,
            "mark_price": 2950,
            "unrealized_pnl": 75,
            "profit_percent": 1.67
        }
    ]
    if notifier.send_position_update(
        positions=positions,
        account_balance=10000,
        unrealized_pnl=100,
        daily_pnl=250
    ):
        print("‚úÖ G·ª≠i c·∫≠p nh·∫≠t v·ªã th·∫ø th√†nh c√¥ng")
    else:
        print("‚ùå G·ª≠i c·∫≠p nh·∫≠t v·ªã th·∫ø th·∫•t b·∫°i")
    
    print("Ki·ªÉm tra ho√†n t·∫•t!")

if __name__ == "__main__":
    test_telegram_notifier()