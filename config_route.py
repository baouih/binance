#!/usr/bin/env python3
"""
X·ª≠ l√Ω c·∫•u h√¨nh th√¥ng b√°o v√† b√°o c√°o cho Bot Trading

Module n√†y cung c·∫•p c√°c route v√† h√†m x·ª≠ l√Ω ƒë·ªÉ qu·∫£n l√Ω c·∫•u h√¨nh th√¥ng b√°o
v√† l·∫≠p l·ªãch b√°o c√°o qua Telegram v√† Email
"""

import os
import json
import logging
from flask import render_template, request, jsonify, Blueprint
from dotenv import load_dotenv, set_key

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("config_route")

# T·∫°o Blueprint
config_bp = Blueprint('config', __name__)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
report_config_file = "report_config.json"

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
default_config = {
    "email": {
        "enabled": False,
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "email_user": "",
        "recipients": [],
        "schedules": {
            "daily_report": "18:00",
            "signal_report": "08:00,16:00",
            "market_report": "09:00",
            "training_report": "after_training"
        }
    },
    "telegram": {
        "enabled": False,
        "schedules": {
            "daily_report": "18:00",
            "signal_report": "08:00,12:00,16:00,20:00",
            "market_report": "09:00,21:00",
            "training_report": "after_training"
        }
    },
    "symbols": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "AVAXUSDT", "DOGEUSDT", "ADAUSDT", "DOTUSDT"]
}

def load_config():
    """
    T·∫£i c·∫•u h√¨nh t·ª´ file
    
    Returns:
        dict: C·∫•u h√¨nh b√°o c√°o
    """
    if not os.path.exists(report_config_file):
        return default_config
    
    try:
        with open(report_config_file, "r") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh: {e}")
        return default_config

def save_config(config):
    """
    L∆∞u c·∫•u h√¨nh v√†o file
    
    Args:
        config (dict): C·∫•u h√¨nh b√°o c√°o
        
    Returns:
        bool: True n·∫øu l∆∞u th√†nh c√¥ng, False n·∫øu kh√¥ng
    """
    try:
        with open(report_config_file, "w") as f:
            json.dump(config, f, indent=2)
        return True
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u c·∫•u h√¨nh: {e}")
        return False

def update_env_variables(env_vars):
    """
    C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng t·ª´ c·∫•u h√¨nh
    
    Args:
        env_vars (dict): C√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
    """
    for key, value in env_vars.items():
        os.environ[key] = value
    
    # C·∫≠p nh·∫≠t file .env n·∫øu t·ªìn t·∫°i
    env_file = ".env"
    if os.path.exists(env_file):
        for key, value in env_vars.items():
            set_key(env_file, key, value)

@config_bp.route('/config')
def config_page():
    """Trang c·∫•u h√¨nh th√¥ng b√°o v√† b√°o c√°o"""
    return render_template('config.html')

@config_bp.route('/api/config', methods=['GET'])
def get_config():
    """API l·∫•y c·∫•u h√¨nh hi·ªán t·∫°i"""
    config = load_config()
    
    # B·ªè qua th√¥ng tin nh·∫°y c·∫£m
    if "email" in config and "email_password" in config["email"]:
        config["email"]["email_password"] = "********"
    
    return jsonify(config)

@config_bp.route('/api/config/telegram', methods=['POST'])
def save_telegram_config():
    """API l∆∞u c·∫•u h√¨nh Telegram"""
    data = request.json
    config = load_config()
    
    # C·∫≠p nh·∫≠t c·∫•u h√¨nh Telegram
    config["telegram"]["enabled"] = True
    
    # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
    env_vars = {}
    
    if "botToken" in data and data["botToken"]:
        env_vars["TELEGRAM_BOT_TOKEN"] = data["botToken"]
    
    if "chatId" in data and data["chatId"]:
        env_vars["TELEGRAM_CHAT_ID"] = data["chatId"]
    
    if "notifications" in data:
        config["telegram"]["notifications"] = data["notifications"]
    
    # L∆∞u c·∫•u h√¨nh
    success = save_config(config)
    
    # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
    if success and env_vars:
        update_env_variables(env_vars)
    
    return jsonify({"success": success})

@config_bp.route('/api/config/email', methods=['POST'])
def save_email_config():
    """API l∆∞u c·∫•u h√¨nh Email"""
    data = request.json
    config = load_config()
    
    # C·∫≠p nh·∫≠t c·∫•u h√¨nh Email
    config["email"]["enabled"] = True
    
    if "smtpServer" in data and data["smtpServer"]:
        config["email"]["smtp_server"] = data["smtpServer"]
        env_vars["EMAIL_SMTP_SERVER"] = data["smtpServer"]
    
    if "smtpPort" in data and data["smtpPort"]:
        config["email"]["smtp_port"] = int(data["smtpPort"])
        env_vars["EMAIL_SMTP_PORT"] = str(data["smtpPort"])
    
    if "emailUser" in data and data["emailUser"]:
        config["email"]["email_user"] = data["emailUser"]
        env_vars["EMAIL_USER"] = data["emailUser"]
    
    if "emailPassword" in data and data["emailPassword"]:
        # L∆∞u v√†o bi·∫øn m√¥i tr∆∞·ªùng, kh√¥ng l∆∞u v√†o file c·∫•u h√¨nh
        env_vars["EMAIL_PASSWORD"] = data["emailPassword"]
    
    if "recipients" in data and data["recipients"]:
        config["email"]["recipients"] = data["recipients"]
        if data["recipients"]:
            env_vars["REPORT_EMAIL"] = data["recipients"][0]
    
    if "reports" in data:
        config["email"]["reports"] = data["reports"]
    
    # L∆∞u c·∫•u h√¨nh
    success = save_config(config)
    
    # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
    if success and env_vars:
        update_env_variables(env_vars)
    
    return jsonify({"success": success})

@config_bp.route('/api/config/schedule', methods=['POST'])
def save_schedule_config():
    """API l∆∞u c·∫•u h√¨nh l·ªãch tr√¨nh b√°o c√°o"""
    data = request.json
    config = load_config()
    
    # C·∫≠p nh·∫≠t l·ªãch tr√¨nh Telegram
    if "telegram" in data:
        for report_type, time in data["telegram"].items():
            config["telegram"]["schedules"][report_type] = time
    
    # C·∫≠p nh·∫≠t l·ªãch tr√¨nh Email
    if "email" in data:
        for report_type, time in data["email"].items():
            config["email"]["schedules"][report_type] = time
    
    # L∆∞u c·∫•u h√¨nh
    success = save_config(config)
    
    return jsonify({"success": success})

@config_bp.route('/api/test/telegram', methods=['POST'])
def test_telegram():
    """API ki·ªÉm tra k·∫øt n·ªëi Telegram"""
    data = request.json
    bot_token = data.get("botToken")
    chat_id = data.get("chatId")
    
    if not bot_token or not chat_id:
        return jsonify({"success": False, "message": "Thi·∫øu Bot Token ho·∫∑c Chat ID"})
    
    try:
        # Import telegram_notifier
        from telegram_notify import TelegramNotifier
        
        # T·∫°o notifier t·∫°m th·ªùi cho test
        test_notifier = TelegramNotifier(token=bot_token, chat_id=chat_id)
        
        # G·ª≠i tin nh·∫Øn test
        success = test_notifier.send_message("<b>üß™ TIN NH·∫ÆN KI·ªÇM TRA</b>\n\nK·∫øt n·ªëi Telegram th√†nh c√¥ng!\nBot Trading ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram.")
        
        if success:
            # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
            env_vars = {
                "TELEGRAM_BOT_TOKEN": bot_token,
                "TELEGRAM_CHAT_ID": chat_id
            }
            update_env_variables(env_vars)
            
            return jsonify({"success": True, "message": "K·∫øt n·ªëi Telegram th√†nh c√¥ng!"})
        else:
            return jsonify({"success": False, "message": "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram. Ki·ªÉm tra l·∫°i Bot Token v√† Chat ID."})
    
    except ImportError:
        return jsonify({"success": False, "message": "Kh√¥ng th·ªÉ import module TelegramNotifier"})
    except Exception as e:
        return jsonify({"success": False, "message": f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi Telegram: {str(e)}"})

@config_bp.route('/api/test/email', methods=['POST'])
def test_email():
    """API ki·ªÉm tra k·∫øt n·ªëi Email"""
    data = request.json
    smtp_server = data.get("smtpServer")
    smtp_port = data.get("smtpPort")
    email_user = data.get("emailUser")
    email_password = data.get("emailPassword")
    recipients = data.get("recipients", [])
    
    if not smtp_server or not smtp_port or not email_user or not email_password or not recipients:
        return jsonify({"success": False, "message": "Thi·∫øu th√¥ng tin k·∫øt n·ªëi email"})
    
    try:
        # Import email_report
        from email_report import EmailReporter
        
        # T·∫°o reporter t·∫°m th·ªùi cho test
        test_reporter = EmailReporter(
            smtp_server=smtp_server,
            smtp_port=int(smtp_port),
            email_user=email_user,
            email_password=email_password
        )
        
        # G·ª≠i email test
        recipient = recipients[0] if isinstance(recipients, list) else recipients.split(',')[0].strip()
        success = test_reporter.send_email(
            subject="Ki·ªÉm tra k·∫øt n·ªëi Email - Crypto Trading Bot",
            to_email=recipient,
            text_content="ƒê√¢y l√† email ki·ªÉm tra t·ª´ Crypto Trading Bot. K·∫øt n·ªëi email th√†nh c√¥ng!",
            html_content="<h1>K·∫øt n·ªëi Email th√†nh c√¥ng!</h1><p>ƒê√¢y l√† email ki·ªÉm tra t·ª´ Crypto Trading Bot.</p>"
        )
        
        if success:
            # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
            env_vars = {
                "EMAIL_SMTP_SERVER": smtp_server,
                "EMAIL_SMTP_PORT": str(smtp_port),
                "EMAIL_USER": email_user,
                "EMAIL_PASSWORD": email_password,
                "REPORT_EMAIL": recipient
            }
            update_env_variables(env_vars)
            
            return jsonify({"success": True, "message": f"K·∫øt n·ªëi email th√†nh c√¥ng! ƒê√£ g·ª≠i email ki·ªÉm tra ƒë·∫øn {recipient}"})
        else:
            return jsonify({"success": False, "message": "Kh√¥ng th·ªÉ g·ª≠i email ki·ªÉm tra. Ki·ªÉm tra l·∫°i th√¥ng tin k·∫øt n·ªëi."})
    
    except ImportError:
        return jsonify({"success": False, "message": "Kh√¥ng th·ªÉ import module EmailReporter"})
    except Exception as e:
        return jsonify({"success": False, "message": f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi email: {str(e)}"})

@config_bp.route('/api/send-report', methods=['POST'])
def send_report_now():
    """API g·ª≠i b√°o c√°o ngay l·∫≠p t·ª©c"""
    data = request.json
    report_type = data.get("reportType")
    send_to_telegram = data.get("sendToTelegram", False)
    send_to_email = data.get("sendToEmail", False)
    
    if not report_type or (not send_to_telegram and not send_to_email):
        return jsonify({"success": False, "message": "Thi·∫øu th√¥ng tin g·ª≠i b√°o c√°o"})
    
    try:
        # Import run_reports
        import importlib.util
        spec = importlib.util.spec_from_file_location("run_reports", "run_reports.py")
        run_reports = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(run_reports)
        
        # T·∫°o danh s√°ch c√°c lo·∫°i b√°o c√°o
        report_types = [report_type]
        
        # Ch·∫°y ch·ª©c nƒÉng t·∫°o b√°o c√°o t∆∞∆°ng ·ª©ng
        if report_type == "daily":
            success = run_reports.run_daily_report()
        elif report_type == "signal":
            success = run_reports.run_signal_report()
        elif report_type == "market":
            symbols = ["BTCUSDT", "ETHUSDT"]
            success = run_reports.run_market_report(symbols)
        elif report_type == "training":
            success = run_reports.run_training_report()
        else:
            return jsonify({"success": False, "message": f"Lo·∫°i b√°o c√°o kh√¥ng h·ª£p l·ªá: {report_type}"})
        
        if not success:
            return jsonify({"success": False, "message": f"L·ªói khi t·∫°o b√°o c√°o {report_type}"})
        
        # G·ª≠i b√°o c√°o qua Telegram
        if send_to_telegram:
            telegram_success = run_reports.send_telegram_reports(report_types)
            if not telegram_success:
                return jsonify({"success": False, "message": f"L·ªói khi g·ª≠i b√°o c√°o {report_type} qua Telegram"})
        
        # G·ª≠i b√°o c√°o qua Email
        if send_to_email:
            # L·∫•y email ng∆∞·ªùi nh·∫≠n t·ª´ c·∫•u h√¨nh
            config = load_config()
            recipients = config.get("email", {}).get("recipients", [])
            
            if not recipients:
                return jsonify({"success": False, "message": "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n"})
            
            for recipient in recipients:
                email_success = run_reports.send_email_reports(recipient, report_types)
                if not email_success:
                    return jsonify({"success": False, "message": f"L·ªói khi g·ª≠i b√°o c√°o {report_type} qua Email"})
        
        return jsonify({"success": True, "message": f"B√°o c√°o {report_type} ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"L·ªói khi g·ª≠i b√°o c√°o: {str(e)}"})