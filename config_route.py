"""
Blueprint cho c√°c route qu·∫£n l√Ω c·∫•u h√¨nh h·ªá th·ªëng
"""
import os
import json
import logging
from flask import Blueprint, request, jsonify, session

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger('config_routes')

# Kh·ªüi t·∫°o blueprint
config_bp = Blueprint('config', __name__)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
ACCOUNT_CONFIG_PATH = 'account_config.json'

@config_bp.route('/api/account/settings', methods=['GET'])
def get_account_settings():
    """API endpoint ƒë·ªÉ l·∫•y c√†i ƒë·∫∑t t√†i kho·∫£n"""
    try:
        # ƒê·ªçc c·∫•u h√¨nh hi·ªán t·∫°i
        if os.path.exists(ACCOUNT_CONFIG_PATH):
            with open(ACCOUNT_CONFIG_PATH, 'r') as f:
                config = json.load(f)
        else:
            # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu file kh√¥ng t·ªìn t·∫°i
            config = {
                'api_mode': 'demo',
                'api_key': '',
                'api_secret': '',
                'telegram_enabled': False,
                'telegram_bot_token': '',
                'telegram_chat_id': '',
                'notify_new_trades': True,
                'notify_closed_trades': True,
                'notify_error_status': True,
                'notify_daily_summary': False,
                'enable_stop_loss': True,
                'enable_take_profit': True,
                'enable_trailing_stop': False,
                'max_open_positions': 5,
                'max_daily_trades': 20,
                'max_drawdown': 10,
                'auto_restart_enabled': True,
                'log_ip_activity': True
            }
            
            # L∆∞u c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
            with open(ACCOUNT_CONFIG_PATH, 'w') as f:
                json.dump(config, f, indent=4)
        
        # L∆∞u ch·∫ø ƒë·ªô API v√†o session ƒë·ªÉ c√°c ph·∫ßn kh√°c c√≥ th·ªÉ truy c·∫≠p
        session['api_mode'] = config.get('api_mode', 'demo')
                
        return jsonify(config)
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y c√†i ƒë·∫∑t t√†i kho·∫£n: {str(e)}")
        return jsonify({'error': f"L·ªói: {str(e)}"}), 500

@config_bp.route('/api/account/settings', methods=['POST'])
def update_account_settings():
    """API endpoint ƒë·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t t√†i kho·∫£n"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i'}), 400
        
        # ƒê·ªçc c·∫•u h√¨nh hi·ªán t·∫°i
        if os.path.exists(ACCOUNT_CONFIG_PATH):
            with open(ACCOUNT_CONFIG_PATH, 'r') as f:
                config = json.load(f)
        else:
            config = {}
        
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh v·ªõi d·ªØ li·ªáu m·ªõi
        for key, value in data.items():
            # N·∫øu api_key ho·∫∑c api_secret l√† None, c√≥ nghƒ©a l√† gi·ªØ nguy√™n gi√° tr·ªã c≈©
            if (key == 'api_key' or key == 'api_secret') and value is None:
                continue  # B·ªè qua, gi·ªØ nguy√™n gi√° tr·ªã c≈©
            else:
                config[key] = value
        
        # L∆∞u c·∫•u h√¨nh m·ªõi
        with open(ACCOUNT_CONFIG_PATH, 'w') as f:
            json.dump(config, f, indent=4)
            
        # L∆∞u ch·∫ø ƒë·ªô API v√†o session ƒë·ªÉ c√°c ph·∫ßn kh√°c c√≥ th·ªÉ truy c·∫≠p
        if 'api_mode' in data:
            session['api_mode'] = data['api_mode']
            
        logger.info(f"ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t t√†i kho·∫£n. API Mode: {data.get('api_mode', 'kh√¥ng r√µ')}")
        
        return jsonify({'success': True, 'message': 'ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t t√†i kho·∫£n th√†nh c√¥ng'})
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t t√†i kho·∫£n: {str(e)}")
        return jsonify({'success': False, 'message': f"L·ªói: {str(e)}"}), 500

@config_bp.route('/api/notification/settings', methods=['POST'])
def update_notification_settings():
    """API endpoint ƒë·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i'}), 400
        
        # ƒê·ªçc c·∫•u h√¨nh hi·ªán t·∫°i
        if os.path.exists(ACCOUNT_CONFIG_PATH):
            with open(ACCOUNT_CONFIG_PATH, 'r') as f:
                config = json.load(f)
        else:
            config = {}
        
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh th√¥ng b√°o
        notification_fields = [
            'telegram_enabled', 'telegram_bot_token', 'telegram_chat_id',
            'notify_new_trades', 'notify_closed_trades', 'notify_error_status',
            'notify_daily_summary'
        ]
        
        for field in notification_fields:
            if field in data:
                config[field] = data[field]
        
        # L∆∞u c·∫•u h√¨nh m·ªõi
        with open(ACCOUNT_CONFIG_PATH, 'w') as f:
            json.dump(config, f, indent=4)
        
        return jsonify({'success': True, 'message': 'ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th√†nh c√¥ng'})
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o: {str(e)}")
        return jsonify({'success': False, 'message': f"L·ªói: {str(e)}"}), 500

@config_bp.route('/api/security/settings', methods=['POST'])
def update_security_settings():
    """API endpoint ƒë·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i'}), 400
        
        # ƒê·ªçc c·∫•u h√¨nh hi·ªán t·∫°i
        if os.path.exists(ACCOUNT_CONFIG_PATH):
            with open(ACCOUNT_CONFIG_PATH, 'r') as f:
                config = json.load(f)
        else:
            config = {}
        
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh b·∫£o m·∫≠t
        security_fields = [
            'enable_stop_loss', 'enable_take_profit', 'enable_trailing_stop',
            'max_open_positions', 'max_daily_trades', 'max_drawdown',
            'auto_restart_enabled', 'log_ip_activity'
        ]
        
        for field in security_fields:
            if field in data:
                config[field] = data[field]
        
        # L∆∞u c·∫•u h√¨nh m·ªõi
        with open(ACCOUNT_CONFIG_PATH, 'w') as f:
            json.dump(config, f, indent=4)
        
        return jsonify({'success': True, 'message': 'ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t th√†nh c√¥ng'})
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t: {str(e)}")
        return jsonify({'success': False, 'message': f"L·ªói: {str(e)}"}), 500

@config_bp.route('/api/telegram/test', methods=['POST'])
def test_telegram():
    """API endpoint ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Telegram"""
    try:
        data = request.get_json()
        
        if not data or 'bot_token' not in data or 'chat_id' not in data:
            return jsonify({'success': False, 'message': 'Thi·∫øu th√¥ng tin bot token ho·∫∑c chat ID'}), 400
        
        bot_token = data['bot_token']
        chat_id = data['chat_id']
        message = data.get('message')  # L·∫•y tin nh·∫Øn t√πy ch·ªânh n·∫øu c√≥
        
        # S·ª≠ d·ª•ng module telegram_notify ƒë·ªÉ g·ª≠i tin nh·∫Øn test
        try:
            from telegram_notify import TelegramNotifier
            
            # Kh·ªüi t·∫°o notifier t·∫°m th·ªùi v·ªõi token v√† chat_id ƒë∆∞·ª£c cung c·∫•p
            temp_notifier = TelegramNotifier(token=bot_token, chat_id=chat_id)
            
            # G·ª≠i tin nh·∫Øn test
            if message:
                # N·∫øu c√≥ tin nh·∫Øn t√πy ch·ªânh, s·ª≠ d·ª•ng tin nh·∫Øn ƒë√≥
                success = temp_notifier.send_message(message, parse_mode="HTML")
            else:
                # S·ª≠ d·ª•ng h√†m g·ª≠i tin nh·∫Øn ki·ªÉm tra c√≥ s·∫µn v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
                success = temp_notifier.send_test_message()
            
            if success:
                logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn test ƒë·∫øn Telegram chat ID: {chat_id}")
                
                # L∆∞u token v√† chat_id t·∫°m th·ªùi ƒë·ªÉ s·ª≠ d·ª•ng khi l∆∞u c√†i ƒë·∫∑t
                return jsonify({
                    'success': True, 
                    'message': 'ƒê√£ g·ª≠i tin nh·∫Øn test th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra Telegram c·ªßa b·∫°n.'
                })
            else:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn Telegram")
                return jsonify({
                    'success': False, 
                    'message': 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn test. Vui l√≤ng ki·ªÉm tra token v√† chat ID.'
                }), 400
        
        except Exception as telegram_error:
            logger.error(f"L·ªói khi s·ª≠ d·ª•ng telegram_notify: {str(telegram_error)}")
            
            # Fallback: S·ª≠ d·ª•ng c√°ch g·ª≠i tin nh·∫Øn qua requests tr·ª±c ti·∫øp n·∫øu module c√≥ v·∫•n ƒë·ªÅ
            try:
                import requests
                telegram_api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                default_message = """üß™ <b>KI·ªÇM TRA K·∫æT N·ªêI TELEGRAM</b>

‚úÖ Bot giao d·ªãch ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram!

<b>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng b√°o sau:</b>
‚Ä¢ üí∞ Th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n
‚Ä¢ üìä V·ªã th·∫ø ƒëang m·ªü/ƒë√≥ng
‚Ä¢ ü§ñ Tr·∫°ng th√°i bot (ch·∫°y/d·ª´ng)
‚Ä¢ üìà Ph√¢n t√≠ch th·ªã tr∆∞·ªùng
‚Ä¢ ‚öôÔ∏è Thay ƒë·ªïi c·∫•u h√¨nh
‚Ä¢ üìë B√°o c√°o l√£i/l·ªó ƒë·ªãnh k·ª≥

‚è∞ """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                payload = {
                    'chat_id': chat_id,
                    'text': message or default_message,
                    'parse_mode': 'HTML'
                }
                response = requests.post(telegram_api_url, json=payload, timeout=10)
                
                if response.status_code == 200:
                    logger.info(f"[Fallback] ƒê√£ g·ª≠i tin nh·∫Øn test ƒë·∫øn Telegram chat ID: {chat_id}")
                    return jsonify({'success': True, 'message': 'ƒê√£ g·ª≠i tin nh·∫Øn test th√†nh c√¥ng'})
                else:
                    logger.error(f"L·ªói g·ª≠i tin nh·∫Øn Telegram: {response.text}")
                    return jsonify({
                        'success': False, 
                        'message': f'L·ªói Telegram API: {response.status_code} - {response.text}'
                    }), 400
            except Exception as req_error:
                logger.error(f"L·ªói k·∫øt n·ªëi Telegram (fallback): {str(req_error)}")
                return jsonify({
                    'success': False, 
                    'message': f'L·ªói k·∫øt n·ªëi Telegram: {str(req_error)}'
                }), 500
        
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra Telegram: {str(e)}")
        return jsonify({'success': False, 'message': f"L·ªói: {str(e)}"}), 500

def register_blueprint(app):
    """ƒêƒÉng k√Ω blueprint v·ªõi ·ª©ng d·ª•ng Flask"""
    app.register_blueprint(config_bp)
    logger.info("ƒê√£ ƒëƒÉng k√Ω blueprint cho c·∫•u h√¨nh")