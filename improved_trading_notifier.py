#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module cung c·∫•p ch·ª©c nƒÉng th√¥ng b√°o giao d·ªãch v·ªõi nhi·ªÅu th√¥ng tin chi ti·∫øt
H·ªó tr·ª£ th√¥ng b√°o qua Telegram v·ªõi c√°c lo·∫°i th√¥ng b√°o kh√°c nhau
Cung c·∫•p ph√¢n t√≠ch th·ªã tr∆∞·ªùng, t√≠n hi·ªáu giao d·ªãch, v√† tr·∫°ng th√°i v·ªã th·∫ø
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Union, Optional, Any
import traceback

# Import telegram notifier
try:
    from telegram_notifier import TelegramNotifier
except ImportError:
    pass

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger("improved_trading_notifier")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("trading_notifications.log"),
        logging.StreamHandler()
    ]
)

class ImprovedTradingNotifier:
    """
    L·ªõp cung c·∫•p th√¥ng b√°o giao d·ªãch chi ti·∫øt
    """
    
    def __init__(self, use_telegram: bool = True):
        """
        Kh·ªüi t·∫°o trading notifier
        
        Args:
            use_telegram: C√≥ s·ª≠ d·ª•ng Telegram kh√¥ng
        """
        self.use_telegram = use_telegram
        self.telegram = None
        
        # Kh·ªüi t·∫°o Telegram notifier n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if self.use_telegram:
            try:
                self.telegram = TelegramNotifier()
                logger.info("ƒê√£ kh·ªüi t·∫°o Telegram notifier")
            except Exception as e:
                logger.error(f"L·ªói khi kh·ªüi t·∫°o Telegram notifier: {str(e)}")
                self.use_telegram = False
        
        # File log th√¥ng b√°o
        self.log_file = "trading_notifications.log"
        
        # ƒê·∫£m b·∫£o file log t·ªìn t·∫°i
        if not os.path.exists(os.path.dirname(self.log_file)) and os.path.dirname(self.log_file):
            os.makedirs(os.path.dirname(self.log_file), exist_ok=True)
    
    def _log_notification(self, message: str):
        """
        Ghi log th√¥ng b√°o
        
        Args:
            message: N·ªôi dung th√¥ng b√°o
        """
        with open(self.log_file, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"[{timestamp}] {message}\n")
    
    def send_market_analysis(self, symbol: str, analysis: Dict[str, Any]):
        """
        G·ª≠i th√¥ng b√°o ph√¢n t√≠ch th·ªã tr∆∞·ªùng
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            analysis: K·∫øt qu·∫£ ph√¢n t√≠ch
        """
        # T·∫°o n·ªôi dung th√¥ng b√°o
        signal = analysis.get("signal", "KH√îNG X√ÅC ƒê·ªäNH")
        score = analysis.get("score", 0)
        timeframe = analysis.get("timeframe", "1h")
        price = analysis.get("price", 0)
        
        # X√°c ƒë·ªãnh emoji d·ª±a tr√™n t√≠n hi·ªáu
        emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "‚ö™"
        
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = (
            f"{emoji} PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG {symbol} ({timeframe})\n\n"
            f"‚Ä¢ T√≠n hi·ªáu: {signal}\n"
            f"‚Ä¢ ƒê·ªô tin c·∫≠y: {score:.2f}%\n"
            f"‚Ä¢ Gi√° hi·ªán t·∫°i: {price:.2f} USDT\n"
        )
        
        # Th√™m th√¥ng tin v·ªÅ h·ªó tr·ª£/kh√°ng c·ª± n·∫øu c√≥
        support_resistance = analysis.get("support_resistance", [])
        if support_resistance:
            supports = [sr.get("value", 0) for sr in support_resistance if sr.get("type", "").lower() == "support"]
            resistances = [sr.get("value", 0) for sr in support_resistance if sr.get("type", "").lower() == "resistance"]
            
            if supports:
                message += f"‚Ä¢ H·ªó tr·ª£ g·∫ßn nh·∫•t: {min(supports):.2f}\n"
            
            if resistances:
                message += f"‚Ä¢ Kh√°ng c·ª± g·∫ßn nh·∫•t: {max(resistances):.2f}\n"
        
        # Th√™m th√¥ng tin ch·ªâ b√°o k·ªπ thu·∫≠t
        indicators = analysis.get("indicators", {})
        if indicators:
            message += "\nüìä CH·ªà B√ÅO K·ª∏ THU·∫¨T:\n"
            
            # C√°c ch·ªâ b√°o ph·ªï bi·∫øn
            for indicator_name, indicator_data in indicators.items():
                if isinstance(indicator_data, dict):
                    indicator_signal = indicator_data.get("signal", "KH√îNG X√ÅC ƒê·ªäNH")
                    indicator_value = indicator_data.get("value", 0)
                    
                    indicator_emoji = "üü¢" if indicator_signal == "BUY" else "üî¥" if indicator_signal == "SELL" else "‚ö™"
                    message += f"{indicator_emoji} {indicator_name}: {indicator_value:.2f} ({indicator_signal})\n"
        
        # Th√™m g·ª£i √Ω giao d·ªãch
        if score >= 70:
            if signal == "BUY":
                message += "\nüí° G·ª¢I √ù: Xem x√©t m·ªü v·ªã th·∫ø LONG v·ªõi SL d∆∞·ªõi m·ª©c h·ªó tr·ª£ g·∫ßn nh·∫•t\n"
            elif signal == "SELL":
                message += "\nüí° G·ª¢I √ù: Xem x√©t m·ªü v·ªã th·∫ø SHORT v·ªõi SL tr√™n m·ª©c kh√°ng c·ª± g·∫ßn nh·∫•t\n"
        else:
            message += "\nüí° G·ª¢I √ù: Theo d√µi th√™m v√† ch·ªù t√≠n hi·ªáu m·∫°nh h∆°n\n"
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log ph√¢n t√≠ch th·ªã tr∆∞·ªùng {symbol}")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i ph√¢n t√≠ch th·ªã tr∆∞·ªùng {symbol} qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i ph√¢n t√≠ch th·ªã tr∆∞·ªùng qua Telegram: {str(e)}")
    
    def send_trade_entry(self, symbol: str, side: str, entry_price: float, 
                         quantity: float, stop_loss: float, take_profit: float, 
                         analysis: Dict[str, Any] = None):
        """
        G·ª≠i th√¥ng b√°o m·ªü v·ªã th·∫ø
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            side: H∆∞·ªõng giao d·ªãch (BUY/SELL)
            entry_price: Gi√° v√†o l·ªánh
            quantity: S·ªë l∆∞·ª£ng
            stop_loss: Gi√° stop loss
            take_profit: Gi√° take profit
            analysis: K·∫øt qu·∫£ ph√¢n t√≠ch (n·∫øu c√≥)
        """
        # ƒê·ªãnh d·∫°ng h∆∞·ªõng giao d·ªãch
        direction = "LONG" if side == "BUY" else "SHORT" if side == "SELL" else side
        emoji = "üü¢" if direction == "LONG" else "üî¥" if direction == "SHORT" else "‚ö™"
        
        # T√≠nh to√°n % SL v√† TP
        sl_percent = abs((stop_loss - entry_price) / entry_price * 100)
        tp_percent = abs((take_profit - entry_price) / entry_price * 100)
        
        # D·ª± ƒëo√°n k·∫øt qu·∫£ l√£i/l·ªó ti·ªÅm nƒÉng
        potential_loss = abs(entry_price - stop_loss) * quantity
        potential_profit = abs(take_profit - entry_price) * quantity
        risk_reward_ratio = potential_profit / potential_loss if potential_loss != 0 else 0
        
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = (
            f"{emoji} ƒê√É M·ªû V·ªä TH·∫æ {direction} - {symbol}\n\n"
            f"‚Ä¢ Gi√° v√†o l·ªánh: {entry_price:.2f} USDT\n"
            f"‚Ä¢ Kh·ªëi l∆∞·ª£ng: {quantity:.4f} ({quantity * entry_price:.2f} USDT)\n"
            f"‚Ä¢ Stop Loss: {stop_loss:.2f} USDT ({sl_percent:.2f}%)\n"
            f"‚Ä¢ Take Profit: {take_profit:.2f} USDT ({tp_percent:.2f}%)\n"
            f"‚Ä¢ T·ª∑ l·ªá l√£i/l·ªó: {risk_reward_ratio:.2f} (RR)\n"
            f"‚Ä¢ L·ªó t·ªëi ƒëa: {potential_loss:.2f} USDT\n"
            f"‚Ä¢ L√£i ti·ªÅm nƒÉng: {potential_profit:.2f} USDT\n"
        )
        
        # Th√™m th√¥ng tin ph√¢n t√≠ch n·∫øu c√≥
        if analysis:
            score = analysis.get("score", 0)
            timeframe = analysis.get("timeframe", "1h")
            
            message += (
                f"\nüìä PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG:\n"
                f"‚Ä¢ Khung th·ªùi gian: {timeframe}\n"
                f"‚Ä¢ ƒêi·ªÉm t√≠n hi·ªáu: {score:.2f}%\n"
            )
            
            # Th√™m th√¥ng tin ch·ªâ b√°o
            indicators = analysis.get("indicators", {})
            if indicators:
                message += "‚Ä¢ Ch·ªâ b√°o h·ªó tr·ª£:\n"
                for name, data in list(indicators.items())[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 ch·ªâ b√°o h√†ng ƒë·∫ßu
                    if isinstance(data, dict) and data.get("signal") == side:
                        message += f"  ‚úì {name}\n"
        
        # Th√™m g·ª£i √Ω qu·∫£n l√Ω v·ªã th·∫ø
        message += (
            f"\nüí° G·ª¢I √ù QU·∫¢N L√ù V·ªä TH·∫æ:\n"
            f"‚Ä¢ Theo d√µi v√πng {stop_loss:.2f} ƒë·ªÉ k√≠ch ho·∫°t SL n·∫øu c·∫ßn\n"
            f"‚Ä¢ C√¢n nh·∫Øc di chuy·ªÉn SL v·ªÅ h√≤a v·ªën khi gi√° ƒë·∫°t {(entry_price + (take_profit - entry_price) * 0.3):.2f}\n"
            f"‚Ä¢ C√≥ th·ªÉ ch·ªët m·ªôt ph·∫ßn khi ƒë·∫°t {(entry_price + (take_profit - entry_price) * 0.5):.2f}\n"
        )
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log m·ªü v·ªã th·∫ø {direction} cho {symbol}")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o m·ªü v·ªã th·∫ø {direction} cho {symbol} qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o m·ªü v·ªã th·∫ø qua Telegram: {str(e)}")
    
    def send_trade_exit(self, symbol: str, side: str, entry_price: float, 
                        exit_price: float, quantity: float,
                        profit_loss: float, profit_loss_percent: float,
                        exit_reason: str = "L·ªánh ƒë√≥ng th·ªß c√¥ng"):
        """
        G·ª≠i th√¥ng b√°o ƒë√≥ng v·ªã th·∫ø
        
        Args:
            symbol: C·∫∑p giao d·ªãch
            side: H∆∞·ªõng giao d·ªãch (BUY/SELL)
            entry_price: Gi√° v√†o l·ªánh
            exit_price: Gi√° ƒë√≥ng l·ªánh
            quantity: S·ªë l∆∞·ª£ng
            profit_loss: L√£i/l·ªó (tuy·ªát ƒë·ªëi)
            profit_loss_percent: L√£i/l·ªó (%)
            exit_reason: L√Ω do ƒë√≥ng l·ªánh
        """
        # ƒê·ªãnh d·∫°ng h∆∞·ªõng giao d·ªãch
        direction = "LONG" if side == "BUY" else "SHORT" if side == "SELL" else side
        
        # X√°c ƒë·ªãnh emoji d·ª±a tr√™n l√£i/l·ªó
        if profit_loss > 0:
            emoji = "‚úÖ"
            result = "TH·∫ÆNG"
        else:
            emoji = "‚ùå"
            result = "THUA"
        
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = (
            f"{emoji} ƒê√É ƒê√ìNG V·ªä TH·∫æ {direction} - {symbol} ({result})\n\n"
            f"‚Ä¢ Gi√° v√†o l·ªánh: {entry_price:.2f} USDT\n"
            f"‚Ä¢ Gi√° ƒë√≥ng l·ªánh: {exit_price:.2f} USDT\n"
            f"‚Ä¢ Kh·ªëi l∆∞·ª£ng: {quantity:.4f} ({quantity * entry_price:.2f} USDT)\n"
            f"‚Ä¢ K·∫øt qu·∫£: {profit_loss_percent:+.2f}% ({profit_loss:+.2f} USDT)\n"
            f"‚Ä¢ L√Ω do ƒë√≥ng: {exit_reason}\n"
        )
        
        # Th√™m t·ªïng k·∫øt
        message += (
            f"\nüìä T·ªîNG K·∫æT:\n"
            f"‚Ä¢ T·ªïng v·ªën giao d·ªãch: {quantity * entry_price:.2f} USDT\n"
            f"‚Ä¢ Gi√° tr·ªã ho√†n tr·∫£: {quantity * exit_price:.2f} USDT\n"
            f"‚Ä¢ L√£i/l·ªó: {profit_loss:+.2f} USDT ({profit_loss_percent:+.2f}%)\n"
        )
        
        # Th√™m g·ª£i √Ω cho l·∫ßn giao d·ªãch ti·∫øp theo
        if profit_loss > 0:
            message += (
                f"\nüí° G·ª¢I √ù CHO L·∫¶N SAU:\n"
                f"‚Ä¢ Gi·ªØ ph∆∞∆°ng ph√°p giao d·ªãch hi·ªán t·∫°i\n"
                f"‚Ä¢ Xem x√©t tƒÉng k√≠ch th∆∞·ªõc v·ªã th·∫ø n·∫øu c√°c ƒëi·ªÅu ki·ªán t∆∞∆°ng t·ª±\n"
            )
        else:
            message += (
                f"\nüí° G·ª¢I √ù CHO L·∫¶N SAU:\n"
                f"‚Ä¢ Xem x√©t ƒëi·ªÅu ch·ªânh ƒëi·ªÉm v√†o l·ªánh ho·∫∑c SL\n"
                f"‚Ä¢ C√≥ th·ªÉ gi·∫£m k√≠ch th∆∞·ªõc v·ªã th·∫ø ƒë·ªÉ qu·∫£n l√Ω r·ªßi ro t·ªët h∆°n\n"
            )
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log ƒë√≥ng v·ªã th·∫ø {direction} cho {symbol}, PL: {profit_loss:+.2f} USDT")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o ƒë√≥ng v·ªã th·∫ø {direction} cho {symbol} qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ƒë√≥ng v·ªã th·∫ø qua Telegram: {str(e)}")
    
    def send_trading_error(self, error_info: Dict[str, Any]):
        """
        G·ª≠i th√¥ng b√°o l·ªói giao d·ªãch
        
        Args:
            error_info: Th√¥ng tin l·ªói
        """
        # Tr√≠ch xu·∫•t th√¥ng tin l·ªói
        error_code = error_info.get("error_code", "UNKNOWN")
        error_message = error_info.get("error_message", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        description = error_info.get("description", "")
        solution = error_info.get("solution", "")
        context = error_info.get("context", {})
        
        # Tr√≠ch xu·∫•t th√¥ng tin giao d·ªãch t·ª´ ng·ªØ c·∫£nh
        symbol = context.get("symbol", "N/A")
        side = context.get("side", "N/A")
        
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = (
            f"‚ö†Ô∏è L·ªñI KHI GIAO D·ªäCH {symbol}\n\n"
            f"‚Ä¢ M√£ l·ªói: {error_code}\n"
            f"‚Ä¢ Th√¥ng b√°o: {error_message[:100]}...\n"
            f"‚Ä¢ M√¥ t·∫£: {description}\n"
            f"‚Ä¢ Gi·∫£i ph√°p: {solution}\n"
        )
        
        # Th√™m th√¥ng tin giao d·ªãch n·∫øu c√≥
        if symbol != "N/A" and side != "N/A":
            direction = "LONG" if side == "BUY" else "SHORT" if side == "SELL" else side
            message += (
                f"\nüìä CHI TI·∫æT GIAO D·ªäCH L·ªñI:\n"
                f"‚Ä¢ C·∫∑p giao d·ªãch: {symbol}\n"
                f"‚Ä¢ H∆∞·ªõng: {direction}\n"
            )
            
            # Th√™m c√°c th√¥ng tin kh√°c n·∫øu c√≥
            for key, value in context.items():
                if key not in ["symbol", "side"] and value is not None:
                    message += f"‚Ä¢ {key}: {value}\n"
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log l·ªói giao d·ªãch: {error_code}")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o l·ªói giao d·ªãch qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o l·ªói giao d·ªãch qua Telegram: {str(e)}")
    
    def send_account_status(self, account_info: Dict[str, Any], positions: List[Dict[str, Any]] = None):
        """
        G·ª≠i th√¥ng b√°o tr·∫°ng th√°i t√†i kho·∫£n
        
        Args:
            account_info: Th√¥ng tin t√†i kho·∫£n
            positions: Danh s√°ch v·ªã th·∫ø hi·ªán t·∫°i
        """
        # Tr√≠ch xu·∫•t th√¥ng tin t√†i kho·∫£n
        total_balance = account_info.get("total_balance", 0)
        available_balance = account_info.get("available_balance", 0)
        unrealized_pnl = account_info.get("unrealized_pnl", 0)
        margin_balance = account_info.get("margin_balance", 0)
        
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = (
            f"üìä TR·∫†NG TH√ÅI T√ÄI KHO·∫¢N\n\n"
            f"‚Ä¢ T·ªïng s·ªë d∆∞: {total_balance:.2f} USDT\n"
            f"‚Ä¢ S·ªë d∆∞ kh·∫£ d·ª•ng: {available_balance:.2f} USDT\n"
            f"‚Ä¢ L·ª£i nhu·∫≠n ch∆∞a th·ª±c hi·ªán: {unrealized_pnl:+.2f} USDT\n"
            f"‚Ä¢ Margin balance: {margin_balance:.2f} USDT\n"
        )
        
        # Th√™m th√¥ng tin v·ªã th·∫ø n·∫øu c√≥
        if positions and len(positions) > 0:
            message += "\nüìà V·ªä TH·∫æ HI·ªÜN T·∫†I:\n"
            
            for i, position in enumerate(positions, 1):
                symbol = position.get("symbol", "N/A")
                side = position.get("side", "N/A")
                entry_price = position.get("entry_price", 0)
                current_price = position.get("current_price", 0)
                quantity = position.get("quantity", 0)
                pnl = position.get("pnl", 0)
                pnl_percent = position.get("pnl_percent", 0)
                
                direction = "LONG" if side == "BUY" else "SHORT" if side == "SELL" else side
                emoji = "üü¢" if direction == "LONG" else "üî¥" if direction == "SHORT" else "‚ö™"
                
                message += (
                    f"{emoji} {i}. {symbol} ({direction}):\n"
                    f"   Gi√° v√†o: {entry_price:.2f}, Gi√° hi·ªán t·∫°i: {current_price:.2f}\n"
                    f"   Kh·ªëi l∆∞·ª£ng: {quantity:.4f}, P/L: {pnl:+.2f} USDT ({pnl_percent:+.2f}%)\n"
                )
        else:
            message += "\nüìà V·ªä TH·∫æ HI·ªÜN T·∫†I: Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü\n"
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log tr·∫°ng th√°i t√†i kho·∫£n")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o tr·∫°ng th√°i t√†i kho·∫£n qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o tr·∫°ng th√°i t√†i kho·∫£n qua Telegram: {str(e)}")
    
    def send_system_status(self, services_status: Dict[str, bool], system_info: Dict[str, Any] = None):
        """
        G·ª≠i th√¥ng b√°o tr·∫°ng th√°i h·ªá th·ªëng
        
        Args:
            services_status: Tr·∫°ng th√°i c√°c d·ªãch v·ª•
            system_info: Th√¥ng tin h·ªá th·ªëng (n·∫øu c√≥)
        """
        # T·∫°o th√¥ng b√°o chi ti·∫øt
        message = f"üñ•Ô∏è TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG\n\n"
        
        # Th√™m th√¥ng tin d·ªãch v·ª•
        message += "üìã D·ªäCH V·ª§:\n"
        for service_name, is_running in services_status.items():
            status_emoji = "‚úÖ" if is_running else "‚ùå"
            status_text = "ƒêang ch·∫°y" if is_running else "ƒê√£ d·ª´ng"
            message += f"{status_emoji} {service_name}: {status_text}\n"
        
        # Th√™m th√¥ng tin h·ªá th·ªëng n·∫øu c√≥
        if system_info:
            message += "\nüíª TH√îNG TIN H·ªÜ TH·ªêNG:\n"
            
            # Th√¥ng tin CPU/RAM
            cpu_usage = system_info.get("cpu_usage", 0)
            memory_usage = system_info.get("memory_usage", 0)
            message += f"‚Ä¢ CPU: {cpu_usage:.1f}%\n"
            message += f"‚Ä¢ RAM: {memory_usage:.1f}%\n"
            
            # Th√¥ng tin th·ªùi gian ho·∫°t ƒë·ªông
            uptime = system_info.get("uptime", "N/A")
            if uptime != "N/A":
                message += f"‚Ä¢ Th·ªùi gian ho·∫°t ƒë·ªông: {uptime}\n"
            
            # Th√¥ng tin l·ªói
            error_count = system_info.get("error_count", 0)
            message += f"‚Ä¢ S·ªë l·ªói g·∫ßn ƒë√¢y: {error_count}\n"
            
            # Hi·ªáu su·∫•t giao d·ªãch
            trade_count = system_info.get("trade_count", 0)
            win_rate = system_info.get("win_rate", 0)
            if trade_count > 0:
                message += f"‚Ä¢ S·ªë l·ªánh giao d·ªãch: {trade_count}\n"
                message += f"‚Ä¢ T·ª∑ l·ªá th·∫Øng: {win_rate:.1f}%\n"
        
        # Th√™m th·ªùi gian
        message += f"\n‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # G·ª≠i th√¥ng b√°o
        self._log_notification(message)
        logger.info(f"ƒê√£ ghi log tr·∫°ng th√°i h·ªá th·ªëng")
        
        if self.use_telegram and self.telegram:
            try:
                self.telegram.send_message(message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o tr·∫°ng th√°i h·ªá th·ªëng qua Telegram")
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o tr·∫°ng th√°i h·ªá th·ªëng qua Telegram: {str(e)}")


# Singleton instance
_notifier_instance = None

def get_trading_notifier() -> ImprovedTradingNotifier:
    """L·∫•y singleton instance c·ªßa ImprovedTradingNotifier"""
    global _notifier_instance
    if _notifier_instance is None:
        _notifier_instance = ImprovedTradingNotifier()
    return _notifier_instance


if __name__ == "__main__":
    # Test th√¥ng b√°o
    notifier = ImprovedTradingNotifier()
    
    # Test th√¥ng b√°o ph√¢n t√≠ch th·ªã tr∆∞·ªùng
    notifier.send_market_analysis("BTCUSDT", {
        "signal": "BUY",
        "score": 75.5,
        "timeframe": "1h",
        "price": 65000.0,
        "support_resistance": [
            {"type": "support", "value": 64000.0},
            {"type": "resistance", "value": 66000.0}
        ],
        "indicators": {
            "RSI": {"signal": "BUY", "value": 42.5},
            "MACD": {"signal": "BUY", "value": 100.5},
            "Bollinger": {"signal": "NEUTRAL", "value": 0}
        }
    })
    
    print("ƒê√£ g·ª≠i th√¥ng b√°o test")