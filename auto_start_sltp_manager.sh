#!/bin/bash
# Script kh·ªüi ƒë·ªông d·ªãch v·ª• Auto SLTP Manager

LOG_FILE="auto_sltp_manager.log"
PID_FILE="auto_sltp_manager.pid"
PYTHON_SCRIPT="auto_sltp_manager.py"

# Ghi log
log() {
    echo "[$(date)] $1" >> $LOG_FILE
    echo "$1"
}

# Ki·ªÉm tra xem d·ªãch v·ª• ƒë√£ ch·∫°y ch∆∞a
if pgrep -f "python $PYTHON_SCRIPT" > /dev/null; then
    existing_pid=$(pgrep -f "python $PYTHON_SCRIPT")
    log "‚ö†Ô∏è D·ªãch v·ª• Auto SLTP Manager ƒë√£ ƒëang ch·∫°y v·ªõi PID $existing_pid"
    read -p "B·∫°n c√≥ mu·ªën d·ª´ng v√† kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• kh√¥ng? (y/n): " restart
    if [ "$restart" != "y" ]; then
        log "‚ùå H·ªßy b·ªè kh·ªüi ƒë·ªông Auto SLTP Manager"
        exit 1
    fi
    
    log "üîÑ D·ª´ng d·ªãch v·ª• Auto SLTP Manager hi·ªán t·∫°i (PID: $existing_pid)..."
    kill $existing_pid
    sleep 2
    
    # Ki·ªÉm tra l·∫°i
    if pgrep -f "python $PYTHON_SCRIPT" > /dev/null; then
        log "‚ö†Ô∏è Kh√¥ng th·ªÉ d·ª´ng d·ªãch v·ª•. Th·ª≠ bu·ªôc d·ª´ng..."
        kill -9 $existing_pid
        sleep 1
    fi
fi

# Ki·ªÉm tra file Python
if [ ! -f "$PYTHON_SCRIPT" ]; then
    log "‚ùå Kh√¥ng t√¨m th·∫•y file $PYTHON_SCRIPT"
    exit 1
fi

# Ki·ªÉm tra k·∫øt n·ªëi Binance API
log "üîç Ki·ªÉm tra k·∫øt n·ªëi Binance API..."
API_TEST=$(python -c "
import requests
try:
    response = requests.get('https://testnet.binancefuture.com/fapi/v1/ping')
    if response.status_code == 200:
        print('success')
    else:
        print('fail')
except Exception as e:
    print('fail')
")

if [ "$API_TEST" != "success" ]; then
    log "‚ùå Ki·ªÉm tra k·∫øt n·ªëi Binance API th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† API."
    exit 1
else
    log "‚úÖ K·∫øt n·ªëi Binance API OK"
fi

# Kh·ªüi ƒë·ªông d·ªãch v·ª•
log "üöÄ ƒêang kh·ªüi ƒë·ªông d·ªãch v·ª• Auto SLTP Manager..."
nohup python $PYTHON_SCRIPT > /dev/null 2>> $LOG_FILE &
new_pid=$!

# L∆∞u PID
echo $new_pid > $PID_FILE
log "‚úÖ D·ªãch v·ª• Auto SLTP Manager ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v·ªõi PID $new_pid"

# Ki·ªÉm tra sau khi kh·ªüi ƒë·ªông
sleep 2
if pgrep -f "python $PYTHON_SCRIPT" > /dev/null; then
    log "‚úÖ D·ªãch v·ª• Auto SLTP Manager ƒëang ch·∫°y b√¨nh th∆∞·ªùng"
    
    # Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i
    echo "TH√îNG TIN C·∫§U H√åNH:"
    python -c "
import json
try:
    with open('account_config.json', 'r') as f:
        config = json.load(f)
    print(f\"  Ch·∫ø ƒë·ªô giao d·ªãch: {config.get('trading_mode', 'N/A')}\")
    print(f\"  Stop Loss m·∫∑c ƒë·ªãnh: {config.get('default_stop_loss_percent', 'N/A')}%\")
    print(f\"  Take Profit m·∫∑c ƒë·ªãnh: {config.get('default_take_profit_percent', 'N/A')}%\")
    print(f\"  Ch·∫ø ƒë·ªô ƒë√≤n b·∫©y: {config.get('leverage_mode', 'N/A')}\")
    print(f\"  ƒê√≤n b·∫©y m·∫∑c ƒë·ªãnh: {config.get('default_leverage', 'N/A')}x\")
except Exception as e:
    print(f'  L·ªói khi ƒë·ªçc c·∫•u h√¨nh t√†i kho·∫£n: {e}')
"
else
    log "‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông d·ªãch v·ª• Auto SLTP Manager"
    exit 1
fi

# Hi·ªÉn th·ªã v·ªã th·∫ø hi·ªán t·∫°i
echo
echo "V·ªä TH·∫æ ƒêANG M·ªû:"
python -c "
import json
try:
    with open('active_positions.json', 'r') as f:
        positions = json.load(f)
    if positions:
        for symbol, pos in positions.items():
            print(f\"  {symbol}: {pos.get('side')} @ {pos.get('entry_price', 0):.2f}\")
            print(f\"     SL: {pos.get('stop_loss', 'N/A'):.2f}, TP: {pos.get('take_profit', 'N/A'):.2f}\")
    else:
        print('  Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü')
except Exception as e:
    print(f'  L·ªói khi ƒë·ªçc v·ªã th·∫ø: {e}')
"

# Th√¥ng b√°o theo d√µi log
echo
echo "üìù ƒê·ªÉ theo d√µi log, s·ª≠ d·ª•ng l·ªánh:"
echo "tail -f $LOG_FILE"