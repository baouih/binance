#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module ph√¢n t√≠ch c·∫£m x√∫c th·ªã tr∆∞·ªùng (Market Sentiment Analyzer)

Module n√†y ph√¢n t√≠ch c·∫£m x√∫c th·ªã tr∆∞·ªùng d·ª±a tr√™n nhi·ªÅu ngu·ªìn d·ªØ li·ªáu v√†
ch·ªâ s·ªë k·ªπ thu·∫≠t, t·∫°o ra m·ªôt ch·ªâ s·ªë c·∫£m x√∫c t·ªïng h·ª£p v√† bi·ªÉu th·ªã tr·ª±c quan
b·∫±ng emoji.
"""

import os
import json
import logging
import math
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any, Union

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MarketSentimentAnalyzer:
    """L·ªõp ph√¢n t√≠ch c·∫£m x√∫c th·ªã tr∆∞·ªùng"""
    
    # ƒê·ªãnh nghƒ©a c√°c m·ª©c c·∫£m x√∫c th·ªã tr∆∞·ªùng v√† emoji t∆∞∆°ng ·ª©ng
    SENTIMENT_LEVELS = {
        'extremely_bearish': {'emoji': 'üß∏', 'color': '#e74c3c', 'description': 'C·ª±c k·ª≥ ti√™u c·ª±c'},
        'bearish': {'emoji': 'üêª', 'color': '#e67e22', 'description': 'Ti√™u c·ª±c'},
        'slightly_bearish': {'emoji': 'üòü', 'color': '#f1c40f', 'description': 'H∆°i ti√™u c·ª±c'},
        'neutral': {'emoji': 'üòê', 'color': '#95a5a6', 'description': 'Trung t√≠nh'},
        'slightly_bullish': {'emoji': 'üôÇ', 'color': '#3498db', 'description': 'H∆°i t√≠ch c·ª±c'},
        'bullish': {'emoji': 'üêÇ', 'color': '#2ecc71', 'description': 'T√≠ch c·ª±c'},
        'extremely_bullish': {'emoji': 'üöÄ', 'color': '#27ae60', 'description': 'C·ª±c k·ª≥ t√≠ch c·ª±c'}
    }
    
    # ƒê∆∞·ªùng d·∫´n l∆∞u d·ªØ li·ªáu c·∫£m x√∫c
    SENTIMENT_DATA_PATH = 'data/market_sentiment.json'
    
    def __init__(self, data_path: str = None):
        """
        Kh·ªüi t·∫°o tr√¨nh ph√¢n t√≠ch c·∫£m x√∫c th·ªã tr∆∞·ªùng
        
        Args:
            data_path (str, optional): ƒê∆∞·ªùng d·∫´n l∆∞u d·ªØ li·ªáu c·∫£m x√∫c
        """
        self.data_path = data_path or self.SENTIMENT_DATA_PATH
        self.sentiment_data = self._load_or_create_default()
        
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c ch·ª©a data_path t·ªìn t·∫°i
        os.makedirs(os.path.dirname(self.data_path), exist_ok=True)
        
        logger.info(f"ƒê√£ kh·ªüi t·∫°o MarketSentimentAnalyzer, s·ª≠ d·ª•ng file: {self.data_path}")
    
    def _load_or_create_default(self) -> Dict:
        """
        T·∫£i d·ªØ li·ªáu c·∫£m x√∫c ho·∫∑c t·∫°o m·ªõi n·∫øu kh√¥ng t·ªìn t·∫°i
        
        Returns:
            Dict: D·ªØ li·ªáu c·∫£m x√∫c
        """
        if os.path.exists(self.data_path):
            try:
                with open(self.data_path, 'r') as f:
                    data = json.load(f)
                logger.info(f"ƒê√£ t·∫£i d·ªØ li·ªáu c·∫£m x√∫c t·ª´ {self.data_path}")
                return data
            except Exception as e:
                logger.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu c·∫£m x√∫c: {e}")
        
        # T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        default_data = {
            "current_sentiment": {
                "level": "neutral",
                "score": 0.0,
                "components": {},
                "emoji": self.SENTIMENT_LEVELS["neutral"]["emoji"],
                "color": self.SENTIMENT_LEVELS["neutral"]["color"],
                "description": self.SENTIMENT_LEVELS["neutral"]["description"],
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            },
            "historical_data": [],
            "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "metadata": {
                "version": "1.0",
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
        }
        
        # L∆∞u d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        try:
            with open(self.data_path, 'w') as f:
                json.dump(default_data, f, indent=4)
            logger.info(f"ƒê√£ t·∫°o d·ªØ li·ªáu c·∫£m x√∫c m·∫∑c ƒë·ªãnh v√† l∆∞u v√†o {self.data_path}")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu c·∫£m x√∫c m·∫∑c ƒë·ªãnh: {e}")
        
        return default_data
    
    def _save_sentiment_data(self) -> bool:
        """
        L∆∞u d·ªØ li·ªáu c·∫£m x√∫c v√†o file
        
        Returns:
            bool: True n·∫øu l∆∞u th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        try:
            self.sentiment_data["last_updated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            with open(self.data_path, 'w') as f:
                json.dump(self.sentiment_data, f, indent=4)
            logger.info(f"ƒê√£ l∆∞u d·ªØ li·ªáu c·∫£m x√∫c v√†o {self.data_path}")
            return True
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu c·∫£m x√∫c: {e}")
            return False
    
    def analyze_technical_indicators(self, market_data: Dict) -> Dict:
        """
        Ph√¢n t√≠ch c·∫£m x√∫c th·ªã tr∆∞·ªùng d·ª±a tr√™n ch·ªâ b√°o k·ªπ thu·∫≠t
        
        Args:
            market_data (Dict): D·ªØ li·ªáu th·ªã tr∆∞·ªùng c·∫ßn ph√¢n t√≠ch
                {
                    'rsi': float,
                    'macd_histogram': float,
                    'ema_crossover': int, # 1: bullish, -1: bearish, 0: neutral
                    'bb_position': float, # 0-1, v·ªã tr√≠ gi√° trong d·∫£i Bollinger
                    'adx': float,
                    'volume_change': float,
                    'price_change_24h': float
                }
                
        Returns:
            Dict: K·∫øt qu·∫£ ph√¢n t√≠ch c·∫£m x√∫c
        """
        components = {}
        
        # Ph√¢n t√≠ch RSI (Relative Strength Index)
        if 'rsi' in market_data:
            rsi = market_data['rsi']
            if rsi < 30:
                components['rsi'] = {'score': -0.5 + (rsi - 20) / 20, 'description': f'RSI qu√° b√°n ({rsi:.1f})'}
            elif rsi > 70:
                components['rsi'] = {'score': 0.5 + (rsi - 70) / 60, 'description': f'RSI qu√° mua ({rsi:.1f})'}
            else:
                # Chu·∫©n h√≥a RSI t·ª´ 30-70 th√†nh -0.5 ƒë·∫øn 0.5
                components['rsi'] = {'score': (rsi - 50) / 40, 'description': f'RSI = {rsi:.1f}'}
        
        # Ph√¢n t√≠ch MACD
        if 'macd_histogram' in market_data:
            macd_hist = market_data['macd_histogram']
            # Chu·∫©n h√≥a MACD histogram
            macd_score = np.tanh(macd_hist * 2)  # Squish -1 to 1
            components['macd'] = {'score': macd_score, 'description': f'MACD Hist = {macd_hist:.4f}'}
        
        # Ph√¢n t√≠ch EMA Crossover
        if 'ema_crossover' in market_data:
            ema_cross = market_data['ema_crossover']
            if ema_cross == 1:
                components['ema'] = {'score': 0.7, 'description': 'EMA c·∫Øt l√™n (bullish)'}
            elif ema_cross == -1:
                components['ema'] = {'score': -0.7, 'description': 'EMA c·∫Øt xu·ªëng (bearish)'}
            else:
                components['ema'] = {'score': 0, 'description': 'EMA kh√¥ng c·∫Øt nhau'}
        
        # Ph√¢n t√≠ch Bollinger Bands
        if 'bb_position' in market_data:
            bb_pos = market_data['bb_position']
            # 0 = d∆∞·ªõi band d∆∞·ªõi, 0.5 = gi·ªØa, 1 = tr√™n band tr√™n
            bb_score = (bb_pos - 0.5) * 2  # Chuy·ªÉn th√†nh -1 ƒë·∫øn 1
            components['bollinger'] = {'score': bb_score, 'description': f'BB Position = {bb_pos:.2f}'}
        
        # Ph√¢n t√≠ch ADX (Trend Strength)
        if 'adx' in market_data:
            adx = market_data['adx']
            if adx > 25:
                # ADX cao = xu h∆∞·ªõng m·∫°nh, nh∆∞ng c·∫ßn bi·∫øt h∆∞·ªõng t·ª´ c√°c ch·ªâ b√°o kh√°c
                adx_contribution = (adx - 25) / 75  # 0 to 1 scaling
                components['adx'] = {'score': 0, 'description': f'ADX = {adx:.1f} (xu h∆∞·ªõng m·∫°nh)'}
            else:
                components['adx'] = {'score': 0, 'description': f'ADX = {adx:.1f} (kh√¥ng xu h∆∞·ªõng r√µ r√†ng)'}
        
        # Ph√¢n t√≠ch bi·∫øn ƒë·ªông kh·ªëi l∆∞·ª£ng
        if 'volume_change' in market_data:
            vol_change = market_data['volume_change']
            vol_score = np.tanh(vol_change / 50)  # Squish to -1 to 1
            components['volume'] = {'score': vol_score, 'description': f'Volume change = {vol_change:.1f}%'}
        
        # Ph√¢n t√≠ch bi·∫øn ƒë·ªông gi√° 24h
        if 'price_change_24h' in market_data:
            price_change = market_data['price_change_24h']
            price_score = np.tanh(price_change / 10)  # Squish to -1 to 1
            components['price_change'] = {'score': price_score, 'description': f'24h change = {price_change:.2f}%'}
        
        # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p
        weights = {
            'rsi': 0.2,
            'macd': 0.2, 
            'ema': 0.15,
            'bollinger': 0.1,
            'adx': 0.05,
            'volume': 0.1,
            'price_change': 0.2
        }
        
        total_score = 0
        total_weight = 0
        
        for component, details in components.items():
            component_weight = weights.get(component, 0.1)
            total_score += details['score'] * component_weight
            total_weight += component_weight
        
        # Chu·∫©n h√≥a l·∫°i n·∫øu kh√¥ng ƒë·ªß t·∫•t c·∫£ c√°c th√†nh ph·∫ßn
        if total_weight > 0:
            final_score = total_score / total_weight
        else:
            final_score = 0
        
        # Gi·ªõi h·∫°n ƒëi·ªÉm trong kho·∫£ng -1 ƒë·∫øn 1
        final_score = max(min(final_score, 1.0), -1.0)
        
        # X√°c ƒë·ªãnh m·ª©c c·∫£m x√∫c
        sentiment_level = self._determine_sentiment_level(final_score)
        
        # T·∫°o k·∫øt qu·∫£
        result = {
            'score': final_score,
            'level': sentiment_level,
            'components': components,
            'emoji': self.SENTIMENT_LEVELS[sentiment_level]['emoji'],
            'color': self.SENTIMENT_LEVELS[sentiment_level]['color'],
            'description': self.SENTIMENT_LEVELS[sentiment_level]['description'],
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        return result
    
    def _determine_sentiment_level(self, score: float) -> str:
        """
        X√°c ƒë·ªãnh m·ª©c c·∫£m x√∫c d·ª±a tr√™n ƒëi·ªÉm
        
        Args:
            score (float): ƒêi·ªÉm c·∫£m x√∫c (-1 ƒë·∫øn 1)
            
        Returns:
            str: M·ª©c c·∫£m x√∫c
        """
        if score < -0.75:
            return 'extremely_bearish'
        elif score < -0.35:
            return 'bearish'
        elif score < -0.1:
            return 'slightly_bearish'
        elif score < 0.1:
            return 'neutral'
        elif score < 0.35:
            return 'slightly_bullish'
        elif score < 0.75:
            return 'bullish'
        else:
            return 'extremely_bullish'
    
    def update_market_sentiment(self, market_data: Dict) -> Dict:
        """
        C·∫≠p nh·∫≠t c·∫£m x√∫c th·ªã tr∆∞·ªùng
        
        Args:
            market_data (Dict): D·ªØ li·ªáu th·ªã tr∆∞·ªùng
            
        Returns:
            Dict: C·∫£m x√∫c th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        """
        # Ph√¢n t√≠ch c·∫£m x√∫c t·ª´ ch·ªâ b√°o k·ªπ thu·∫≠t
        technical_sentiment = self.analyze_technical_indicators(market_data)
        
        # L∆∞u c·∫£m x√∫c hi·ªán t·∫°i
        current_sentiment = {
            'level': technical_sentiment['level'],
            'score': technical_sentiment['score'],
            'components': technical_sentiment['components'],
            'emoji': technical_sentiment['emoji'],
            'color': technical_sentiment['color'],
            'description': technical_sentiment['description'],
            'timestamp': technical_sentiment['timestamp']
        }
        
        # L∆∞u v√†o d·ªØ li·ªáu l·ªãch s·ª≠
        historical_entry = current_sentiment.copy()
        self.sentiment_data['historical_data'].append(historical_entry)
        
        # Gi·ªõi h·∫°n l·ªãch s·ª≠, ch·ªâ gi·ªØ 100 m·ª•c g·∫ßn nh·∫•t
        if len(self.sentiment_data['historical_data']) > 100:
            self.sentiment_data['historical_data'] = self.sentiment_data['historical_data'][-100:]
        
        # C·∫≠p nh·∫≠t c·∫£m x√∫c hi·ªán t·∫°i
        self.sentiment_data['current_sentiment'] = current_sentiment
        
        # L∆∞u d·ªØ li·ªáu
        self._save_sentiment_data()
        
        return current_sentiment
    
    def get_current_sentiment(self) -> Dict:
        """
        L·∫•y c·∫£m x√∫c th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        
        Returns:
            Dict: C·∫£m x√∫c th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        """
        return self.sentiment_data['current_sentiment']
    
    def get_sentiment_trend(self, lookback_hours: int = 24) -> Dict:
        """
        L·∫•y xu h∆∞·ªõng c·∫£m x√∫c th·ªã tr∆∞·ªùng
        
        Args:
            lookback_hours (int): S·ªë gi·ªù ƒë·ªÉ nh√¨n l·∫°i
            
        Returns:
            Dict: Xu h∆∞·ªõng c·∫£m x√∫c th·ªã tr∆∞·ªùng
        """
        # L·ªçc d·ªØ li·ªáu l·ªãch s·ª≠ trong kho·∫£ng th·ªùi gian
        lookback_time = datetime.now() - timedelta(hours=lookback_hours)
        historical_data = self.sentiment_data['historical_data']
        
        recent_sentiment = []
        for entry in reversed(historical_data):
            try:
                entry_time = datetime.strptime(entry['timestamp'], "%Y-%m-%d %H:%M:%S")
                if entry_time >= lookback_time:
                    recent_sentiment.append(entry)
                else:
                    break
            except Exception:
                continue
        
        # ƒê·∫£o ng∆∞·ª£c l·∫°i ƒë·ªÉ theo th·ª© t·ª± th·ªùi gian
        recent_sentiment.reverse()
        
        # T√≠nh to√°n s·ª± thay ƒë·ªïi
        if not recent_sentiment:
            change = 0
        elif len(recent_sentiment) == 1:
            change = 0
        else:
            first_score = recent_sentiment[0]['score']
            last_score = recent_sentiment[-1]['score']
            change = last_score - first_score
        
        # Ph√¢n lo·∫°i xu h∆∞·ªõng
        if change > 0.5:
            trend = "strong_positive"
            description = "C·∫£m x√∫c c·∫£i thi·ªán m·∫°nh"
            emoji = "üìà"
        elif change > 0.2:
            trend = "positive"
            description = "C·∫£m x√∫c c·∫£i thi·ªán"
            emoji = "‚¨ÜÔ∏è"
        elif change > -0.2:
            trend = "neutral"
            description = "C·∫£m x√∫c ·ªïn ƒë·ªãnh"
            emoji = "‚û°Ô∏è"
        elif change > -0.5:
            trend = "negative"
            description = "C·∫£m x√∫c x·∫•u ƒëi"
            emoji = "‚¨áÔ∏è"
        else:
            trend = "strong_negative"
            description = "C·∫£m x√∫c x·∫•u ƒëi m·∫°nh"
            emoji = "üìâ"
        
        return {
            'trend': trend,
            'change': change,
            'description': description,
            'emoji': emoji,
            'data_points': len(recent_sentiment),
            'start_sentiment': recent_sentiment[0] if recent_sentiment else None,
            'end_sentiment': recent_sentiment[-1] if recent_sentiment else None
        }
    
    def get_sentiment_widget_data(self) -> Dict:
        """
        L·∫•y d·ªØ li·ªáu cho widget c·∫£m x√∫c th·ªã tr∆∞·ªùng
        
        Returns:
            Dict: D·ªØ li·ªáu widget
        """
        current = self.get_current_sentiment()
        trend = self.get_sentiment_trend(24)
        
        sentiment_widget = {
            'current': {
                'level': current['level'],
                'score': current['score'],
                'emoji': current['emoji'],
                'color': current['color'],
                'description': current['description']
            },
            'trend': {
                'direction': trend['trend'],
                'emoji': trend['emoji'],
                'description': trend['description'],
                'change': trend['change']
            },
            'timestamp': current['timestamp'],
            'components': {name: details['description'] for name, details in current.get('components', {}).items()},
            'insights': self._generate_sentiment_insights(current, trend)
        }
        
        return sentiment_widget
    
    def _generate_sentiment_insights(self, current: Dict, trend: Dict) -> List[str]:
        """
        T·∫°o insights t·ª´ d·ªØ li·ªáu c·∫£m x√∫c
        
        Args:
            current (Dict): C·∫£m x√∫c hi·ªán t·∫°i
            trend (Dict): Xu h∆∞·ªõng c·∫£m x√∫c
            
        Returns:
            List[str]: Danh s√°ch insights
        """
        insights = []
        
        # T·∫°o insights d·ª±a tr√™n m·ª©c c·∫£m x√∫c hi·ªán t·∫°i
        if current['level'] in ['extremely_bullish', 'bullish']:
            insights.append("Th·ªã tr∆∞·ªùng ƒëang l·∫°c quan, th·∫≠n tr·ªçng v·ªõi FOMO (s·ª£ b·ªè l·ª°)")
        elif current['level'] in ['extremely_bearish', 'bearish']:
            insights.append("Th·ªã tr∆∞·ªùng ƒëang bi quan, c·∫©n th·∫≠n v·ªõi s·ª± ho·∫£ng lo·∫°n b√°n th√°o")
        
        # T·∫°o insights d·ª±a tr√™n xu h∆∞·ªõng
        if trend['trend'] == 'strong_positive' and current['level'] in ['slightly_bearish', 'bearish', 'extremely_bearish']:
            insights.append("Th·ªã tr∆∞·ªùng ƒëang c·∫£i thi·ªán m·∫°nh t·ª´ v√πng ti√™u c·ª±c, c√≥ th·ªÉ l√† d·∫•u hi·ªáu ƒë·∫£o chi·ªÅu")
        elif trend['trend'] == 'strong_negative' and current['level'] in ['slightly_bullish', 'bullish', 'extremely_bullish']:
            insights.append("Th·ªã tr∆∞·ªùng ƒëang x·∫•u ƒëi nhanh t·ª´ v√πng t√≠ch c·ª±c, c√¢n nh·∫Øc b·∫£o v·ªá l·ª£i nhu·∫≠n")
        
        # Insights t·ª´ c√°c components
        if 'components' in current:
            components = current.get('components', {})
            # RSI Insights
            if 'rsi' in components and components['rsi']['score'] < -0.4:
                insights.append("RSI cho th·∫•y th·ªã tr∆∞·ªùng qu√° b√°n, c√≥ th·ªÉ c√¢n nh·∫Øc mua v√†o")
            elif 'rsi' in components and components['rsi']['score'] > 0.4:
                insights.append("RSI cho th·∫•y th·ªã tr∆∞·ªùng qu√° mua, th·∫≠n tr·ªçng khi mua m·ªõi")
                
            # MACD Insights
            if 'macd' in components and 'ema' in components:
                if components['macd']['score'] > 0.3 and components['ema']['score'] > 0.3:
                    insights.append("MACD v√† EMA ƒë·ªÅu t√≠ch c·ª±c, x√°c nh·∫≠n xu h∆∞·ªõng tƒÉng")
                elif components['macd']['score'] < -0.3 and components['ema']['score'] < -0.3:
                    insights.append("MACD v√† EMA ƒë·ªÅu ti√™u c·ª±c, x√°c nh·∫≠n xu h∆∞·ªõng gi·∫£m")
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng insights
        if not insights:
            insights.append("Th·ªã tr∆∞·ªùng kh√¥ng c√≥ t√≠n hi·ªáu r√µ r√†ng, c√¢n nh·∫Øc chi·∫øn l∆∞·ª£c trung t√≠nh")
            
        return insights[:3]  # Ch·ªâ tr·∫£ v·ªÅ t·ªëi ƒëa 3 insights

def main():
    """H√†m ch√≠nh ƒë·ªÉ test v√† demo MarketSentimentAnalyzer"""
    sentiment_analyzer = MarketSentimentAnalyzer()
    
    # T·∫°o d·ªØ li·ªáu th·ªã tr∆∞·ªùng m·∫´u
    sample_market_data = {
        'rsi': 62.5,
        'macd_histogram': 0.0025,
        'ema_crossover': 1,  # Bullish
        'bb_position': 0.75,  # G·∫ßn band tr√™n
        'adx': 30.0,
        'volume_change': 15.0,
        'price_change_24h': 2.5
    }
    
    # C·∫≠p nh·∫≠t c·∫£m x√∫c th·ªã tr∆∞·ªùng
    sentiment = sentiment_analyzer.update_market_sentiment(sample_market_data)
    
    # In k·∫øt qu·∫£
    print("=== C·∫¢M X√öC TH·ªä TR∆Ø·ªúNG ===")
    print(f"M·ª©c: {sentiment['level']} ({sentiment['emoji']})")
    print(f"ƒêi·ªÉm: {sentiment['score']:.3f}")
    print(f"M√¥ t·∫£: {sentiment['description']}")
    print("\n=== CHI TI·∫æT TH√ÄNH PH·∫¶N ===")
    for component, details in sentiment['components'].items():
        print(f"{component}: {details['description']} (score: {details['score']:.3f})")
    
    # T·∫°o d·ªØ li·ªáu widget
    widget_data = sentiment_analyzer.get_sentiment_widget_data()
    print("\n=== D·ªÆ LI·ªÜU WIDGET ===")
    print(f"Hi·ªán t·∫°i: {widget_data['current']['emoji']} - {widget_data['current']['description']}")
    print(f"Xu h∆∞·ªõng: {widget_data['trend']['emoji']} - {widget_data['trend']['description']}")
    print("\nInsights:")
    for insight in widget_data['insights']:
        print(f"- {insight}")

if __name__ == "__main__":
    main()