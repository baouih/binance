#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script gi√°m s√°t gi√° li√™n t·ª•c v√† th√¥ng b√°o khi ph√°t hi·ªán v·∫•n ƒë·ªÅ v·ªõi gi√°.
"""

import time
import logging
import schedule
import threading
import json
from datetime import datetime
from typing import List, Dict, Any, Optional

# Import c√°c module c·∫ßn thi·∫øt
from price_validator import price_validator, get_verified_price
from prices_cache import update_prices, get_all_prices

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("price_monitor.log")
    ]
)
logger = logging.getLogger(__name__)

# Danh s√°ch symbols c·∫ßn gi√°m s√°t
TARGET_SYMBOLS = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "ADAUSDT",
    "DOGEUSDT", "LTCUSDT", "DOTUSDT", "XRPUSDT",
    "AVAXUSDT", "LINKUSDT", "ATOMUSDT"
]

class PriceMonitor:
    """
    L·ªõp gi√°m s√°t gi√° c·ªßa c√°c c·∫∑p ti·ªÅn v√† th√¥ng b√°o khi c√≥ v·∫•n ƒë·ªÅ.
    """
    
    def __init__(self, symbols: List[str], api=None, check_interval: int = 60):
        """
        Kh·ªüi t·∫°o PriceMonitor.
        
        Args:
            symbols (List[str]): Danh s√°ch c√°c symbols c·∫ßn gi√°m s√°t
            api: Instance c·ªßa BinanceAPI n·∫øu c√≥
            check_interval (int): Kho·∫£ng th·ªùi gian (gi√¢y) gi·ªØa c√°c l·∫ßn ki·ªÉm tra
        """
        self.symbols = symbols
        self.api = api
        self.check_interval = check_interval
        self.running = False
        self.monitor_thread = None
        self.price_history = {}  # L∆∞u l·ªãch s·ª≠ gi√° ƒë·ªÉ ph√°t hi·ªán bi·∫øn ƒë·ªông b·∫•t th∆∞·ªùng
        self.status = {
            'last_update': None,
            'reliable_symbols': [],
            'unreliable_symbols': [],
            'price_errors': {},
            'trading_enabled': True
        }
        
    def check_prices(self) -> Dict[str, Any]:
        """
        Ki·ªÉm tra gi√° c·ªßa t·∫•t c·∫£ c√°c symbols ƒëang gi√°m s√°t.
        
        Returns:
            Dict[str, Any]: Tr·∫°ng th√°i hi·ªán t·∫°i
        """
        reliable_symbols = []
        unreliable_symbols = []
        price_errors = {}
        prices = {}
        
        for symbol in self.symbols:
            try:
                price, is_reliable = get_verified_price(symbol, self.api)
                
                if price:
                    prices[symbol] = price
                    # C·∫≠p nh·∫≠t l·ªãch s·ª≠ gi√°
                    if symbol not in self.price_history:
                        self.price_history[symbol] = []
                    
                    self.price_history[symbol].append({
                        'timestamp': int(time.time()),
                        'price': price,
                        'is_reliable': is_reliable
                    })
                    
                    # Gi·ªØ l·ªãch s·ª≠ gi√° trong 24 gi·ªù
                    current_time = int(time.time())
                    self.price_history[symbol] = [
                        entry for entry in self.price_history[symbol]
                        if current_time - entry['timestamp'] <= 86400
                    ]
                    
                    if is_reliable:
                        reliable_symbols.append(symbol)
                    else:
                        unreliable_symbols.append(symbol)
                else:
                    price_errors[symbol] = "Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°"
                    unreliable_symbols.append(symbol)
                    
            except Exception as e:
                logger.error(f"L·ªói khi ki·ªÉm tra gi√° {symbol}: {str(e)}")
                price_errors[symbol] = str(e)
                unreliable_symbols.append(symbol)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        self.status = {
            'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'reliable_symbols': reliable_symbols,
            'unreliable_symbols': unreliable_symbols,
            'price_errors': price_errors,
            'trading_enabled': price_validator.trading_enabled
        }
        
        # Th√¥ng b√°o n·∫øu c√≥ nhi·ªÅu symbols kh√¥ng ƒë√°ng tin c·∫≠y
        if len(unreliable_symbols) > 0:
            logger.warning(f"C√≥ {len(unreliable_symbols)} symbols kh√¥ng ƒë√°ng tin c·∫≠y: {', '.join(unreliable_symbols)}")
            
            # G·ª≠i th√¥ng b√°o n·∫øu s·ªë symbols kh√¥ng ƒë√°ng tin c·∫≠y v∆∞·ª£t ng∆∞·ª°ng
            if len(unreliable_symbols) >= 3:
                self.send_alert(
                    f"‚ö†Ô∏è C·∫¢NH B√ÅO: {len(unreliable_symbols)}/{len(self.symbols)} symbols kh√¥ng ƒë√°ng tin c·∫≠y",
                    f"C√°c symbols kh√¥ng ƒë√°ng tin c·∫≠y: {', '.join(unreliable_symbols)}\n"
                    f"Giao d·ªãch t·ª± ƒë·ªông ƒë√£ {'' if price_validator.trading_enabled else 'b·ªã t·∫°m d·ª´ng'}."
                )
                
        return self.status
    
    def detect_price_anomalies(self) -> List[Dict[str, Any]]:
        """
        Ph√°t hi·ªán nh·ªØng bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng.
        
        Returns:
            List[Dict[str, Any]]: Danh s√°ch c√°c anomaly ph√°t hi·ªán ƒë∆∞·ª£c
        """
        anomalies = []
        
        for symbol, history in self.price_history.items():
            if len(history) < 3:  # C·∫ßn √≠t nh·∫•t 3 ƒëi·ªÉm d·ªØ li·ªáu
                continue
                
            # L·∫•y 3 gi√° g·∫ßn nh·∫•t
            recent_prices = sorted(history, key=lambda x: x['timestamp'], reverse=True)[:3]
            
            # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi·ªØa gi√° m·ªõi nh·∫•t v√† gi√° c≈© nh·∫•t trong 3 ƒëi·ªÉm
            if recent_prices[0]['price'] and recent_prices[2]['price']:
                price_change = abs(recent_prices[0]['price'] - recent_prices[2]['price']) / recent_prices[2]['price']
                
                # N·∫øu thay ƒë·ªïi l·ªõn h∆°n 3% trong th·ªùi gian ng·∫Øn, coi l√† b·∫•t th∆∞·ªùng
                if price_change > 0.03:
                    anomalies.append({
                        'symbol': symbol,
                        'timestamp': recent_prices[0]['timestamp'],
                        'current_price': recent_prices[0]['price'],
                        'previous_price': recent_prices[2]['price'],
                        'change_percent': price_change * 100,
                        'is_reliable': recent_prices[0]['is_reliable']
                    })
        
        # Th√¥ng b√°o n·∫øu ph√°t hi·ªán anomaly
        if anomalies:
            logger.warning(f"Ph√°t hi·ªán {len(anomalies)} bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng")
            
            # G·ª≠i th√¥ng b√°o
            message = "üîî Ph√°t hi·ªán bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng:\n\n"
            for anomaly in anomalies:
                message += f"‚Ä¢ {anomaly['symbol']}: {anomaly['change_percent']:.2f}% "
                message += f"({'tƒÉng' if anomaly['current_price'] > anomaly['previous_price'] else 'gi·∫£m'})\n"
                message += f"  {anomaly['previous_price']} ‚Üí {anomaly['current_price']}\n"
                
            self.send_alert("Bi·∫øn ƒë·ªông gi√° b·∫•t th∆∞·ªùng", message)
            
        return anomalies
    
    def send_alert(self, title: str, message: str) -> None:
        """
        G·ª≠i c·∫£nh b√°o.
        
        Args:
            title (str): Ti√™u ƒë·ªÅ th√¥ng b√°o
            message (str): N·ªôi dung th√¥ng b√°o
        """
        logger.critical(f"{title}: {message}")
        
        # TODO: T√≠ch h·ª£p v·ªõi Telegram ho·∫∑c Email ƒë·ªÉ g·ª≠i th√¥ng b√°o
        try:
            # Ghi ra file alerts.log
            with open("price_alerts.log", "a") as f:
                f.write(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {title}\n")
                f.write(f"{message}\n")
                f.write("-" * 50 + "\n")
        except Exception as e:
            logger.error(f"L·ªói khi ghi alert: {str(e)}")
    
    def save_status(self) -> None:
        """L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o file."""
        try:
            with open("price_monitor_status.json", "w") as f:
                json.dump(self.status, f, indent=2)
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u tr·∫°ng th√°i: {str(e)}")
    
    def monitor_job(self) -> None:
        """H√†m ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ gi√°m s√°t gi√°."""
        self.check_prices()
        self.detect_price_anomalies()
        self.save_status()
    
    def start(self) -> None:
        """B·∫Øt ƒë·∫ßu gi√°m s√°t gi√°."""
        if self.running:
            logger.warning("Price monitor ƒë√£ ƒëang ch·∫°y")
            return
            
        self.running = True
        logger.info(f"B·∫Øt ƒë·∫ßu gi√°m s√°t gi√° cho {len(self.symbols)} symbols")
        
        # Ch·∫°y ngay m·ªôt l·∫ßn
        self.monitor_job()
        
        # Thi·∫øt l·∫≠p l·ªãch tr√¨nh
        schedule.every(self.check_interval).seconds.do(self.monitor_job)
        
        # T·∫°o thread ƒë·ªÉ ch·∫°y l·ªãch tr√¨nh
        def run_scheduler():
            while self.running:
                schedule.run_pending()
                time.sleep(1)
        
        self.monitor_thread = threading.Thread(target=run_scheduler)
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
    
    def stop(self) -> None:
        """D·ª´ng gi√°m s√°t gi√°."""
        if not self.running:
            logger.warning("Price monitor kh√¥ng ch·∫°y")
            return
            
        self.running = False
        logger.info("ƒê√£ d·ª´ng gi√°m s√°t gi√°")
        
        # L∆∞u tr·∫°ng th√°i l·∫ßn cu·ªëi
        self.save_status()
        
        # H·ªßy t·∫•t c·∫£ c√¥ng vi·ªác ƒë√£ l√™n l·ªãch
        schedule.clear()
        
        # ƒê·ª£i thread k·∫øt th√∫c
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
            self.monitor_thread = None

def start_price_monitor(api=None):
    """
    Kh·ªüi ƒë·ªông monitor gi√°m s√°t gi√°.
    
    Args:
        api: Instance c·ªßa BinanceAPI n·∫øu c√≥
        
    Returns:
        PriceMonitor: Instance c·ªßa PriceMonitor
    """
    monitor = PriceMonitor(TARGET_SYMBOLS, api)
    monitor.start()
    return monitor

if __name__ == "__main__":
    logger.info("Kh·ªüi ƒë·ªông price_monitor.py")
    
    # C√≥ th·ªÉ import BinanceAPI n·∫øu c·∫ßn
    try:
        from binance_api import BinanceAPI
        from binance_api_fixes import apply_fixes_to_api
        
        api = BinanceAPI()
        api = apply_fixes_to_api(api)
        
        logger.info("ƒê√£ kh·ªüi t·∫°o API Binance")
        
        monitor = start_price_monitor(api)
        
        # Gi·ªØ script ch·∫°y
        try:
            while True:
                time.sleep(10)
        except KeyboardInterrupt:
            logger.info("ƒê√£ nh·∫≠n t√≠n hi·ªáu tho√°t")
            monitor.stop()
            
    except ImportError:
        logger.info("Ch·∫°y m√† kh√¥ng c√≥ BinanceAPI")
        monitor = start_price_monitor()
        
        # Gi·ªØ script ch·∫°y
        try:
            while True:
                time.sleep(10)
        except KeyboardInterrupt:
            logger.info("ƒê√£ nh·∫≠n t√≠n hi·ªáu tho√°t")
            monitor.stop()