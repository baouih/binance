#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng t·ª± ƒë·ªông
T√°c gi·∫£: BinanceTrader Bot
"""

import os
import time
import schedule
import requests
import logging
import json
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram_notifier import TelegramNotifier
from market_analysis_system import MarketAnalysisSystem
from binance_api import BinanceAPI

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("market_notifier.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("market_notifier")

# Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
telegram = TelegramNotifier()
market_system = MarketAnalysisSystem()
binance_api = BinanceAPI()

# Danh s√°ch c√°c coin c·∫ßn theo d√µi
MONITORED_COINS = ["BTC", "ETH", "SOL", "BNB", "XRP", "ADA", "DOGE", "MATIC"]

# Th·ªùi gian cooldown (ph√∫t) gi·ªØa c√°c th√¥ng b√°o cho m·ªói coin
NOTIFICATION_COOLDOWN = 15

# Ng∆∞·ª°ng t·ª± tin t·ªëi thi·ªÉu ƒë·ªÉ g·ª≠i t√≠n hi·ªáu
CONFIDENCE_THRESHOLD = 70

# Bi·∫øn ki·ªÉm so√°t th·ªùi gian g·ª≠i tin nh·∫Øn cu·ªëi c√πng cho m·ªói coin
last_notification_time = {}

# Bi·∫øn l∆∞u tr·ªØ t√≠n hi·ªáu cu·ªëi c√πng cho m·ªói coin
last_signals = {}

def initialize():
    """Kh·ªüi t·∫°o d·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng"""
    global last_notification_time, last_signals
    
    logger.info("Kh·ªüi t·∫°o d·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng")
    
    # Ki·ªÉm tra k·∫øt n·ªëi Telegram
    if telegram.test_connection():
        logger.info("K·∫øt n·ªëi Telegram th√†nh c√¥ng")
    else:
        logger.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi Telegram. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
    
    # Ki·ªÉm tra k·∫øt n·ªëi Binance
    try:
        btc_price = binance_api.get_latest_price("BTCUSDT")
        logger.info(f"K·∫øt n·ªëi Binance th√†nh c√¥ng. Gi√° BTC hi·ªán t·∫°i: ${btc_price}")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi Binance: {str(e)}")
    
    # Kh·ªüi t·∫°o c√°c bi·∫øn ki·ªÉm so√°t
    for coin in MONITORED_COINS:
        last_notification_time[coin] = datetime.now() - timedelta(minutes=NOTIFICATION_COOLDOWN)
        last_signals[coin] = None
    
    # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
    telegram.send_message(
        message=f"<b>ü§ñ D·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông</b>\n\n"
                f"üïí Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üîç Gi√°m s√°t: {', '.join(MONITORED_COINS)}\n"
                f"‚è±Ô∏è Cooldown: {NOTIFICATION_COOLDOWN} ph√∫t\n"
                f"üéØ ƒê·ªô t·ª± tin t·ªëi thi·ªÉu: {CONFIDENCE_THRESHOLD}%"
    )
    
    logger.info(f"ƒêang gi√°m s√°t coin {', '.join(MONITORED_COINS)}")

def analyze_market():
    """Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† g·ª≠i th√¥ng b√°o"""
    logger.info("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
    current_time = datetime.now()
    
    try:
        # L·∫•y ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng cho t·ª´ng coin
        market_regimes = {}
        for coin in MONITORED_COINS:
            try:
                symbol = f"{coin}USDT"
                regime = market_system.get_market_regime(symbol)
                if regime:
                    market_regimes[coin] = regime
                    logger.debug(f"Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng {coin}: {regime}")
            except Exception as e:
                logger.error(f"L·ªói khi ph√¢n t√≠ch ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng {coin}: {str(e)}")
        
        # L·∫•y t√≠n hi·ªáu giao d·ªãch
        for coin in MONITORED_COINS:
            try:
                # Ki·ªÉm tra th·ªùi gian cooldown
                if current_time - last_notification_time.get(coin, datetime.min) < timedelta(minutes=NOTIFICATION_COOLDOWN):
                    logger.debug(f"ƒêang trong th·ªùi gian cooldown cho {coin}")
                    continue
                
                symbol = f"{coin}USDT"
                # Ph√¢n t√≠ch k·ªπ thu·∫≠t
                signal = market_system.analyze_and_get_signal(symbol)
                
                if not signal:
                    continue
                
                # L·∫•y th√¥ng tin t√≠n hi·ªáu
                signal_type = signal.get('type', 'NEUTRAL')
                confidence = signal.get('confidence', 0)
                strategy = signal.get('strategy', 'Unknown')
                price = signal.get('price', 0)
                
                # Ki·ªÉm tra ƒë·ªô t·ª± tin
                if confidence < CONFIDENCE_THRESHOLD:
                    logger.debug(f"T√≠n hi·ªáu {coin} c√≥ ƒë·ªô t·ª± tin {confidence}% - d∆∞·ªõi ng∆∞·ª°ng {CONFIDENCE_THRESHOLD}%")
                    continue
                
                # Ki·ªÉm tra xung ƒë·ªôt v·ªõi t√≠n hi·ªáu tr∆∞·ªõc
                previous_signal = last_signals.get(coin)
                if previous_signal and previous_signal.get('type') != signal_type:
                    logger.info(f"T√≠n hi·ªáu m·ªõi ({signal_type}) kh√°c v·ªõi t√≠n hi·ªáu tr∆∞·ªõc ƒë√≥ ({previous_signal.get('type')}) cho {coin}")
                
                # L∆∞u t√≠n hi·ªáu m·ªõi
                last_signals[coin] = signal
                
                # C·∫≠p nh·∫≠t th·ªùi gian th√¥ng b√°o cu·ªëi
                last_notification_time[coin] = current_time
                
                # T·∫°o emoji ph√π h·ª£p
                emoji = "üî¥" if signal_type == "SELL" else "üü¢" if signal_type == "BUY" else "‚ö™"
                
                # L·∫•y gi√° hi·ªán t·∫°i
                current_price = binance_api.get_latest_price(symbol)
                
                # T·∫°o th√¥ng b√°o
                message = f"<b>{emoji} T√≠n hi·ªáu giao d·ªãch: {coin}</b>\n\n"
                message += f"<b>Lo·∫°i t√≠n hi·ªáu:</b> {signal_type}\n"
                message += f"<b>ƒê·ªô t·ª± tin:</b> {confidence}%\n"
                message += f"<b>Gi√° hi·ªán t·∫°i:</b> ${current_price}\n"
                message += f"<b>Chi·∫øn l∆∞·ª£c:</b> {strategy}\n"
                message += f"<b>Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng:</b> {market_regimes.get(coin, 'Unknown')}\n"
                message += f"<b>Th·ªùi gian:</b> {current_time.strftime('%Y-%m-%d %H:%M:%S')}"
                
                # G·ª≠i th√¥ng b√°o
                telegram.send_message(message=message)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o t√≠n hi·ªáu {signal_type} cho {coin} v·ªõi ƒë·ªô t·ª± tin {confidence}%")
                
            except Exception as e:
                logger.error(f"L·ªói khi ph√¢n t√≠ch v√† g·ª≠i t√≠n hi·ªáu cho {coin}: {str(e)}")
        
        # G·ª≠i b√°o c√°o t·ªïng quan th·ªã tr∆∞·ªùng m·ªói 4 gi·ªù
        if current_time.hour % 4 == 0 and current_time.minute < 5:
            send_market_overview()
            
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {str(e)}")

def send_market_overview():
    """G·ª≠i b√°o c√°o t·ªïng quan th·ªã tr∆∞·ªùng"""
    try:
        logger.info("ƒêang t·∫°o b√°o c√°o t·ªïng quan th·ªã tr∆∞·ªùng")
        
        # L·∫•y d·ªØ li·ªáu t·ªïng quan
        message = "<b>üîç T·ªîNG QUAN TH·ªä TR∆Ø·ªúNG</b>\n\n"
        
        # Th√™m th√¥ng tin gi√° c·ªßa c√°c coin ch√≠nh
        message += "<b>üí∞ Gi√° hi·ªán t·∫°i:</b>\n"
        for coin in MONITORED_COINS[:5]:  # Ch·ªâ l·∫•y 5 coin ƒë·∫ßu ti√™n
            try:
                symbol = f"{coin}USDT"
                price = binance_api.get_latest_price(symbol)
                change_24h = binance_api.get_price_change_percent(symbol)
                emoji = "üü¢" if change_24h >= 0 else "üî¥"
                message += f"{coin}: ${price} ({emoji}{abs(change_24h):.2f}%)\n"
            except Exception as e:
                logger.error(f"L·ªói khi l·∫•y th√¥ng tin gi√° {coin}: {str(e)}")
                message += f"{coin}: Kh√¥ng c√≥ d·ªØ li·ªáu\n"
        
        # Th√™m th√¥ng tin ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng
        message += "\n<b>üåê Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng:</b>\n"
        for coin in MONITORED_COINS[:5]:
            try:
                symbol = f"{coin}USDT"
                regime = market_system.get_market_regime(symbol)
                emoji = "‚ÜóÔ∏è" if regime == "Bullish" else "‚ÜòÔ∏è" if regime == "Bearish" else "‚ÜîÔ∏è"
                message += f"{coin}: {emoji} {regime}\n"
            except Exception as e:
                logger.error(f"L·ªói khi l·∫•y ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng {coin}: {str(e)}")
                message += f"{coin}: Kh√¥ng c√≥ d·ªØ li·ªáu\n"
        
        # Th√™m ph√¢n t√≠ch xu h∆∞·ªõng
        message += f"\n<b>üìä Xu h∆∞·ªõng (4H):</b>\n"
        for coin in MONITORED_COINS[:5]:
            try:
                symbol = f"{coin}USDT"
                analysis = market_system.get_trend_analysis(symbol, "4h")
                trend = analysis.get('trend', 'Neutral')
                strength = analysis.get('strength', 0.5)
                emoji = "üü¢" if trend == "Bullish" else "üî¥" if trend == "Bearish" else "‚ö™"
                strength_bar = "‚ñ∞" * int(strength * 10) + "‚ñ±" * (10 - int(strength * 10))
                message += f"{coin}: {emoji} {trend} ({strength_bar})\n"
            except Exception as e:
                logger.error(f"L·ªói khi l·∫•y ph√¢n t√≠ch xu h∆∞·ªõng {coin}: {str(e)}")
                message += f"{coin}: Kh√¥ng c√≥ d·ªØ li·ªáu\n"
        
        # G·ª≠i th√¥ng b√°o
        telegram.send_message(message=message)
        logger.info("ƒê√£ g·ª≠i b√°o c√°o t·ªïng quan th·ªã tr∆∞·ªùng")
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o b√°o c√°o t·ªïng quan th·ªã tr∆∞·ªùng: {str(e)}")

def schedule_jobs():
    """L√™n l·ªãch c√°c c√¥ng vi·ªác ƒë·ªãnh k·ª≥"""
    # L·ªãch tr√¨nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng m·ªói 10 ph√∫t
    schedule.every(10).minutes.do(analyze_market)
    
    logger.info("ƒê√£ l√™n l·ªãch c√°c c√¥ng vi·ªác t·ª± ƒë·ªông")

def run_service():
    """Ch·∫°y d·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng"""
    logger.info("D·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng ƒëang ch·∫°y")
    
    # Kh·ªüi t·∫°o d·ªãch v·ª•
    initialize()
    
    # L√™n l·ªãch c√°c c√¥ng vi·ªác
    schedule_jobs()
    
    # Ph√¢n t√≠ch th·ªã tr∆∞·ªùng ngay l·∫≠p t·ª©c
    analyze_market()
    
    # V√≤ng l·∫∑p ch√≠nh
    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("D·ªãch v·ª• ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        # G·ª≠i th√¥ng b√°o l·ªói
        telegram.send_message(
            message=f"<b>‚ùå L·ªói d·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng</b>\n\n"
                    f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"L·ªói: {str(e)}"
        )

if __name__ == "__main__":
    # L∆∞u PID v√†o file
    with open("market_notifier.pid", "w") as f:
        f.write(str(os.getpid()))
    
    # Ghi ra stdout ƒë·ªÉ x√°c nh·∫≠n script ƒë√£ ch·∫°y
    print(f"D·ªãch v·ª• th√¥ng b√°o th·ªã tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v·ªõi PID {os.getpid()}")
    
    # Ch·∫°y d·ªãch v·ª•
    run_service()