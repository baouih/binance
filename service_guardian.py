#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Service Guardian - Gi√°m s√°t v√† kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª•
====================================================

Script n√†y gi√°m s√°t v√† t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i c√°c d·ªãch v·ª• n·∫øu ch√∫ng b·ªã d·ª´ng.
ƒê∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y li√™n t·ª•c nh∆∞ m·ªôt d·ªãch v·ª• h·ªá th·ªëng, ƒë·∫£m b·∫£o c√°c d·ªãch v·ª•
quan tr·ªçng c·ªßa h·ªá th·ªëng giao d·ªãch lu√¥n ho·∫°t ƒë·ªông.

Mode s·ª≠ d·ª•ng:
1. Ch·∫°y nh∆∞ m·ªôt d·ªãch v·ª• ƒë·ªôc l·∫≠p: python service_guardian.py
2. Ki·ªÉm tra v√† kh·ªüi ƒë·ªông m·ªôt l·∫ßn: python service_guardian.py --check-only

T√≠nh nƒÉng:
- Gi√°m s√°t tr·∫°ng th√°i c√°c d·ªãch v·ª• th∆∞·ªùng xuy√™n
- Ghi nh·∫≠t k√Ω chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông gi√°m s√°t
- T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• n·∫øu kh√¥ng c√≤n ho·∫°t ƒë·ªông
- G·ª≠i th√¥ng b√°o v·ªÅ tr·∫°ng th√°i d·ªãch v·ª•
"""

import os
import sys
import time
import signal
import logging
import argparse
import subprocess
import json
from datetime import datetime
import psutil

# Thi·∫øt l·∫≠p logging
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('service_guardian')
logger.setLevel(logging.INFO)

# File handler
log_file = 'service_guardian.log'
file_handler = logging.FileHandler(log_file)
file_handler.setFormatter(log_formatter)
logger.addHandler(file_handler)

# Console handler
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
logger.addHandler(console_handler)

# Danh s√°ch d·ªãch v·ª• c·∫ßn gi√°m s√°t v√† c√°c th√¥ng tin c·∫ßn thi·∫øt
# Format: name, check_command, start_script, pid_file
SERVICES = [
    {
        'name': 'Auto SLTP Manager',
        'check_command': 'pgrep -f "python auto_sltp_manager.py"',
        'start_script': './headless_start_sltp_manager.sh',
        'pid_file': 'auto_sltp_manager.pid',
        'direct_command': 'nohup python auto_sltp_manager.py > auto_sltp_manager.log 2>&1 &'
    },
    {
        'name': 'Trailing Stop Service',
        'check_command': 'pgrep -f "python position_trailing_stop.py"',
        'start_script': './headless_trailing_stop.sh',
        'pid_file': 'trailing_stop_service.pid',
        'direct_command': 'nohup python position_trailing_stop.py --mode service --interval 60 > trailing_stop_service.log 2>&1 &'
    },
    # Th√™m c√°c d·ªãch v·ª• kh√°c n·∫øu c·∫ßn
]

class ServiceGuardian:
    def __init__(self, check_only=False):
        """Kh·ªüi t·∫°o Guardian Service."""
        self.check_only = check_only
        self.pid = os.getpid()
        self.write_pid_file()
        logger.info(f"Service Guardian kh·ªüi ƒë·ªông v·ªõi PID {self.pid}")
        
        # X·ª≠ l√Ω t√≠n hi·ªáu ƒë·ªÉ tho√°t s·∫°ch s·∫Ω
        signal.signal(signal.SIGTERM, self.handle_sigterm)
        signal.signal(signal.SIGINT, self.handle_sigterm)
    
    def write_pid_file(self):
        """Ghi PID ra file ƒë·ªÉ c√≥ th·ªÉ ki·ªÉm tra sau n√†y."""
        try:
            with open('service_guardian.pid', 'w') as f:
                f.write(str(self.pid))
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ ghi file PID: {e}")
    
    def handle_sigterm(self, signum, frame):
        """X·ª≠ l√Ω khi nh·∫≠n t√≠n hi·ªáu tho√°t."""
        logger.info("Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu tho√°t, ƒëang d·ª´ng d·ªãch v·ª•...")
        try:
            os.remove('service_guardian.pid')
        except:
            pass
        sys.exit(0)
    
    def check_service(self, service):
        """Ki·ªÉm tra xem d·ªãch v·ª• c√≥ ƒëang ch·∫°y kh√¥ng."""
        try:
            # S·ª≠ d·ª•ng c·∫£ hai ph∆∞∆°ng ph√°p ƒë·ªÉ ki·ªÉm tra d·ªãch v·ª•
            # 1. Ki·ªÉm tra th√¥ng qua l·ªánh check_command
            process = subprocess.run(service['check_command'], shell=True, stdout=subprocess.PIPE)
            running_by_command = process.returncode == 0
            
            # 2. Ki·ªÉm tra th√¥ng qua file PID
            running_by_pid = False
            if os.path.exists(service['pid_file']):
                with open(service['pid_file'], 'r') as f:
                    pid = f.read().strip()
                    running_by_pid = psutil.pid_exists(int(pid)) if pid.isdigit() else False
            
            # D·ªãch v·ª• ƒë∆∞·ª£c coi l√† ƒëang ch·∫°y n·∫øu m·ªôt trong hai ph∆∞∆°ng ph√°p x√°c nh·∫≠n
            return running_by_command or running_by_pid
        except Exception as e:
            logger.error(f"L·ªói khi ki·ªÉm tra d·ªãch v·ª• {service['name']}: {e}")
            return False
    
    def start_service(self, service):
        """Kh·ªüi ƒë·ªông d·ªãch v·ª•."""
        logger.info(f"ƒêang kh·ªüi ƒë·ªông {service['name']}...")
        try:
            # Th·ª≠ kh·ªüi ƒë·ªông b·∫±ng script
            if os.path.exists(service['start_script']):
                subprocess.run(f"chmod +x {service['start_script']}", shell=True)
                result = subprocess.run(service['start_script'], shell=True)
                if result.returncode == 0:
                    logger.info(f"ƒê√£ kh·ªüi ƒë·ªông {service['name']} th√†nh c√¥ng qua script")
                    return True
                else:
                    logger.warning(f"Kh·ªüi ƒë·ªông {service['name']} qua script th·∫•t b·∫°i, th·ª≠ l·ªánh tr·ª±c ti·∫øp")
            
            # N·∫øu script th·∫•t b·∫°i ho·∫∑c kh√¥ng t·ªìn t·∫°i, th·ª≠ l·ªánh tr·ª±c ti·∫øp
            subprocess.run(service['direct_command'], shell=True)
            
            # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ d·ªãch v·ª• kh·ªüi ƒë·ªông
            time.sleep(3)
            
            # Ki·ªÉm tra xem d·ªãch v·ª• ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng ch∆∞a
            if self.check_service(service):
                logger.info(f"ƒê√£ kh·ªüi ƒë·ªông {service['name']} th√†nh c√¥ng qua l·ªánh tr·ª±c ti·∫øp")
                return True
            else:
                logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông {service['name']}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi kh·ªüi ƒë·ªông {service['name']}: {e}")
            return False
    
    def send_notification(self, message):
        """G·ª≠i th√¥ng b√°o v·ªÅ tr·∫°ng th√°i d·ªãch v·ª•."""
        try:
            # Ki·ªÉm tra xem telegram_notifier c√≥ t·ªìn t·∫°i kh√¥ng
            if os.path.exists('telegram_notifier.py'):
                cmd = f'python telegram_notifier.py "{message}" "system"'
                subprocess.run(cmd, shell=True)
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o: {message}")
            else:
                logger.warning("Kh√¥ng t√¨m th·∫•y telegram_notifier.py. B·ªè qua th√¥ng b√°o.")
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o: {e}")
    
    def run(self):
        """Ch·∫°y v√≤ng l·∫∑p ch√≠nh c·ªßa Guardian."""
        logger.info("Service Guardian b·∫Øt ƒë·∫ßu gi√°m s√°t c√°c d·ªãch v·ª•")
        
        # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
        self.send_notification("üõ°Ô∏è Service Guardian ƒë√£ b·∫Øt ƒë·∫ßu gi√°m s√°t h·ªá th·ªëng")
        
        # Ki·ªÉm tra v√† kh·ªüi ƒë·ªông c√°c d·ªãch v·ª•
        while True:
            service_status = []
            
            for service in SERVICES:
                is_running = self.check_service(service)
                status = "‚úÖ ƒêang ch·∫°y" if is_running else "‚ùå Kh√¥ng ch·∫°y"
                logger.info(f"{service['name']}: {status}")
                service_status.append(f"{service['name']}: {status}")
                
                if not is_running:
                    if not self.check_only:
                        if self.start_service(service):
                            service_status[-1] = f"{service['name']}: ‚úÖ ƒê√£ kh·ªüi ƒë·ªông l·∫°i"
                            self.send_notification(f"üîÑ D·ªãch v·ª• {service['name']} ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i t·ª± ƒë·ªông")
                        else:
                            self.send_notification(f"‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• {service['name']}")
            
            # G·ª≠i b√°o c√°o tr·∫°ng th√°i c√°c d·ªãch v·ª•
            if not all("‚úÖ" in status for status in service_status):
                status_message = "üìä Tr·∫°ng th√°i d·ªãch v·ª•:\n" + "\n".join(service_status)
                self.send_notification(status_message)
            
            # N·∫øu ch·ªâ ki·ªÉm tra m·ªôt l·∫ßn th√¨ tho√°t
            if self.check_only:
                break
            
            # Ch·ªù ƒë·∫øn l·∫ßn ki·ªÉm tra ti·∫øp theo
            time.sleep(60)  # Ki·ªÉm tra m·ªói 60 gi√¢y
        
        logger.info("Service Guardian k·∫øt th√∫c gi√°m s√°t")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Service Guardian - Gi√°m s√°t v√† kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª•")
    parser.add_argument("--check-only", action="store_true", 
                        help="Ch·ªâ ki·ªÉm tra v√† kh·ªüi ƒë·ªông c√°c d·ªãch v·ª• m·ªôt l·∫ßn")
    args = parser.parse_args()
    
    guardian = ServiceGuardian(check_only=args.check_only)
    guardian.run()