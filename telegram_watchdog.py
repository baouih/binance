#!/usr/bin/env python3
"""
Script telegram watchdog - G·ª≠i th√¥ng b√°o tr·∫°ng th√°i v√† c·∫£nh b√°o qua Telegram

Script n√†y g·ª≠i th√¥ng b√°o v·ªÅ tr·∫°ng th√°i c·ªßa bot v√† c·∫£nh b√°o khi c√≥ s·ª± c·ªë
th√¥ng qua k√™nh Telegram, gi√∫p qu·∫£n tr·ªã vi√™n theo d√µi ho·∫°t ƒë·ªông c·ªßa bot t·ª´ xa.
"""

import os
import sys
import json
import time
import requests
import logging
from datetime import datetime
import traceback

# C·∫•u h√¨nh logging
logging.basicConfig(
    filename='telegram_watchdog.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Th√¥ng tin Telegram Bot (c·∫ßn thay th·∫ø b·∫±ng th√¥ng tin th·ª±c t·∫ø)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', 'DEFAULT_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', 'DEFAULT_CHAT_ID')

# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c file c·∫•u h√¨nh
BOT_STATUS_FILE = 'bot_status.json'
ACTIVE_POSITIONS_FILE = 'active_positions.json'

def load_json_file(file_path):
    """
    T·∫£i n·ªôi dung t·ª´ file JSON
    
    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file JSON
        
    Returns:
        dict: D·ªØ li·ªáu t·ª´ file JSON ho·∫∑c {} n·∫øu c√≥ l·ªói
    """
    try:
        if not os.path.exists(file_path):
            logging.warning(f"File {file_path} kh√¥ng t·ªìn t·∫°i")
            return {}
            
        with open(file_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"L·ªói khi t·∫£i file {file_path}: {str(e)}")
        return {}

def send_telegram_message(message):
    """
    G·ª≠i tin nh·∫Øn qua Telegram Bot
    
    Args:
        message (str): N·ªôi dung tin nh·∫Øn
        
    Returns:
        bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, data=payload)
        
        if response.status_code == 200:
            logging.info(f"ƒê√£ g·ª≠i tin nh·∫Øn Telegram: {message[:50]}...")
            return True
        else:
            logging.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn Telegram. M√£ l·ªói: {response.status_code}")
            logging.error(f"Ph·∫£n h·ªìi: {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {str(e)}")
        logging.error(traceback.format_exc())
        return False

def get_bot_status_summary():
    """
    T·∫°o t√≥m t·∫Øt tr·∫°ng th√°i bot
    
    Returns:
        str: T√≥m t·∫Øt tr·∫°ng th√°i bot
    """
    bot_status = load_json_file(BOT_STATUS_FILE)
    
    if not bot_status:
        return "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin tr·∫°ng th√°i bot!"
    
    # T√≠nh th·ªùi gian bot ƒë√£ ch·∫°y
    start_time = datetime.strptime(bot_status.get('start_time', '2025-01-01 00:00:00'), '%Y-%m-%d %H:%M:%S')
    last_update = datetime.strptime(bot_status.get('last_update', '2025-01-01 00:00:00'), '%Y-%m-%d %H:%M:%S')
    now = datetime.now()
    uptime = now - start_time
    last_update_delta = now - last_update
    
    # ƒê·ªãnh d·∫°ng uptime th√†nh ng√†y, gi·ªù, ph√∫t
    days = uptime.days
    hours = uptime.seconds // 3600
    minutes = (uptime.seconds % 3600) // 60
    
    # T·∫°o t√≥m t·∫Øt
    summary = []
    summary.append(f"<b>ü§ñ Tr·∫°ng th√°i Crypto Trading Bot</b>")
    summary.append(f"üîπ Bot ƒëang {'Ho·∫°t ƒë·ªông' if bot_status.get('running', False) else 'D·ª´ng'}")
    summary.append(f"üîπ Th·ªùi gian ho·∫°t ƒë·ªông: {days} ng√†y, {hours} gi·ªù, {minutes} ph√∫t")
    summary.append(f"üîπ C·∫≠p nh·∫≠t cu·ªëi: {bot_status.get('last_update', 'N/A')} (c√°ch ƒë√¢y {last_update_delta.seconds // 60} ph√∫t)")
    summary.append(f"üîπ Ch·∫ø ƒë·ªô: {bot_status.get('mode', 'N/A').upper()}")
    summary.append(f"üîπ S·ªë d∆∞: {bot_status.get('balance', 0):.2f} USDT")
    summary.append(f"üîπ S·ªë c·∫∑p gi√°m s√°t: {len(bot_status.get('monitored_symbols', []))}")
    summary.append(f"üîπ S·ªë c·∫∑p ho·∫°t ƒë·ªông: {len(bot_status.get('active_symbols', []))}")
    
    active_strategies = bot_status.get('active_strategies', [])
    summary.append(f"üîπ Chi·∫øn l∆∞·ª£c ({len(active_strategies)}): {', '.join(active_strategies)}")
    
    return "\n".join(summary)

def get_active_positions_summary():
    """
    T·∫°o t√≥m t·∫Øt c√°c v·ªã th·∫ø ƒëang m·ªü
    
    Returns:
        str: T√≥m t·∫Øt c√°c v·ªã th·∫ø ƒëang m·ªü
    """
    positions = load_json_file(ACTIVE_POSITIONS_FILE)
    
    if not positions:
        return "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin v·ªã th·∫ø ƒëang m·ªü!"
    
    # T·∫°o t√≥m t·∫Øt
    summary = []
    summary.append(f"<b>üìä V·ªã th·∫ø ƒêang M·ªü ({len(positions)})</b>")
    
    for pos_id, pos_data in positions.items():
        symbol = pos_data.get('symbol', 'UNKNOWN')
        side = pos_data.get('side', 'UNKNOWN')
        entry_price = pos_data.get('entry_price', 0)
        current_price = pos_data.get('current_price', 0)
        quantity = pos_data.get('quantity', 0)
        leverage = pos_data.get('leverage', 1)
        
        # T√≠nh P/L
        if side == 'BUY':
            pnl_pct = (current_price - entry_price) / entry_price * 100 * leverage
        else:
            pnl_pct = (entry_price - current_price) / entry_price * 100 * leverage
            
        pnl_emoji = "üü¢" if pnl_pct > 0 else "üî¥"
        
        summary.append(f"{pnl_emoji} {symbol} {side} - V√†o: {entry_price:.2f}, Hi·ªán t·∫°i: {current_price:.2f}, SL l∆∞·ª£ng: {quantity:.4f}, ƒê√≤n b·∫©y: {leverage}x, P/L: {pnl_pct:.2f}%")
    
    return "\n".join(summary)

def check_bot_health():
    """
    Ki·ªÉm tra s·ª©c kh·ªèe c·ªßa bot v√† ph√°t hi·ªán v·∫•n ƒë·ªÅ
    
    Returns:
        tuple: (is_healthy, warning_message)
    """
    bot_status = load_json_file(BOT_STATUS_FILE)
    
    if not bot_status:
        return False, "Kh√¥ng th·ªÉ ƒë·ªçc file tr·∫°ng th√°i bot!"
    
    # Ki·ªÉm tra th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi
    if 'last_update' in bot_status:
        last_update = datetime.strptime(bot_status['last_update'], '%Y-%m-%d %H:%M:%S')
        now = datetime.now()
        delta = now - last_update
        
        # N·∫øu h∆°n 10 ph√∫t kh√¥ng c·∫≠p nh·∫≠t, bot c√≥ th·ªÉ b·ªã treo
        if delta.seconds > 600:
            return False, f"Bot kh√¥ng c·∫≠p nh·∫≠t trong {delta.seconds // 60} ph√∫t qua!"
    
    # Ki·ªÉm tra tr·∫°ng th√°i running
    if not bot_status.get('running', False):
        return False, "Bot ƒëang trong tr·∫°ng th√°i d·ª´ng!"
    
    return True, "Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"

def main():
    """H√†m ch√≠nh c·ªßa script"""
    logging.info("Telegram watchdog ƒë√£ kh·ªüi ƒë·ªông")
    
    # N·∫øu c√≥ tham s·ªë d√≤ng l·ªánh, s·ª≠ d·ª•ng n√≥ nh∆∞ l√† tin nh·∫Øn ƒë·ªÉ g·ª≠i
    if len(sys.argv) > 1:
        message = sys.argv[1]
        send_telegram_message(message)
        return
    
    # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
    send_telegram_message("üöÄ Telegram Watchdog ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v√† ƒëang gi√°m s√°t bot!")
    
    # V√≤ng l·∫∑p gi√°m s√°t
    check_interval = 15 * 60  # 15 ph√∫t
    status_interval = 6 * 60 * 60  # 6 gi·ªù
    
    last_status_time = time.time() - status_interval  # G·ª≠i b√°o c√°o tr·∫°ng th√°i ngay l·∫ßn ƒë·∫ßu
    
    try:
        while True:
            # Ki·ªÉm tra s·ª©c kh·ªèe bot
            is_healthy, health_message = check_bot_health()
            
            # G·ª≠i c·∫£nh b√°o n·∫øu bot kh√¥ng kh·ªèe m·∫°nh
            if not is_healthy:
                warning_message = f"‚ö†Ô∏è C·∫¢NH B√ÅO: {health_message}"
                send_telegram_message(warning_message)
            
            # G·ª≠i b√°o c√°o tr·∫°ng th√°i ƒë·ªãnh k·ª≥
            current_time = time.time()
            if current_time - last_status_time >= status_interval:
                status_summary = get_bot_status_summary()
                positions_summary = get_active_positions_summary()
                
                full_summary = f"{status_summary}\n\n{positions_summary}"
                send_telegram_message(full_summary)
                
                last_status_time = current_time
            
            # Ng·ªß tr∆∞·ªõc khi ki·ªÉm tra ti·∫øp
            time.sleep(check_interval)
            
    except KeyboardInterrupt:
        logging.info("Telegram watchdog ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
        send_telegram_message("üõë Telegram Watchdog ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        error_message = f"L·ªói trong telegram_watchdog: {str(e)}"
        logging.error(error_message)
        logging.error(traceback.format_exc())
        send_telegram_message(f"‚ùå {error_message}")

if __name__ == "__main__":
    main()