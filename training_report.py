#!/usr/bin/env python3
"""
B√°o c√°o ti·∫øn tr√¨nh hu·∫•n luy·ªán m√¥ h√¨nh h·ªçc m√°y

Module n√†y t·∫°o b√°o c√°o chi ti·∫øt v·ªÅ vi·ªác hu·∫•n luy·ªán m√¥ h√¨nh h·ªçc m√°y, 
bao g·ªìm c√°c th√¥ng s·ªë k·ªπ thu·∫≠t, k·∫øt qu·∫£ hu·∫•n luy·ªán v√† ƒë√°nh gi√° m√¥ h√¨nh.
"""

import os
import json
import logging
import time
from datetime import datetime
import glob
import re
from typing import Dict, List, Optional

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("training_report")

# Import telegram notifier
from telegram_notify import telegram_notifier

class TrainingReporter:
    """L·ªõp t·∫°o b√°o c√°o hu·∫•n luy·ªán m√¥ h√¨nh"""
    
    def __init__(self, log_folder="./logs", model_folder="./models", report_folder="./reports"):
        """
        Kh·ªüi t·∫°o Training Reporter.
        
        Args:
            log_folder (str): Th∆∞ m·ª•c ch·ª©a log hu·∫•n luy·ªán
            model_folder (str): Th∆∞ m·ª•c ch·ª©a m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
            report_folder (str): Th∆∞ m·ª•c l∆∞u b√°o c√°o
        """
        self.log_folder = log_folder
        self.model_folder = model_folder
        self.report_folder = report_folder
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        for folder in [log_folder, model_folder, report_folder]:
            os.makedirs(folder, exist_ok=True)
    
    def parse_training_logs(self, log_file=None) -> Dict:
        """
        ƒê·ªçc v√† ph√¢n t√≠ch log hu·∫•n luy·ªán.
        
        Args:
            log_file (str, optional): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file log, n·∫øu None th√¨ t√¨m file log m·ªõi nh·∫•t
            
        Returns:
            Dict: Th√¥ng tin hu·∫•n luy·ªán ƒë∆∞·ª£c tr√≠ch xu·∫•t
        """
        # T√¨m file log m·ªõi nh·∫•t n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh
        if log_file is None:
            training_logs = glob.glob(os.path.join(self.log_folder, "training_*.log"))
            if not training_logs:
                logger.warning("Kh√¥ng t√¨m th·∫•y file log hu·∫•n luy·ªán")
                return {}
            
            log_file = max(training_logs, key=os.path.getmtime)
        
        logger.info(f"ƒêang ph√¢n t√≠ch log hu·∫•n luy·ªán: {log_file}")
        
        # M·∫´u d·ªØ li·ªáu ƒë·ªÉ thu th·∫≠p
        training_data = {
            "timestamp": datetime.now().isoformat(),
            "symbols": [],
            "models": [],
            "performance": {},
            "duration": 0,
            "status": "unknown"
        }
        
        try:
            with open(log_file, 'r') as f:
                content = f.read()
                
                # Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n
                symbols = re.findall(r"ƒê√£ thu th·∫≠p d·ªØ li·ªáu cho (\w+)", content)
                if symbols:
                    training_data["symbols"] = list(set(symbols))
                
                # Tr√≠ch xu·∫•t th√¥ng tin m√¥ h√¨nh
                models = re.findall(r"ƒê√£ ƒë√†o t·∫°o (\w+): Accuracy=([\d\.]+), F1=([\d\.]+), Th·ªùi gian=([\d\.]+)s", content)
                if models:
                    training_data["models"] = [{
                        "name": model[0],
                        "accuracy": float(model[1]),
                        "f1_score": float(model[2]),
                        "training_time": float(model[3])
                    } for model in models]
                
                # T√≠nh th·ªùi gian hu·∫•n luy·ªán
                start_match = re.search(r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}),\d+ - INFO - B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán", content)
                end_match = re.search(r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}),\d+ - INFO - Ho√†n th√†nh hu·∫•n luy·ªán", content)
                
                if start_match and end_match:
                    start_time = datetime.strptime(start_match.group(1), "%Y-%m-%d %H:%M:%S")
                    end_time = datetime.strptime(end_match.group(1), "%Y-%m-%d %H:%M:%S")
                    
                    duration = (end_time - start_time).total_seconds()
                    training_data["duration"] = duration
                    training_data["status"] = "completed"
                elif start_match:
                    training_data["status"] = "in_progress"
            
            return training_data
        
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch log hu·∫•n luy·ªán: {e}")
            return training_data
    
    def get_model_info(self) -> Dict:
        """
        L·∫•y th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán.
        
        Returns:
            Dict: Th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh
        """
        model_info = {
            "count": 0,
            "last_updated": None,
            "symbols": [],
            "size_mb": 0,
            "models": []
        }
        
        try:
            # T√¨m t·∫•t c·∫£ c√°c file m√¥ h√¨nh
            model_files = glob.glob(os.path.join(self.model_folder, "*.joblib"))
            
            if not model_files:
                return model_info
            
            model_info["count"] = len(model_files)
            
            # T√¨m file m·ªõi nh·∫•t
            newest_file = max(model_files, key=os.path.getmtime)
            model_info["last_updated"] = datetime.fromtimestamp(os.path.getmtime(newest_file)).isoformat()
            
            # T√≠nh k√≠ch th∆∞·ªõc t·ªïng
            total_size = sum(os.path.getsize(f) for f in model_files)
            model_info["size_mb"] = total_size / (1024 * 1024)  # Chuy·ªÉn sang MB
            
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ng m√¥ h√¨nh
            for model_file in model_files:
                file_name = os.path.basename(model_file)
                # M·∫´u t√™n: symbol_timeframe_modeltype_regime.joblib
                parts = os.path.splitext(file_name)[0].split('_')
                
                if len(parts) >= 2:
                    symbol = parts[0]
                    if symbol not in model_info["symbols"]:
                        model_info["symbols"].append(symbol)
                    
                    model_info["models"].append({
                        "name": file_name,
                        "symbol": symbol,
                        "timeframe": parts[1] if len(parts) > 1 else "unknown",
                        "type": parts[2] if len(parts) > 2 else "unknown",
                        "regime": parts[3] if len(parts) > 3 else "all",
                        "size_mb": os.path.getsize(model_file) / (1024 * 1024),
                        "last_modified": datetime.fromtimestamp(os.path.getmtime(model_file)).isoformat()
                    })
            
            return model_info
        
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y th√¥ng tin m√¥ h√¨nh: {e}")
            return model_info
    
    def generate_training_report(self) -> Dict:
        """
        T·∫°o b√°o c√°o hu·∫•n luy·ªán ƒë·∫ßy ƒë·ªß.
        
        Returns:
            Dict: B√°o c√°o hu·∫•n luy·ªán
        """
        logger.info("ƒêang t·∫°o b√°o c√°o hu·∫•n luy·ªán")
        
        # Thu th·∫≠p th√¥ng tin
        training_log = self.parse_training_logs()
        model_info = self.get_model_info()
        
        # T·∫°o b√°o c√°o
        report = {
            "timestamp": datetime.now().isoformat(),
            "training": training_log,
            "models": model_info,
            "summary": {
                "status": training_log.get("status", "unknown"),
                "models_count": model_info.get("count", 0),
                "avg_accuracy": 0,
                "active_symbols": model_info.get("symbols", []),
                "last_training": training_log.get("timestamp")
            }
        }
        
        # T√≠nh accuracy trung b√¨nh
        models = training_log.get("models", [])
        if models:
            avg_accuracy = sum(model.get("accuracy", 0) for model in models) / len(models)
            report["summary"]["avg_accuracy"] = avg_accuracy
        
        return report
    
    def save_report(self, report: Dict, file_name=None) -> str:
        """
        L∆∞u b√°o c√°o v√†o file.
        
        Args:
            report (Dict): B√°o c√°o ƒë·ªÉ l∆∞u
            file_name (str, optional): T√™n file b√°o c√°o, n·∫øu None th√¨ t·∫°o t√™n t·ª± ƒë·ªông
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file b√°o c√°o
        """
        if file_name is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_name = f"training_report_{timestamp}.json"
        
        file_path = os.path.join(self.report_folder, file_name)
        
        try:
            with open(file_path, 'w') as f:
                json.dump(report, f, indent=2)
            
            logger.info(f"ƒê√£ l∆∞u b√°o c√°o hu·∫•n luy·ªán v√†o: {file_path}")
            return file_path
        
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u b√°o c√°o: {e}")
            return ""
    
    def send_telegram_notification(self, report: Dict) -> bool:
        """
        G·ª≠i b√°o c√°o hu·∫•n luy·ªán qua Telegram.
        
        Args:
            report (Dict): B√°o c√°o hu·∫•n luy·ªán
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not telegram_notifier.enabled:
            logger.warning("Telegram notifier kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t")
            return False
        
        try:
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ b√°o c√°o
            summary = report.get("summary", {})
            training = report.get("training", {})
            models = report.get("models", {})
            
            # ƒê·ªãnh d·∫°ng tin nh·∫Øn
            message = f"<b>üß† B√ÅO C√ÅO HU·∫§N LUY·ªÜN M√î H√åNH</b>\n\n"
            
            # Tr·∫°ng th√°i
            status = summary.get("status", "unknown")
            if status == "completed":
                message += f"<b>Tr·∫°ng th√°i:</b> ‚úÖ Ho√†n th√†nh\n"
            elif status == "in_progress":
                message += f"<b>Tr·∫°ng th√°i:</b> ‚è≥ ƒêang hu·∫•n luy·ªán\n"
            else:
                message += f"<b>Tr·∫°ng th√°i:</b> ‚ùì Kh√¥ng x√°c ƒë·ªãnh\n"
            
            # Th√¥ng tin t·ªïng quan
            message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"<b>S·ªë m√¥ h√¨nh:</b> {summary.get('models_count', 0)}\n"
            message += f"<b>ƒê·ªô ch√≠nh x√°c TB:</b> {summary.get('avg_accuracy', 0):.2%}\n"
            
            # C·∫∑p ti·ªÅn ƒë∆∞·ª£c hu·∫•n luy·ªán
            symbols = summary.get("active_symbols", [])
            if symbols:
                message += f"<b>C·∫∑p ti·ªÅn:</b> {', '.join(symbols)}\n\n"
            
            # Chi ti·∫øt m√¥ h√¨nh
            model_list = training.get("models", [])
            if model_list:
                message += f"<b>CHI TI·∫æT M√î H√åNH:</b>\n"
                for model in model_list:
                    name = model.get("name", "")
                    acc = model.get("accuracy", 0)
                    f1 = model.get("f1_score", 0)
                    time = model.get("training_time", 0)
                    
                    # Bi·ªÉu t∆∞·ª£ng d·ª±a v√†o ƒë·ªô ch√≠nh x√°c
                    if acc >= 0.9:
                        emoji = "üü¢"
                    elif acc >= 0.8:
                        emoji = "üü°"
                    else:
                        emoji = "üî¥"
                    
                    message += f"{emoji} <b>{name}</b>: Acc={acc:.2%}, F1={f1:.2%}, Time={time:.1f}s\n"
            
            # G·ª≠i tin nh·∫Øn
            return telegram_notifier.send_message(message)
        
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i b√°o c√°o hu·∫•n luy·ªán qua Telegram: {e}")
            return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ t·∫°o b√°o c√°o hu·∫•n luy·ªán"""
    # T·∫°o th∆∞ m·ª•c logs v√† models n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs("logs", exist_ok=True)
    os.makedirs("models", exist_ok=True)
    os.makedirs("reports", exist_ok=True)
    
    reporter = TrainingReporter()
    report = reporter.generate_training_report()
    
    # L∆∞u b√°o c√°o
    reporter.save_report(report)
    
    # G·ª≠i th√¥ng b√°o qua Telegram
    reporter.send_telegram_notification(report)
    
    print("B√°o c√°o hu·∫•n luy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i ƒëi")

if __name__ == "__main__":
    main()