#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module t·∫£i v√† l∆∞u c·∫•u h√¨nh
"""

import os
import json
import logging
import traceback

# C·∫•u h√¨nh logging
logger = logging.getLogger("config_loader")

def load_config(config_file, default_config=None):
    """
    T·∫£i c·∫•u h√¨nh t·ª´ file JSON
    
    :param config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
    :param default_config: C·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y file
    :return: Dict c·∫•u h√¨nh
    """
    if default_config is None:
        default_config = {}
    
    try:
        if not os.path.exists(config_file):
            logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh {config_file}, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
            return default_config
        
        with open(config_file, "r", encoding="utf-8") as f:
            config = json.load(f)
            logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_file}")
            return config
    
    except json.JSONDecodeError as e:
        logger.error(f"L·ªói ƒë·ªãnh d·∫°ng JSON trong file {config_file}: {str(e)}")
        return default_config
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh t·ª´ {config_file}: {str(e)}")
        logger.error(traceback.format_exc())
        return default_config

def save_config(config, config_file):
    """
    L∆∞u c·∫•u h√¨nh v√†o file JSON
    
    :param config: Dict c·∫•u h√¨nh
    :param config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u c·∫•u h√¨nh
    :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
    """
    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
        os.makedirs(os.path.dirname(config_file), exist_ok=True)
        
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
            logger.info(f"ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {config_file}")
            return True
    
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u c·∫•u h√¨nh v√†o {config_file}: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def load_account_config(filepath="account_config.json"):
    """
    T·∫£i c·∫•u h√¨nh t√†i kho·∫£n
    
    :param filepath: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh t√†i kho·∫£n
    :return: Dict c·∫•u h√¨nh t√†i kho·∫£n
    """
    default_config = {
        "symbols": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "ADAUSDT"],
        "timeframes": ["15m", "1h", "4h", "1d"],
        "strategy": "combined",
        "leverage": 3,
        "max_positions": 3,
        "risk_level": 20,
        "enable_telegram": True,
        "auto_sltp": True
    }
    
    return load_config(filepath, default_config)

def save_account_config(config, filepath="account_config.json"):
    """
    L∆∞u c·∫•u h√¨nh t√†i kho·∫£n
    
    :param config: Dict c·∫•u h√¨nh t√†i kho·∫£n
    :param filepath: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u c·∫•u h√¨nh t√†i kho·∫£n
    :return: Boolean th√†nh c√¥ng/th·∫•t b·∫°i
    """
    return save_config(config, filepath)

def load_risk_config(risk_level=10):
    """
    T·∫£i c·∫•u h√¨nh r·ªßi ro
    
    :param risk_level: M·ª©c ƒë·ªô r·ªßi ro (10, 15, 20, 30)
    :return: Dict c·∫•u h√¨nh r·ªßi ro
    """
    filepath = f"risk_configs/risk_level_{risk_level}.json"
    
    # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho m·ª©c r·ªßi ro
    default_configs = {
        10: {
            "position_size_percent": 1,
            "stop_loss_percent": 1,
            "take_profit_percent": 2,
            "leverage": 1,
            "max_open_positions": 2,
            "max_daily_trades": 5,
            "risk_multipliers": {
                "stop_loss_multiplier": 1.0,
                "take_profit_multiplier": 1.0
            }
        },
        15: {
            "position_size_percent": 2,
            "stop_loss_percent": 1.5,
            "take_profit_percent": 3,
            "leverage": 2,
            "max_open_positions": 3,
            "max_daily_trades": 8,
            "risk_multipliers": {
                "stop_loss_multiplier": 1.0,
                "take_profit_multiplier": 1.0
            }
        },
        20: {
            "position_size_percent": 3,
            "stop_loss_percent": 2,
            "take_profit_percent": 4,
            "leverage": 3,
            "max_open_positions": 4,
            "max_daily_trades": 12,
            "risk_multipliers": {
                "stop_loss_multiplier": 1.0,
                "take_profit_multiplier": 1.0
            }
        },
        30: {
            "position_size_percent": 5,
            "stop_loss_percent": 3,
            "take_profit_percent": 6,
            "leverage": 5,
            "max_open_positions": 5,
            "max_daily_trades": 20,
            "risk_multipliers": {
                "stop_loss_multiplier": 1.0,
                "take_profit_multiplier": 1.0
            }
        }
    }
    
    # S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh ph√π h·ª£p v·ªõi m·ª©c r·ªßi ro
    default_config = default_configs.get(risk_level, default_configs[10])
    
    return load_config(filepath, default_config)

def load_telegram_config(filepath="configs/telegram_config.json"):
    """
    T·∫£i c·∫•u h√¨nh Telegram
    
    :param filepath: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh Telegram
    :return: Dict c·∫•u h√¨nh Telegram
    """
    default_config = {
        "notification_settings": {
            "enable_trade_signals": True,
            "enable_price_alerts": True,
            "enable_position_updates": True,
            "enable_sltp_alerts": True,
            "min_price_change_percent": 3.0,
            "price_alert_cooldown": 3600,
            "position_update_interval": 3600,
            "max_notifications_per_hour": 20,
            "quiet_hours_start": 0,
            "quiet_hours_end": 0
        },
        "templates": {
            "trade_signal": "üö® T√çN HI·ªÜU GIAO D·ªäCH M·ªöI üö®\n\nC·∫∑p: {symbol}\nH∆∞·ªõng: {side_emoji} {side}\nGi√° v√†o l·ªánh: {entry_price:.2f}\nStop Loss: {stop_loss:.2f}\nTake Profit: {take_profit:.2f}\nRisk/Reward: 1:{risk_reward:.2f}\nKhung th·ªùi gian: {timeframe}\nChi·∫øn l∆∞·ª£c: {strategy}\n{confidence_info}\n\nüí° ƒê·∫∑t SL/TP theo m·ª©c ƒë∆∞·ª£c g·ª£i √Ω ƒë·ªÉ ƒë·∫£m b·∫£o qu·∫£n l√Ω v·ªën!",
            "price_alert": "{emoji} C·∫¢NH B√ÅO GI√Å {symbol} {emoji}\n\nGi√° hi·ªán t·∫°i: {price}\nThay ƒë·ªïi: {change_prefix}{change_percent:.2f}%\nKhung th·ªùi gian: {timeframe}\n{reason}\n\nC·∫£nh b√°o n√†y d·ª±a tr√™n c√°c thay ƒë·ªïi ƒë√°ng k·ªÉ v·ªÅ gi√°.",
            "position_update": "üìä C·∫¨P NH·∫¨T V·ªä TH·∫æ\n\nV·ªã th·∫ø ƒëang m·ªü: {num_positions}\n\n{positions_info}\n\nS·ªë d∆∞ t√†i kho·∫£n: {account_balance:.2f} USDT\nT·ªïng v·ªã th·∫ø: {total_position_value:.2f} USDT\nT·ª∑ l·ªá margin: {margin_percent:.2f}%\n{pnl_info}",
            "sltp_update": "üîÑ C·∫¨P NH·∫¨T SL/TP üîÑ\n\nC·∫∑p: {symbol}\nH∆∞·ªõng: {side_emoji} {side}\n{sl_info}\n{tp_info}\n{reason}\n\nH·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh m·ª©c SL/TP.",
            "system_status": "ü§ñ B√ÅO C√ÅO TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG\n\n‚è±Ô∏è Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\nüí∞ S·ªë d∆∞ t√†i kho·∫£n: {account_balance:.2f} USDT\nüìä V·ªã th·∫ø ƒëang m·ªü: {open_positions}\nüîÑ Giao d·ªãch h√¥m nay: {daily_trades}\n{pnl_info}\n{system_load_info}\n\nüïí Th·ªùi gian b√°o c√°o: {timestamp}"
        },
        "emoji": {
            "long": "üü¢",
            "short": "üî¥",
            "price_up": "üìà",
            "price_down": "üìâ",
            "profit": "üìà",
            "loss": "üìâ",
            "success": "‚úÖ",
            "error": "‚ùå",
            "warning": "‚ö†Ô∏è",
            "info": "‚ÑπÔ∏è"
        }
    }
    
    return load_config(filepath, default_config)

if __name__ == "__main__":
    # C·∫•u h√¨nh logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Test load v√† save c·∫•u h√¨nh
    account_config = load_account_config()
    print("Account config:", account_config)
    
    risk_config = load_risk_config(20)
    print("Risk config:", risk_config)
    
    telegram_config = load_telegram_config()
    print("Telegram config:", telegram_config)