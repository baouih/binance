import os
import sys
import json
import time
import logging
import threading
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QWidget, QVBoxLayout, 
                            QHBoxLayout, QLabel, QPushButton, QTextEdit, QComboBox, 
                            QTableWidget, QTableWidgetItem, QHeaderView, QMessageBox,
                            QGroupBox, QRadioButton, QCheckBox, QProgressBar, QFrame,
                            QSplitter, QGridLayout, QScrollArea, QLineEdit)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal, QSize
from PyQt5.QtGui import QFont, QColor, QIcon, QPalette, QPixmap

# ƒê∆∞·ªùng d·∫´n t·ªõi c√°c modules c·∫ßn thi·∫øt kh√°c
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import c√°c module c·∫ßn thi·∫øt
try:
    from config_loader import load_config, save_config
    from api_data_validator import validate_api_credentials
    from advanced_telegram_notifier import TelegramNotifier
    from auto_sltp_manager import AutoSLTPManager
    from risk_manager import RiskManager
    from market_analyzer import MarketAnalyzer
    from trading_bot import TradingBot
    from position_manager import PositionManager
    from signal_generator import SignalGenerator
except ImportError as e:
    print(f"Import l·ªói: {e}")
    sys.exit(1)

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("trading_gui.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("EnhancedTradingGUI")

class BotWorker(QThread):
    """Thread ƒë·ªÉ ch·∫°y bot trong background v√† kh√¥ng l√†m ƒë∆° giao di·ªán"""
    update_signal = pyqtSignal(str)
    status_signal = pyqtSignal(str)
    position_update_signal = pyqtSignal(list)
    market_data_signal = pyqtSignal(dict)
    
    def __init__(self, config, risk_level):
        super().__init__()
        self.config = config
        self.risk_level = risk_level
        self.running = False
        self.bot = None
        self.telegram_notifier = None
        self.market_analyzer = None
        self.signal_generator = None
        self.position_manager = None
    
    def setup_bot(self):
        try:
            risk_config_path = f"risk_configs/risk_level_{self.risk_level}.json"
            if not os.path.exists(risk_config_path):
                self.update_signal.emit(f"Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh r·ªßi ro: {risk_config_path}")
                return False
            
            with open(risk_config_path, 'r') as f:
                risk_config = json.load(f)
            
            # Kh·ªüi t·∫°o c√°c components
            self.telegram_notifier = TelegramNotifier(
                token=os.environ.get("TELEGRAM_BOT_TOKEN"),
                chat_id=os.environ.get("TELEGRAM_CHAT_ID")
            )
            
            self.market_analyzer = MarketAnalyzer(
                api_key=os.environ.get("BINANCE_TESTNET_API_KEY"),
                api_secret=os.environ.get("BINANCE_TESTNET_API_SECRET"),
                testnet=True
            )
            
            self.signal_generator = SignalGenerator(
                market_analyzer=self.market_analyzer,
                config=self.config
            )
            
            self.position_manager = PositionManager(
                api_key=os.environ.get("BINANCE_TESTNET_API_KEY"),
                api_secret=os.environ.get("BINANCE_TESTNET_API_SECRET"),
                testnet=True,
                risk_config=risk_config
            )
            
            risk_manager = RiskManager(
                position_manager=self.position_manager,
                risk_config=risk_config
            )
            
            # Kh·ªüi t·∫°o bot
            self.bot = TradingBot(
                market_analyzer=self.market_analyzer,
                signal_generator=self.signal_generator,
                position_manager=self.position_manager,
                risk_manager=risk_manager,
                telegram_notifier=self.telegram_notifier,
                config=self.config
            )
            
            self.update_signal.emit("Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
            return True
        except Exception as e:
            self.update_signal.emit(f"L·ªói khi kh·ªüi t·∫°o bot: {str(e)}")
            logger.error(f"L·ªói khi kh·ªüi t·∫°o bot: {str(e)}")
            return False
    
    def run(self):
        self.running = True
        if not self.setup_bot():
            self.status_signal.emit("Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c bot")
            self.running = False
            return
        
        self.status_signal.emit("Bot ƒëang ch·∫°y")
        
        # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
        try:
            self.telegram_notifier.send_message(
                f"ü§ñ Bot b·∫Øt ƒë·∫ßu ch·∫°y v·ªõi c·∫•u h√¨nh r·ªßi ro {self.risk_level}% v√†o {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
            )
        except Exception as e:
            self.update_signal.emit(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c th√¥ng b√°o Telegram: {str(e)}")
        
        # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ ch·∫°y bot
        while self.running:
            try:
                # C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng
                market_data = self.market_analyzer.get_market_overview()
                self.market_data_signal.emit(market_data)
                
                # L·∫•y th√¥ng tin v·ªã th·∫ø
                positions = self.position_manager.get_all_positions()
                self.position_update_signal.emit(positions)
                
                # Ch·∫°y m·ªôt chu k·ª≥ c·ªßa bot
                bot_action = self.bot.run_cycle()
                if bot_action:
                    self.update_signal.emit(f"Bot action: {bot_action}")
                
                # T·∫°m d·ª´ng tr∆∞·ªõc khi ch·∫°y chu k·ª≥ ti·∫øp theo
                time.sleep(5)
            except Exception as e:
                self.update_signal.emit(f"L·ªói trong chu k·ª≥ c·ªßa bot: {str(e)}")
                time.sleep(10)  # T·∫°m d·ª´ng l√¢u h∆°n n·∫øu c√≥ l·ªói
        
        self.status_signal.emit("Bot ƒë√£ d·ª´ng")
    
    def stop(self):
        self.running = False
        if self.telegram_notifier:
            try:
                self.telegram_notifier.send_message(
                    f"üõë Bot ƒë√£ d·ª´ng v√†o {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
                )
            except:
                pass

class EnhancedTradingGUI(QMainWindow):
    """Giao di·ªán giao d·ªãch n√¢ng cao v·ªõi nhi·ªÅu tab v√† ch·ª©c nƒÉng"""
    
    def __init__(self):
        super().__init__()
        
        self.config = self.load_account_config()
        self.bot_worker = None
        
        self.init_ui()
    
    def load_account_config(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file"""
        try:
            with open("account_config.json", "r") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh: {str(e)}")
            # Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c
            return {
                "symbols": ["BTCUSDT", "ETHUSDT"],
                "timeframes": ["15m", "1h", "4h"],
                "strategy": "combined",
                "leverage": 5,
                "max_positions": 3
            }
    
    def save_account_config(self, config):
        """L∆∞u c·∫•u h√¨nh v√†o file"""
        try:
            with open("account_config.json", "w") as f:
                json.dump(config, f, indent=4)
            return True
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u c·∫•u h√¨nh: {str(e)}")
            return False
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        self.setWindowTitle("H·ªá th·ªëng Giao d·ªãch N√¢ng cao - v1.0")
        self.setGeometry(100, 100, 1200, 800)
        
        # T·∫°o main widget v√† layout
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        
        # T·∫°o header
        header_layout = QHBoxLayout()
        
        logo_label = QLabel("ü§ñ TRADING BOT")
        logo_label.setFont(QFont("Arial", 16, QFont.Bold))
        header_layout.addWidget(logo_label)
        
        header_layout.addStretch()
        
        status_layout = QHBoxLayout()
        self.status_label = QLabel("Tr·∫°ng th√°i: ƒê√£ d·ª´ng")
        self.status_label.setFont(QFont("Arial", 10))
        status_layout.addWidget(self.status_label)
        
        self.connection_status = QLabel("API: Ch∆∞a k·∫øt n·ªëi")
        self.connection_status.setFont(QFont("Arial", 10))
        status_layout.addWidget(self.connection_status)
        
        header_layout.addLayout(status_layout)
        main_layout.addLayout(header_layout)
        
        # T·∫°o tab widget
        self.tab_widget = QTabWidget()
        
        # T·∫°o c√°c tab
        self.create_dashboard_tab()
        self.create_market_analysis_tab()
        self.create_positions_tab()
        self.create_bot_log_tab()
        self.create_settings_tab()
        
        main_layout.addWidget(self.tab_widget)
        
        # Control panel
        control_layout = QHBoxLayout()
        
        # Risk selection
        risk_group = QGroupBox("C·∫•u h√¨nh r·ªßi ro")
        risk_layout = QHBoxLayout()
        
        self.risk_level_combo = QComboBox()
        self.risk_level_combo.addItems(["10", "15", "20", "30"])
        risk_layout.addWidget(QLabel("M·ª©c r·ªßi ro (%):"))
        risk_layout.addWidget(self.risk_level_combo)
        
        risk_group.setLayout(risk_layout)
        control_layout.addWidget(risk_group)
        
        # Bot control buttons
        self.start_button = QPushButton("B·∫Øt ƒë·∫ßu")
        self.start_button.clicked.connect(self.start_bot)
        control_layout.addWidget(self.start_button)
        
        self.stop_button = QPushButton("D·ª´ng")
        self.stop_button.clicked.connect(self.stop_bot)
        self.stop_button.setEnabled(False)
        control_layout.addWidget(self.stop_button)
        
        main_layout.addLayout(control_layout)
        
        # Set main layout
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        
        # Validate API credentials
        self.validate_api_credentials()
        
        # Set up timers for update
        self.setup_timers()
    
    def create_dashboard_tab(self):
        """T·∫°o tab t·ªïng quan"""
        dashboard_tab = QWidget()
        layout = QVBoxLayout()
        
        # Th√¥ng tin tr·∫°ng th√°i ch√≠nh
        status_group = QGroupBox("Tr·∫°ng th√°i h·ªá th·ªëng")
        status_layout = QGridLayout()
        
        self.api_status_label = QLabel("API Binance: Ch∆∞a k·∫øt n·ªëi")
        self.bot_status_label = QLabel("Bot giao d·ªãch: Kh√¥ng ho·∫°t ƒë·ªông")
        self.positions_count_label = QLabel("S·ªë v·ªã th·∫ø ƒëang m·ªü: 0")
        self.account_balance_label = QLabel("S·ªë d∆∞ t√†i kho·∫£n: 0 USDT")
        
        status_layout.addWidget(QLabel("Tr·∫°ng th√°i API:"), 0, 0)
        status_layout.addWidget(self.api_status_label, 0, 1)
        status_layout.addWidget(QLabel("Tr·∫°ng th√°i Bot:"), 1, 0)
        status_layout.addWidget(self.bot_status_label, 1, 1)
        status_layout.addWidget(QLabel("V·ªã th·∫ø ƒëang m·ªü:"), 2, 0)
        status_layout.addWidget(self.positions_count_label, 2, 1)
        status_layout.addWidget(QLabel("S·ªë d∆∞:"), 3, 0)
        status_layout.addWidget(self.account_balance_label, 3, 1)
        
        status_group.setLayout(status_layout)
        layout.addWidget(status_group)
        
        # Th·ªã tr∆∞·ªùng
        market_group = QGroupBox("T·ªïng quan th·ªã tr∆∞·ªùng")
        market_layout = QVBoxLayout()
        
        self.market_table = QTableWidget(0, 4)
        self.market_table.setHorizontalHeaderLabels(["Coin", "Gi√° hi·ªán t·∫°i", "Thay ƒë·ªïi 24h", "Kh·ªëi l∆∞·ª£ng"])
        self.market_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        market_layout.addWidget(self.market_table)
        market_group.setLayout(market_layout)
        layout.addWidget(market_group)
        
        # Th√¥ng b√°o m·ªõi nh·∫•t
        notification_group = QGroupBox("Th√¥ng b√°o g·∫ßn ƒë√¢y")
        notification_layout = QVBoxLayout()
        
        self.notification_text = QTextEdit()
        self.notification_text.setReadOnly(True)
        notification_layout.addWidget(self.notification_text)
        
        notification_group.setLayout(notification_layout)
        layout.addWidget(notification_group)
        
        dashboard_tab.setLayout(layout)
        self.tab_widget.addTab(dashboard_tab, "T·ªïng quan")
    
    def create_market_analysis_tab(self):
        """T·∫°o tab ph√¢n t√≠ch th·ªã tr∆∞·ªùng"""
        market_tab = QWidget()
        layout = QVBoxLayout()
        
        # Coin selection
        selection_layout = QHBoxLayout()
        selection_layout.addWidget(QLabel("Ch·ªçn coin:"))
        
        self.coin_combo = QComboBox()
        self.coin_combo.addItems(["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT"])
        selection_layout.addWidget(self.coin_combo)
        
        selection_layout.addWidget(QLabel("Khung th·ªùi gian:"))
        
        self.timeframe_combo = QComboBox()
        self.timeframe_combo.addItems(["15m", "1h", "4h", "1d"])
        selection_layout.addWidget(self.timeframe_combo)
        
        refresh_button = QPushButton("L√†m m·ªõi")
        refresh_button.clicked.connect(self.refresh_market_analysis)
        selection_layout.addWidget(refresh_button)
        
        layout.addLayout(selection_layout)
        
        # Market data
        market_data_group = QGroupBox("D·ªØ li·ªáu th·ªã tr∆∞·ªùng")
        market_data_layout = QGridLayout()
        
        self.price_label = QLabel("Gi√° hi·ªán t·∫°i: --")
        self.change_label = QLabel("Thay ƒë·ªïi 24h: --")
        self.volume_label = QLabel("Kh·ªëi l∆∞·ª£ng 24h: --")
        self.high_label = QLabel("Cao nh·∫•t 24h: --")
        self.low_label = QLabel("Th·∫•p nh·∫•t 24h: --")
        
        market_data_layout.addWidget(self.price_label, 0, 0)
        market_data_layout.addWidget(self.change_label, 0, 1)
        market_data_layout.addWidget(self.volume_label, 1, 0)
        market_data_layout.addWidget(self.high_label, 1, 1)
        market_data_layout.addWidget(self.low_label, 2, 0)
        
        market_data_group.setLayout(market_data_layout)
        layout.addWidget(market_data_group)
        
        # Technical analysis
        ta_group = QGroupBox("Ph√¢n t√≠ch k·ªπ thu·∫≠t")
        ta_layout = QVBoxLayout()
        
        self.ta_table = QTableWidget(0, 3)
        self.ta_table.setHorizontalHeaderLabels(["Ch·ªâ b√°o", "Gi√° tr·ªã", "T√≠n hi·ªáu"])
        self.ta_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        ta_layout.addWidget(self.ta_table)
        ta_group.setLayout(ta_layout)
        layout.addWidget(ta_group)
        
        # Signals
        signals_group = QGroupBox("T√≠n hi·ªáu giao d·ªãch")
        signals_layout = QVBoxLayout()
        
        self.signals_text = QTextEdit()
        self.signals_text.setReadOnly(True)
        signals_layout.addWidget(self.signals_text)
        
        signals_group.setLayout(signals_layout)
        layout.addWidget(signals_group)
        
        market_tab.setLayout(layout)
        self.tab_widget.addTab(market_tab, "Ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
    
    def create_positions_tab(self):
        """T·∫°o tab qu·∫£n l√Ω v·ªã th·∫ø"""
        positions_tab = QWidget()
        layout = QVBoxLayout()
        
        # Positions table
        self.positions_table = QTableWidget(0, 7)
        self.positions_table.setHorizontalHeaderLabels([
            "Coin", "Lo·∫°i", "Gi√° m·ªü", "SL", "TP", "L·ª£i nhu·∫≠n", "Thao t√°c"
        ])
        self.positions_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        layout.addWidget(self.positions_table)
        
        # Position control
        control_group = QGroupBox("Thao t√°c v·ªã th·∫ø")
        control_layout = QGridLayout()
        
        self.close_position_button = QPushButton("ƒê√≥ng v·ªã th·∫ø ƒë∆∞·ª£c ch·ªçn")
        self.close_position_button.clicked.connect(self.close_selected_position)
        
        self.close_all_positions_button = QPushButton("ƒê√≥ng t·∫•t c·∫£ v·ªã th·∫ø")
        self.close_all_positions_button.clicked.connect(self.close_all_positions)
        
        self.update_sl_tp_button = QPushButton("C·∫≠p nh·∫≠t SL/TP")
        self.update_sl_tp_button.clicked.connect(self.update_sl_tp)
        
        control_layout.addWidget(self.close_position_button, 0, 0)
        control_layout.addWidget(self.close_all_positions_button, 0, 1)
        control_layout.addWidget(self.update_sl_tp_button, 1, 0, 1, 2)
        
        control_group.setLayout(control_layout)
        layout.addWidget(control_group)
        
        positions_tab.setLayout(layout)
        self.tab_widget.addTab(positions_tab, "Qu·∫£n l√Ω v·ªã th·∫ø")
    
    def create_bot_log_tab(self):
        """T·∫°o tab log c·ªßa bot"""
        log_tab = QWidget()
        layout = QVBoxLayout()
        
        # Log text area
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)
        
        # Controls
        controls_layout = QHBoxLayout()
        
        clear_button = QPushButton("X√≥a log")
        clear_button.clicked.connect(self.clear_log)
        controls_layout.addWidget(clear_button)
        
        export_button = QPushButton("Xu·∫•t log")
        export_button.clicked.connect(self.export_log)
        controls_layout.addWidget(export_button)
        
        controls_layout.addStretch()
        
        self.auto_scroll_check = QCheckBox("T·ª± ƒë·ªông cu·ªôn")
        self.auto_scroll_check.setChecked(True)
        controls_layout.addWidget(self.auto_scroll_check)
        
        layout.addLayout(controls_layout)
        
        log_tab.setLayout(layout)
        self.tab_widget.addTab(log_tab, "Nh·∫≠t k√Ω Bot")
    
    def create_settings_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t"""
        settings_tab = QWidget()
        layout = QVBoxLayout()
        
        # API settings
        api_group = QGroupBox("C√†i ƒë·∫∑t API")
        api_layout = QGridLayout()
        
        api_layout.addWidget(QLabel("API Key v√† Secret s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng"), 0, 0, 1, 2)
        api_layout.addWidget(QLabel("BINANCE_TESTNET_API_KEY"), 1, 0)
        api_layout.addWidget(QLabel("BINANCE_TESTNET_API_SECRET"), 2, 0)
        
        self.test_api_button = QPushButton("Ki·ªÉm tra k·∫øt n·ªëi API")
        self.test_api_button.clicked.connect(self.validate_api_credentials)
        api_layout.addWidget(self.test_api_button, 3, 0, 1, 2)
        
        api_group.setLayout(api_layout)
        layout.addWidget(api_group)
        
        # Telegram settings
        telegram_group = QGroupBox("C√†i ƒë·∫∑t Telegram")
        telegram_layout = QGridLayout()
        
        telegram_layout.addWidget(QLabel("Th√¥ng b√°o Telegram s·∫Ω s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng:"), 0, 0, 1, 2)
        telegram_layout.addWidget(QLabel("TELEGRAM_BOT_TOKEN"), 1, 0)
        telegram_layout.addWidget(QLabel("TELEGRAM_CHAT_ID"), 2, 0)
        
        self.test_telegram_button = QPushButton("Ki·ªÉm tra k·∫øt n·ªëi Telegram")
        self.test_telegram_button.clicked.connect(self.test_telegram)
        telegram_layout.addWidget(self.test_telegram_button, 3, 0, 1, 2)
        
        telegram_group.setLayout(telegram_layout)
        layout.addWidget(telegram_group)
        
        # Trading settings
        trading_group = QGroupBox("C√†i ƒë·∫∑t giao d·ªãch")
        trading_layout = QGridLayout()
        
        trading_layout.addWidget(QLabel("Danh s√°ch coin (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y):"), 0, 0)
        self.symbols_input = QLineEdit()
        self.symbols_input.setText(",".join(self.config.get("symbols", ["BTCUSDT", "ETHUSDT"])))
        trading_layout.addWidget(self.symbols_input, 0, 1)
        
        trading_layout.addWidget(QLabel("Danh s√°ch khung th·ªùi gian:"), 1, 0)
        self.timeframes_input = QLineEdit()
        self.timeframes_input.setText(",".join(self.config.get("timeframes", ["15m", "1h", "4h"])))
        trading_layout.addWidget(self.timeframes_input, 1, 1)
        
        trading_layout.addWidget(QLabel("Chi·∫øn l∆∞·ª£c:"), 2, 0)
        self.strategy_combo = QComboBox()
        self.strategy_combo.addItems(["combined", "trend_following", "breakout", "mean_reversion"])
        self.strategy_combo.setCurrentText(self.config.get("strategy", "combined"))
        trading_layout.addWidget(self.strategy_combo, 2, 1)
        
        trading_layout.addWidget(QLabel("ƒê√≤n b·∫©y:"), 3, 0)
        self.leverage_combo = QComboBox()
        self.leverage_combo.addItems(["1", "3", "5", "10", "20"])
        self.leverage_combo.setCurrentText(str(self.config.get("leverage", 5)))
        trading_layout.addWidget(self.leverage_combo, 3, 1)
        
        trading_layout.addWidget(QLabel("S·ªë v·ªã th·∫ø t·ªëi ƒëa:"), 4, 0)
        self.max_positions_combo = QComboBox()
        self.max_positions_combo.addItems(["1", "2", "3", "5", "10"])
        self.max_positions_combo.setCurrentText(str(self.config.get("max_positions", 3)))
        trading_layout.addWidget(self.max_positions_combo, 4, 1)
        
        self.save_settings_button = QPushButton("L∆∞u c√†i ƒë·∫∑t")
        self.save_settings_button.clicked.connect(self.save_settings)
        trading_layout.addWidget(self.save_settings_button, 5, 0, 1, 2)
        
        trading_group.setLayout(trading_layout)
        layout.addWidget(trading_group)
        
        settings_tab.setLayout(layout)
        self.tab_widget.addTab(settings_tab, "C√†i ƒë·∫∑t")
    
    def setup_timers(self):
        """C√†i ƒë·∫∑t c√°c timer ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán"""
        # Timer ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian th·ª±c
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_ui)
        self.update_timer.start(5000)  # 5 gi√¢y c·∫≠p nh·∫≠t m·ªôt l·∫ßn
    
    def update_ui(self):
        """C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng"""
        # C·∫≠p nh·∫≠t b·∫£ng th·ªã tr∆∞·ªùng (c√≥ th·ªÉ c·∫≠p nh·∫≠t trong th·ª±c t·∫ø)
        pass
    
    def validate_api_credentials(self):
        """Ki·ªÉm tra API credentials"""
        try:
            api_key = os.environ.get("BINANCE_TESTNET_API_KEY")
            api_secret = os.environ.get("BINANCE_TESTNET_API_SECRET")
            
            if not api_key or not api_secret:
                self.connection_status.setText("API: Thi·∫øu th√¥ng tin")
                self.api_status_label.setText("API Binance: Thi·∫øu th√¥ng tin")
                return False
            
            # Ki·ªÉm tra API credentials
            is_valid = validate_api_credentials(api_key, api_secret, testnet=True)
            
            if is_valid:
                self.connection_status.setText("API: ƒê√£ k·∫øt n·ªëi")
                self.api_status_label.setText("API Binance: ƒê√£ k·∫øt n·ªëi")
                return True
            else:
                self.connection_status.setText("API: K·∫øt n·ªëi th·∫•t b·∫°i")
                self.api_status_label.setText("API Binance: K·∫øt n·ªëi th·∫•t b·∫°i")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi ki·ªÉm tra API credentials: {str(e)}")
            self.connection_status.setText("API: L·ªói k·∫øt n·ªëi")
            self.api_status_label.setText("API Binance: L·ªói k·∫øt n·ªëi")
            return False
    
    def start_bot(self):
        """B·∫Øt ƒë·∫ßu ch·∫°y bot"""
        if self.bot_worker and self.bot_worker.isRunning():
            QMessageBox.warning(self, "C·∫£nh b√°o", "Bot ƒëang ch·∫°y!")
            return
        
        # Ki·ªÉm tra API credentials
        if not self.validate_api_credentials():
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API Binance. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p.")
            return
        
        # L·∫•y level r·ªßi ro
        risk_level = self.risk_level_combo.currentText()
        
        # T·∫°o bot worker v√† k·∫øt n·ªëi signals
        self.bot_worker = BotWorker(self.config, risk_level)
        self.bot_worker.update_signal.connect(self.update_log)
        self.bot_worker.status_signal.connect(self.update_bot_status)
        self.bot_worker.position_update_signal.connect(self.update_positions)
        self.bot_worker.market_data_signal.connect(self.update_market_data)
        
        # B·∫Øt ƒë·∫ßu ch·∫°y bot
        self.bot_worker.start()
        
        # C·∫≠p nh·∫≠t UI
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.update_log("Bot ƒëang kh·ªüi ƒë·ªông...")
    
    def stop_bot(self):
        """D·ª´ng bot"""
        if not self.bot_worker or not self.bot_worker.isRunning():
            QMessageBox.warning(self, "C·∫£nh b√°o", "Bot kh√¥ng ch·∫°y!")
            return
        
        # D·ª´ng bot
        self.bot_worker.stop()
        self.update_log("ƒêang d·ª´ng bot...")
        
        # C·∫≠p nh·∫≠t UI
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
    
    def update_log(self, message):
        """C·∫≠p nh·∫≠t log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        self.log_text.append(log_message)
        
        # Th√™m v√†o th√¥ng b√°o n·∫øu l√† th√¥ng b√°o quan tr·ªçng
        if "l·ªói" in message.lower() or "error" in message.lower() or "th√†nh c√¥ng" in message.lower():
            self.notification_text.append(log_message)
        
        # T·ª± ƒë·ªông cu·ªôn
        if self.auto_scroll_check.isChecked():
            self.log_text.verticalScrollBar().setValue(self.log_text.verticalScrollBar().maximum())
    
    def update_bot_status(self, status):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i bot"""
        self.status_label.setText(f"Tr·∫°ng th√°i: {status}")
        self.bot_status_label.setText(f"Bot giao d·ªãch: {status}")
    
    def update_positions(self, positions):
        """C·∫≠p nh·∫≠t b·∫£ng v·ªã th·∫ø"""
        # X√≥a t·∫•t c·∫£ h√†ng hi·ªán t·∫°i
        self.positions_table.setRowCount(0)
        
        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v·ªã th·∫ø
        self.positions_count_label.setText(f"S·ªë v·ªã th·∫ø ƒëang m·ªü: {len(positions)}")
        
        # Th√™m c√°c v·ªã th·∫ø m·ªõi
        for position in positions:
            row_position = self.positions_table.rowCount()
            self.positions_table.insertRow(row_position)
            
            # Th√™m th√¥ng tin v·ªã th·∫ø
            self.positions_table.setItem(row_position, 0, QTableWidgetItem(position.get("symbol", "")))
            self.positions_table.setItem(row_position, 1, QTableWidgetItem("LONG" if position.get("side") == "BUY" else "SHORT"))
            self.positions_table.setItem(row_position, 2, QTableWidgetItem(str(position.get("entry_price", 0))))
            self.positions_table.setItem(row_position, 3, QTableWidgetItem(str(position.get("stop_loss", 0))))
            self.positions_table.setItem(row_position, 4, QTableWidgetItem(str(position.get("take_profit", 0))))
            
            # T√≠nh l·ª£i nhu·∫≠n
            profit = position.get("unrealized_profit", 0)
            profit_item = QTableWidgetItem(f"{profit:.2f} USDT")
            profit_item.setForeground(QColor("green") if profit >= 0 else QColor("red"))
            self.positions_table.setItem(row_position, 5, profit_item)
            
            # Th√™m n√∫t ƒë√≥ng v·ªã th·∫ø
            close_button = QPushButton("ƒê√≥ng")
            close_button.clicked.connect(lambda _, pos=position: self.close_position(pos))
            self.positions_table.setCellWidget(row_position, 6, close_button)
    
    def update_market_data(self, market_data):
        """C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng"""
        # C·∫≠p nh·∫≠t b·∫£ng th·ªã tr∆∞·ªùng
        self.market_table.setRowCount(0)
        
        for symbol, data in market_data.items():
            row_position = self.market_table.rowCount()
            self.market_table.insertRow(row_position)
            
            self.market_table.setItem(row_position, 0, QTableWidgetItem(symbol))
            self.market_table.setItem(row_position, 1, QTableWidgetItem(str(data.get("price", 0))))
            
            # Thay ƒë·ªïi 24h
            change = data.get("price_change_percent", 0)
            change_item = QTableWidgetItem(f"{change:.2f}%")
            change_item.setForeground(QColor("green") if change >= 0 else QColor("red"))
            self.market_table.setItem(row_position, 2, change_item)
            
            self.market_table.setItem(row_position, 3, QTableWidgetItem(str(data.get("volume", 0))))
        
        # C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n n·∫øu c√≥
        balance = market_data.get("account_balance", 0)
        if balance:
            self.account_balance_label.setText(f"S·ªë d∆∞ t√†i kho·∫£n: {balance:.2f} USDT")
    
    def refresh_market_analysis(self):
        """L√†m m·ªõi ph√¢n t√≠ch th·ªã tr∆∞·ªùng"""
        selected_coin = self.coin_combo.currentText()
        selected_timeframe = self.timeframe_combo.currentText()
        
        self.update_log(f"ƒêang ph√¢n t√≠ch {selected_coin} tr√™n khung th·ªùi gian {selected_timeframe}...")
        
        try:
            # Trong th·ª±c t·∫ø, s·∫Ω g·ªçi t·ªõi market analyzer
            # Gi·∫£ l·∫≠p d·ªØ li·ªáu cho giao di·ªán
            self.price_label.setText(f"Gi√° hi·ªán t·∫°i: 50000")
            self.change_label.setText(f"Thay ƒë·ªïi 24h: +2.5%")
            self.volume_label.setText(f"Kh·ªëi l∆∞·ª£ng 24h: 15000 BTC")
            self.high_label.setText(f"Cao nh·∫•t 24h: 51000")
            self.low_label.setText(f"Th·∫•p nh·∫•t 24h: 49000")
            
            # C·∫≠p nh·∫≠t b·∫£ng ph√¢n t√≠ch k·ªπ thu·∫≠t
            self.ta_table.setRowCount(0)
            
            # Th√™m c√°c ch·ªâ b√°o gi·∫£ l·∫≠p
            indicators = [
                ("RSI(14)", "65", "Trung t√≠nh"),
                ("MACD", "D∆∞∆°ng", "Mua"),
                ("MA(50) vs MA(200)", "Ph√≠a tr√™n", "T√≠n hi·ªáu mua"),
                ("Bollinger Bands", "C·∫≠n tr√™n", "Qu√° mua"),
                ("Stochastic", "80", "Qu√° mua")
            ]
            
            for indicator in indicators:
                row_position = self.ta_table.rowCount()
                self.ta_table.insertRow(row_position)
                
                self.ta_table.setItem(row_position, 0, QTableWidgetItem(indicator[0]))
                self.ta_table.setItem(row_position, 1, QTableWidgetItem(indicator[1]))
                
                signal_item = QTableWidgetItem(indicator[2])
                if "mua" in indicator[2].lower():
                    signal_item.setForeground(QColor("green"))
                elif "b√°n" in indicator[2].lower():
                    signal_item.setForeground(QColor("red"))
                
                self.ta_table.setItem(row_position, 2, signal_item)
            
            # C·∫≠p nh·∫≠t t√≠n hi·ªáu
            self.signals_text.setText(f"Ph√¢n t√≠ch {selected_coin} tr√™n khung th·ªùi gian {selected_timeframe}:\n\n")
            self.signals_text.append("‚Ä¢ RSI(14) ƒëang ·ªü m·ª©c 65, cho th·∫•y th·ªã tr∆∞·ªùng ƒëang trung t√≠nh\n")
            self.signals_text.append("‚Ä¢ MACD hi·ªán ƒëang d∆∞∆°ng, cho t√≠n hi·ªáu mua\n")
            self.signals_text.append("‚Ä¢ MA(50) ƒëang n·∫±m tr√™n MA(200), x√°c nh·∫≠n xu h∆∞·ªõng tƒÉng\n")
            self.signals_text.append("‚Ä¢ Bollinger Bands cho th·∫•y gi√° ƒëang ti·∫øp c·∫≠n c·∫≠n tr√™n, c√≥ th·ªÉ qu√° mua\n")
            self.signals_text.append("‚Ä¢ Stochastic ·ªü m·ª©c 80, c≈©ng cho th·∫•y th·ªã tr∆∞·ªùng ƒëang qu√° mua\n\n")
            self.signals_text.append("K·∫øt lu·∫≠n: Xu h∆∞·ªõng tƒÉng trong trung h·∫°n, nh∆∞ng ng·∫Øn h·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh.")
            
        except Exception as e:
            self.update_log(f"L·ªói khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {str(e)}")
    
    def close_selected_position(self):
        """ƒê√≥ng v·ªã th·∫ø ƒë∆∞·ª£c ch·ªçn"""
        selected_rows = self.positions_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn v·ªã th·∫ø ƒë·ªÉ ƒë√≥ng.")
            return
        
        # L·∫•y v·ªã th·∫ø d·ª±a v√†o row ƒë∆∞·ª£c ch·ªçn
        selected_row = selected_rows[0].row()
        symbol = self.positions_table.item(selected_row, 0).text()
        side = self.positions_table.item(selected_row, 1).text()
        
        msg = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if msg == QMessageBox.Yes:
            # Trong th·ª±c t·∫ø, s·∫Ω g·ªçi position manager ƒë·ªÉ ƒë√≥ng v·ªã th·∫ø
            self.update_log(f"ƒêang ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}...")
            QMessageBox.information(self, "Th√¥ng b√°o", f"ƒê√£ ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}.")
    
    def close_all_positions(self):
        """ƒê√≥ng t·∫•t c·∫£ v·ªã th·∫ø"""
        if self.positions_table.rowCount() == 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒë·ªÉ ƒë√≥ng.")
            return
        
        msg = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng T·∫§T C·∫¢ v·ªã th·∫ø ƒëang m·ªü?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if msg == QMessageBox.Yes:
            # Trong th·ª±c t·∫ø, s·∫Ω g·ªçi position manager ƒë·ªÉ ƒë√≥ng t·∫•t c·∫£ v·ªã th·∫ø
            self.update_log("ƒêang ƒë√≥ng t·∫•t c·∫£ v·ªã th·∫ø...")
            QMessageBox.information(self, "Th√¥ng b√°o", "ƒê√£ ƒë√≥ng t·∫•t c·∫£ v·ªã th·∫ø.")
    
    def close_position(self, position):
        """ƒê√≥ng m·ªôt v·ªã th·∫ø c·ª• th·ªÉ"""
        symbol = position.get("symbol", "")
        side = "LONG" if position.get("side") == "BUY" else "SHORT"
        
        msg = QMessageBox.question(
            self,
            "X√°c nh·∫≠n",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if msg == QMessageBox.Yes:
            # Trong th·ª±c t·∫ø, s·∫Ω g·ªçi position manager ƒë·ªÉ ƒë√≥ng v·ªã th·∫ø
            self.update_log(f"ƒêang ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}...")
            QMessageBox.information(self, "Th√¥ng b√°o", f"ƒê√£ ƒë√≥ng v·ªã th·∫ø {side} tr√™n {symbol}.")
    
    def update_sl_tp(self):
        """C·∫≠p nh·∫≠t Stop Loss v√† Take Profit"""
        selected_rows = self.positions_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn v·ªã th·∫ø ƒë·ªÉ c·∫≠p nh·∫≠t SL/TP.")
            return
        
        # Trong th·ª±c t·∫ø, s·∫Ω hi·ªÉn th·ªã dialog ƒë·ªÉ nh·∫≠p SL/TP m·ªõi
        QMessageBox.information(self, "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn", "Ch·ª©c nƒÉng c·∫≠p nh·∫≠t SL/TP s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong phi√™n b·∫£n t·ªõi.")
    
    def clear_log(self):
        """X√≥a log"""
        self.log_text.clear()
    
    def export_log(self):
        """Xu·∫•t log ra file"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"bot_log_{timestamp}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write(self.log_text.toPlainText())
            
            QMessageBox.information(self, "Th√¥ng b√°o", f"ƒê√£ xu·∫•t log ra file {filename}.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t log: {str(e)}")
    
    def test_telegram(self):
        """Ki·ªÉm tra k·∫øt n·ªëi Telegram"""
        try:
            token = os.environ.get("TELEGRAM_BOT_TOKEN")
            chat_id = os.environ.get("TELEGRAM_CHAT_ID")
            
            if not token or not chat_id:
                QMessageBox.critical(self, "L·ªói", "Thi·∫øu th√¥ng tin TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID.")
                return
            
            telegram = TelegramNotifier(token=token, chat_id=chat_id)
            telegram.send_message("ü§ñ ƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra t·ª´ Trading Bot.")
            
            QMessageBox.information(self, "Th√¥ng b√°o", "ƒê√£ g·ª≠i tin nh·∫Øn ki·ªÉm tra t·ªõi Telegram. Vui l√≤ng ki·ªÉm tra ƒë·ªÉ x√°c nh·∫≠n.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Telegram: {str(e)}")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t"""
        try:
            # C·∫≠p nh·∫≠t config t·ª´ UI
            self.config["symbols"] = [s.strip() for s in self.symbols_input.text().split(",") if s.strip()]
            self.config["timeframes"] = [t.strip() for t in self.timeframes_input.text().split(",") if t.strip()]
            self.config["strategy"] = self.strategy_combo.currentText()
            self.config["leverage"] = int(self.leverage_combo.currentText())
            self.config["max_positions"] = int(self.max_positions_combo.currentText())
            
            # L∆∞u v√†o file
            if self.save_account_config(self.config):
                QMessageBox.information(self, "Th√¥ng b√°o", "ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng.")
            else:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")

def main():
    app = QApplication(sys.argv)
    window = EnhancedTradingGUI()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()