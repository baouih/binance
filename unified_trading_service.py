#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Unified Trading Service
-----------------------
D·ªãch v·ª• h·ª£p nh·∫•t qu·∫£n l√Ω c√°c ch·ª©c nƒÉng giao d·ªãch ƒë·ªÉ t·ªëi ∆∞u t√†i nguy√™n.
K·∫øt h·ª£p c√°c d·ªãch v·ª•:
1. Auto SLTP Manager (Qu·∫£n l√Ω Stop Loss v√† Take Profit t·ª± ƒë·ªông)
2. Trailing Stop Manager (Qu·∫£n l√Ω Trailing Stop)
3. Market Monitor (Theo d√µi th·ªã tr∆∞·ªùng v√† c·∫£nh b√°o)

T√°c gi·∫£: Trading Bot Team
Ph√°t tri·ªÉn: 2025
"""

import os
import sys
import time
import json
import signal
import logging
import threading
import schedule
from datetime import datetime, timedelta
import importlib

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("unified_service.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("unified_service")

# Th√¥ng tin phi√™n b·∫£n
VERSION = "1.0.0"

# ƒê∆∞·ªùng d·∫´n file c·∫•u h√¨nh
CONFIG_FILE = 'account_config.json'
PID_FILE = 'unified_trading_service.pid'
ACTIVE_POSITIONS_FILE = 'active_positions.json'

# Bi·∫øn ƒëi·ªÅu khi·ªÉn
running = True
services = {}
scheduler = None
api_client = None

def load_config():
    """T·∫£i c·∫•u h√¨nh t·ª´ file"""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh: {str(e)}")
        return {}

def save_pid():
    """L∆∞u PID c·ªßa process hi·ªán t·∫°i"""
    try:
        with open(PID_FILE, 'w') as f:
            f.write(str(os.getpid()))
        logger.info(f"ƒê√£ l∆∞u PID: {os.getpid()}")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ l∆∞u PID: {str(e)}")

def signal_handler(sig, frame):
    """X·ª≠ l√Ω t√≠n hi·ªáu tho√°t"""
    global running
    logger.info(f"ƒê√£ nh·∫≠n t√≠n hi·ªáu {sig}, ƒëang d·ª´ng d·ªãch v·ª•...")
    running = False

def import_module_dynamically(module_name):
    """Import m√¥-ƒëun m·ªôt c√°ch ƒë·ªông"""
    try:
        if module_name in sys.modules:
            # N·∫øu module ƒë√£ ƒë∆∞·ª£c import tr∆∞·ªõc ƒë√≥, reload ƒë·ªÉ c·∫≠p nh·∫≠t
            module = importlib.import_module(module_name)
            module = importlib.reload(module)
        else:
            # Import module m·ªõi
            module = importlib.import_module(module_name)
        logger.info(f"ƒê√£ import m√¥-ƒëun: {module_name}")
        return module
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ import m√¥-ƒëun {module_name}: {str(e)}")
        return None

def initialize_api_client():
    """Kh·ªüi t·∫°o API client"""
    global api_client
    
    try:
        # Import m√¥-ƒëun BinanceAPI
        binance_api_module = import_module_dynamically('binance_api')
        if not binance_api_module:
            logger.error("Kh√¥ng th·ªÉ import binance_api module")
            return False
        
        # L·∫•y API key v√† secret t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        api_key = os.environ.get("BINANCE_TESTNET_API_KEY", "")
        api_secret = os.environ.get("BINANCE_TESTNET_API_SECRET", "")
        
        # Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng BinanceAPI
        BinanceAPI = getattr(binance_api_module, 'BinanceAPI')
        api_client = BinanceAPI(api_key=api_key, api_secret=api_secret, testnet=True)
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        if api_client.test_connection():
            logger.info("K·∫øt n·ªëi API th√†nh c√¥ng")
            return True
        else:
            logger.error("K·∫øt n·ªëi API th·∫•t b·∫°i")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi t·∫°o API client: {str(e)}")
        return False

def initialize_telegram():
    """Kh·ªüi t·∫°o Telegram notifier"""
    try:
        telegram_module = import_module_dynamically('telegram_notifier')
        if telegram_module:
            # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
            telegram_module.send_message(
                message=f"<b>ü§ñ D·ªãch v·ª• h·ª£p nh·∫•t ƒë√£ kh·ªüi ƒë·ªông</b>\n\n"
                f"<i>Phi√™n b·∫£n:</i> {VERSION}\n"
                f"<i>Th·ªùi gian:</i> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"<i>PID:</i> {os.getpid()}"
            )
            logger.info("ƒê√£ kh·ªüi t·∫°o Telegram notifier")
            return True
        return False
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o Telegram notifier: {str(e)}")
        return False

def start_sltp_manager():
    """Kh·ªüi ƒë·ªông v√† qu·∫£n l√Ω d·ªãch v·ª• Auto SLTP Manager"""
    try:
        # T·∫£i c·∫•u h√¨nh
        config = load_config()
        sltp_config = config.get('auto_sltp_settings', {})
        enabled = sltp_config.get('enabled', False)
        check_interval = sltp_config.get('check_interval', 30)
        
        if not enabled:
            logger.info("Auto SLTP Manager ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh")
            return False
        
        # Thi·∫øt l·∫≠p l√™n l·ªãch ki·ªÉm tra
        def check_and_update_sltp():
            """Ki·ªÉm tra v√† c·∫≠p nh·∫≠t SL/TP cho c√°c v·ªã th·∫ø"""
            try:
                # L·∫•y danh s√°ch v·ªã th·∫ø ƒëang m·ªü
                positions = api_client.get_positions()
                active_positions = [p for p in positions if abs(float(p.get('positionAmt', 0))) > 0]
                
                if not active_positions:
                    logger.info("Kh√¥ng c√≥ v·ªã th·∫ø ƒëang m·ªü ƒë·ªÉ c·∫≠p nh·∫≠t SL/TP")
                    return
                
                # L∆∞u v·ªã th·∫ø active
                try:
                    with open(ACTIVE_POSITIONS_FILE, 'w') as f:
                        json.dump(active_positions, f, indent=2)
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ l∆∞u active positions: {str(e)}")
                
                # X·ª≠ l√Ω t·ª´ng v·ªã th·∫ø
                for position in active_positions:
                    symbol = position.get('symbol', '')
                    position_amt = float(position.get('positionAmt', 0))
                    entry_price = float(position.get('entryPrice', 0))
                    
                    if position_amt == 0 or entry_price == 0:
                        continue
                    
                    # X√°c ƒë·ªãnh h∆∞·ªõng v·ªã th·∫ø
                    position_side = 'LONG' if position_amt > 0 else 'SHORT'
                    
                    # T√≠nh Stop Loss v√† Take Profit d·ª±a tr√™n c·∫•u h√¨nh
                    risk_reward_ratio = sltp_config.get('risk_reward_ratio', 2.0)
                    stop_loss_percent = sltp_config.get('stop_loss_percent', 1.0)
                    
                    # T√≠nh gi√° SL v√† TP
                    if position_side == 'LONG':
                        stop_loss = entry_price * (1 - stop_loss_percent / 100)
                        take_profit = entry_price * (1 + (stop_loss_percent * risk_reward_ratio) / 100)
                    else:  # SHORT
                        stop_loss = entry_price * (1 + stop_loss_percent / 100)
                        take_profit = entry_price * (1 - (stop_loss_percent * risk_reward_ratio) / 100)
                    
                    # ƒê·∫∑t SL v√† TP
                    result = api_client.set_stop_loss_take_profit(
                        symbol=symbol,
                        position_side=position_side,
                        stop_loss_price=stop_loss,
                        take_profit_price=take_profit
                    )
                    
                    if result:
                        logger.info(f"ƒê√£ c·∫≠p nh·∫≠t SL/TP cho {symbol} {position_side}: SL={stop_loss}, TP={take_profit}")
                    else:
                        logger.warning(f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t SL/TP cho {symbol} {position_side}")
            
            except Exception as e:
                logger.error(f"L·ªói khi ki·ªÉm tra v√† c·∫≠p nh·∫≠t SL/TP: {str(e)}")
        
        # Th·ª±c hi·ªán ngay l·∫≠p t·ª©c m·ªôt l·∫ßn
        check_and_update_sltp()
        
        # L√™n l·ªãch th·ª±c hi·ªán ƒë·ªãnh k·ª≥
        schedule.every(check_interval).seconds.do(check_and_update_sltp)
        logger.info(f"Auto SLTP ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi kho·∫£ng th·ªùi gian ki·ªÉm tra {check_interval} gi√¢y")
        
        return True
    
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Auto SLTP Manager: {str(e)}")
        return False

def start_trailing_stop_manager():
    """Kh·ªüi ƒë·ªông v√† qu·∫£n l√Ω d·ªãch v·ª• Trailing Stop Manager"""
    try:
        # T·∫£i c·∫•u h√¨nh
        config = load_config()
        trailing_config = config.get('trailing_stop_settings', {})
        enabled = trailing_config.get('enabled', False)
        check_interval = trailing_config.get('check_interval', 15)
        activation_percent = trailing_config.get('activation_percent', 0.5)
        trailing_percent = trailing_config.get('trailing_percent', 0.2)
        
        if not enabled:
            logger.info("Trailing Stop Manager ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh")
            return False
        
        # L∆∞u tr·ªØ trailing stops cho m·ªói v·ªã th·∫ø
        trailing_stops = {}
        
        # Thi·∫øt l·∫≠p l√™n l·ªãch ki·ªÉm tra
        def check_and_update_trailing_stop():
            """Ki·ªÉm tra v√† c·∫≠p nh·∫≠t trailing stop cho c√°c v·ªã th·∫ø"""
            try:
                # L·∫•y danh s√°ch v·ªã th·∫ø ƒëang m·ªü
                positions = api_client.get_positions()
                active_positions = [p for p in positions if abs(float(p.get('positionAmt', 0))) > 0]
                
                if not active_positions:
                    logger.debug("Kh√¥ng c√≥ v·ªã th·∫ø ƒëang m·ªü ƒë·ªÉ c·∫≠p nh·∫≠t trailing stop")
                    return
                
                # X·ª≠ l√Ω t·ª´ng v·ªã th·∫ø
                for position in active_positions:
                    symbol = position.get('symbol', '')
                    position_amt = float(position.get('positionAmt', 0))
                    entry_price = float(position.get('entryPrice', 0))
                    mark_price = float(position.get('markPrice', 0))
                    
                    if position_amt == 0 or entry_price == 0:
                        continue
                    
                    # X√°c ƒë·ªãnh h∆∞·ªõng v·ªã th·∫ø
                    position_side = 'LONG' if position_amt > 0 else 'SHORT'
                    
                    # L·∫•y gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i
                    current_price = api_client.get_symbol_price(symbol)
                    if not current_price:
                        logger.warning(f"Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i cho {symbol}")
                        continue
                    
                    # Ki·ªÉm tra xem v·ªã th·∫ø c√≥ trong trailing_stops ch∆∞a
                    position_key = f"{symbol}_{position_side}"
                    if position_key not in trailing_stops:
                        trailing_stops[position_key] = {
                            'activated': False,
                            'trailing_stop': None
                        }
                    
                    # Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫°t ng∆∞·ª°ng k√≠ch ho·∫°t
                    is_activated = trailing_stops[position_key]['activated']
                    current_trailing_stop = trailing_stops[position_key]['trailing_stop']
                    
                    # T√≠nh to√°n m·ª©c l·ª£i nhu·∫≠n hi·ªán t·∫°i
                    profit_percent = 0
                    if position_side == 'LONG':
                        profit_percent = (current_price - entry_price) / entry_price * 100
                    else:  # SHORT
                        profit_percent = (entry_price - current_price) / entry_price * 100
                    
                    # N·∫øu ch∆∞a k√≠ch ho·∫°t, ki·ªÉm tra xem ƒë√£ ƒë·∫°t ng∆∞·ª°ng ch∆∞a
                    if not is_activated:
                        if profit_percent >= activation_percent:
                            trailing_stops[position_key]['activated'] = True
                            # ƒê·∫∑t trailing stop ban ƒë·∫ßu
                            if position_side == 'LONG':
                                trailing_stop = current_price * (1 - trailing_percent / 100)
                            else:  # SHORT
                                trailing_stop = current_price * (1 + trailing_percent / 100)
                            
                            trailing_stops[position_key]['trailing_stop'] = trailing_stop
                            logger.info(f"ƒê√£ k√≠ch ho·∫°t trailing stop cho {symbol} {position_side} t·∫°i {trailing_stop}")
                    
                    # N·∫øu ƒë√£ k√≠ch ho·∫°t, c·∫≠p nh·∫≠t trailing stop theo gi√° th·ªã tr∆∞·ªùng
                    elif is_activated and current_trailing_stop is not None:
                        # C·∫≠p nh·∫≠t trailing stop theo gi√° m·ªõi
                        if position_side == 'LONG':
                            # N·∫øu gi√° tƒÉng, c·∫≠p nh·∫≠t trailing stop
                            new_trailing_stop = current_price * (1 - trailing_percent / 100)
                            if new_trailing_stop > current_trailing_stop:
                                trailing_stops[position_key]['trailing_stop'] = new_trailing_stop
                                logger.info(f"ƒê√£ c·∫≠p nh·∫≠t trailing stop cho {symbol} {position_side} l√™n {new_trailing_stop}")
                            
                            # Ki·ªÉm tra n·∫øu gi√° gi·∫£m xu·ªëng d∆∞·ªõi trailing stop, ƒë√≥ng v·ªã th·∫ø
                            if current_price <= current_trailing_stop:
                                # ƒê√≥ng v·ªã th·∫ø
                                result = api_client.close_position(symbol=symbol, position_side=position_side)
                                if result:
                                    logger.info(f"ƒê√£ ƒë√≥ng v·ªã th·∫ø {symbol} {position_side} theo trailing stop t·∫°i {current_price}")
                                    # X√≥a kh·ªèi danh s√°ch theo d√µi
                                    trailing_stops.pop(position_key, None)
                                else:
                                    logger.warning(f"Kh√¥ng th·ªÉ ƒë√≥ng v·ªã th·∫ø {symbol} {position_side} theo trailing stop")
                        
                        else:  # SHORT
                            # N·∫øu gi√° gi·∫£m, c·∫≠p nh·∫≠t trailing stop
                            new_trailing_stop = current_price * (1 + trailing_percent / 100)
                            if new_trailing_stop < current_trailing_stop:
                                trailing_stops[position_key]['trailing_stop'] = new_trailing_stop
                                logger.info(f"ƒê√£ c·∫≠p nh·∫≠t trailing stop cho {symbol} {position_side} xu·ªëng {new_trailing_stop}")
                            
                            # Ki·ªÉm tra n·∫øu gi√° tƒÉng l√™n tr√™n trailing stop, ƒë√≥ng v·ªã th·∫ø
                            if current_price >= current_trailing_stop:
                                # ƒê√≥ng v·ªã th·∫ø
                                result = api_client.close_position(symbol=symbol, position_side=position_side)
                                if result:
                                    logger.info(f"ƒê√£ ƒë√≥ng v·ªã th·∫ø {symbol} {position_side} theo trailing stop t·∫°i {current_price}")
                                    # X√≥a kh·ªèi danh s√°ch theo d√µi
                                    trailing_stops.pop(position_key, None)
                                else:
                                    logger.warning(f"Kh√¥ng th·ªÉ ƒë√≥ng v·ªã th·∫ø {symbol} {position_side} theo trailing stop")
            
            except Exception as e:
                logger.error(f"L·ªói khi ki·ªÉm tra v√† c·∫≠p nh·∫≠t trailing stop: {str(e)}")
        
        # Th·ª±c hi·ªán ngay l·∫≠p t·ª©c m·ªôt l·∫ßn
        check_and_update_trailing_stop()
        
        # L√™n l·ªãch th·ª±c hi·ªán ƒë·ªãnh k·ª≥
        schedule.every(check_interval).seconds.do(check_and_update_trailing_stop)
        logger.info(f"Trailing Stop c·∫•u h√¨nh v·ªõi k√≠ch ho·∫°t {activation_percent}%, duy tr√¨ {trailing_percent}%, ki·ªÉm tra m·ªói {check_interval}s")
        
        return True
    
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Trailing Stop Manager: {str(e)}")
        return False

def start_market_monitor():
    """Kh·ªüi ƒë·ªông v√† qu·∫£n l√Ω d·ªãch v·ª• Market Monitor"""
    try:
        # T·∫£i c·∫•u h√¨nh
        config = load_config()
        market_monitor_config = config.get('market_monitor_settings', {})
        enabled = market_monitor_config.get('enabled', False)
        check_interval = market_monitor_config.get('check_interval', 60)
        symbols = market_monitor_config.get('symbols', ['BTCUSDT', 'ETHUSDT', 'SOLUSDT'])
        volatility_threshold = market_monitor_config.get('volatility_threshold', 3.0)
        
        if not enabled:
            logger.info("Market Monitor ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh")
            return False
        
        # L∆∞u tr·ªØ gi√° tr∆∞·ªõc ƒë√≥
        previous_prices = {}
        
        # Thi·∫øt l·∫≠p l√™n l·ªãch ki·ªÉm tra
        def check_market_conditions():
            """Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng v√† g·ª≠i c·∫£nh b√°o"""
            try:
                nonlocal previous_prices
                
                for symbol in symbols:
                    # L·∫•y gi√° hi·ªán t·∫°i
                    current_price = api_client.get_symbol_price(symbol)
                    if not current_price:
                        logger.warning(f"Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i cho {symbol}")
                        continue
                    
                    # N·∫øu kh√¥ng c√≥ gi√° tr∆∞·ªõc ƒë√≥, l∆∞u l·∫°i v√† ti·∫øp t·ª•c
                    if symbol not in previous_prices:
                        previous_prices[symbol] = current_price
                        continue
                    
                    # T√≠nh to√°n % thay ƒë·ªïi
                    previous_price = previous_prices[symbol]
                    price_change_percent = ((current_price - previous_price) / previous_price) * 100
                    
                    # Ki·ªÉm tra ng∆∞·ª°ng bi·∫øn ƒë·ªông
                    if abs(price_change_percent) >= volatility_threshold:
                        # X√°c ƒë·ªãnh h∆∞·ªõng
                        direction = "TƒÇNG" if price_change_percent > 0 else "GI·∫¢M"
                        
                        # G·ª≠i c·∫£nh b√°o
                        message = (
                            f"<b>‚ö†Ô∏è C·∫£nh b√°o bi·∫øn ƒë·ªông {symbol}</b>\n\n"
                            f"Gi√° {direction} m·∫°nh: <b>{abs(price_change_percent):.2f}%</b>\n"
                            f"Gi√° tr∆∞·ªõc: {previous_price:.2f}\n"
                            f"Gi√° hi·ªán t·∫°i: {current_price:.2f}\n\n"
                            f"<i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S')}</i>"
                        )
                        
                        # Import m√¥-ƒëun Telegram v√† g·ª≠i th√¥ng b√°o
                        try:
                            telegram_module = import_module_dynamically('telegram_notifier')
                            if telegram_module:
                                telegram_module.send_message(message=message)
                                logger.info(f"ƒê√£ g·ª≠i c·∫£nh b√°o bi·∫øn ƒë·ªông cho {symbol}: {price_change_percent:.2f}%")
                        except Exception as e:
                            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o Telegram: {str(e)}")
                    
                    # C·∫≠p nh·∫≠t gi√° tr∆∞·ªõc ƒë√≥
                    previous_prices[symbol] = current_price
            
            except Exception as e:
                logger.error(f"L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng: {str(e)}")
        
        # Th·ª±c hi·ªán ngay l·∫≠p t·ª©c m·ªôt l·∫ßn
        check_market_conditions()
        
        # L√™n l·ªãch th·ª±c hi·ªán ƒë·ªãnh k·ª≥
        schedule.every(check_interval).seconds.do(check_market_conditions)
        logger.info(f"Market Monitor theo d√µi c√°c c·∫∑p {', '.join(symbols)} v·ªõi ng∆∞·ª°ng bi·∫øn ƒë·ªông {volatility_threshold}%")
        
        return True
    
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Market Monitor: {str(e)}")
        return False

def scheduler_thread():
    """Thread qu·∫£n l√Ω l√™n l·ªãch th·ª±c hi·ªán"""
    global running
    logger.info("ƒê√£ kh·ªüi ƒë·ªông thread l√™n l·ªãch th·ª±c hi·ªán")
    
    while running:
        schedule.run_pending()
        time.sleep(1)
    
    logger.info("Thread l√™n l·ªãch th·ª±c hi·ªán ƒë√£ d·ª´ng")

def start_services():
    """Kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c d·ªãch v·ª•"""
    global services
    
    try:
        # Kh·ªüi ƒë·ªông Auto SLTP Manager
        sltp_manager_started = start_sltp_manager()
        services['sltp_manager'] = {
            'active': sltp_manager_started,
            'started_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S') if sltp_manager_started else None
        }
        
        # Kh·ªüi ƒë·ªông Trailing Stop Manager
        trailing_stop_manager_started = start_trailing_stop_manager()
        services['trailing_stop_manager'] = {
            'active': trailing_stop_manager_started,
            'started_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S') if trailing_stop_manager_started else None
        }
        
        # Kh·ªüi ƒë·ªông Market Monitor
        market_monitor_started = start_market_monitor()
        services['market_monitor'] = {
            'active': market_monitor_started,
            'started_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S') if market_monitor_started else None
        }
        
        # G·ª≠i th√¥ng b√°o tr·∫°ng th√°i d·ªãch v·ª•
        active_services = [name for name, info in services.items() if info['active']]
        inactive_services = [name for name, info in services.items() if not info['active']]
        
        logger.info(f"D·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông: {', '.join(active_services) if active_services else 'Kh√¥ng c√≥'}")
        logger.info(f"D·ªãch v·ª• kh√¥ng ho·∫°t ƒë·ªông: {', '.join(inactive_services) if inactive_services else 'Kh√¥ng c√≥'}")
        
        return len(active_services) > 0
    
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông d·ªãch v·ª•: {str(e)}")
        return False

def check_services_status():
    """Ki·ªÉm tra tr·∫°ng th√°i c√°c d·ªãch v·ª• v√† kh·ªüi ƒë·ªông l·∫°i n·∫øu c·∫ßn"""
    global services
    
    try:
        # Ki·ªÉm tra t·ª´ng d·ªãch v·ª•
        for service_name, service_info in services.items():
            if not service_info['active']:
                logger.warning(f"D·ªãch v·ª• {service_name} kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ kh·ªüi ƒë·ªông l·∫°i...")
                
                # Th·ª≠ kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª•
                if service_name == 'sltp_manager':
                    started = start_sltp_manager()
                elif service_name == 'trailing_stop_manager':
                    started = start_trailing_stop_manager()
                elif service_name == 'market_monitor':
                    started = start_market_monitor()
                else:
                    started = False
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                services[service_name]['active'] = started
                if started:
                    services[service_name]['started_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    logger.info(f"ƒê√£ kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• {service_name}")
                else:
                    logger.error(f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• {service_name}")
    
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i d·ªãch v·ª•: {str(e)}")

def main():
    """H√†m ch√≠nh c·ªßa d·ªãch v·ª• h·ª£p nh·∫•t"""
    global running, scheduler
    
    try:
        # ƒêƒÉng k√Ω b·ªô x·ª≠ l√Ω t√≠n hi·ªáu
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # L∆∞u PID
        save_pid()
        
        logger.info(f"Kh·ªüi ƒë·ªông D·ªãch v·ª• h·ª£p nh·∫•t v{VERSION}")
        
        # Kh·ªüi t·∫°o API client
        if not initialize_api_client():
            logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o API client, d·ª´ng d·ªãch v·ª•")
            return 1
        
        # Kh·ªüi t·∫°o Telegram
        initialize_telegram()
        
        # Kh·ªüi ƒë·ªông c√°c d·ªãch v·ª•
        if not start_services():
            logger.warning("Kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng")
        
        # L√™n l·ªãch ki·ªÉm tra tr·∫°ng th√°i d·ªãch v·ª•
        schedule.every(5).minutes.do(check_services_status)
        
        # Kh·ªüi ƒë·ªông thread l√™n l·ªãch
        scheduler = threading.Thread(target=scheduler_thread)
        scheduler.daemon = True
        scheduler.start()
        
        # V√≤ng l·∫∑p ch√≠nh
        while running:
            # ƒê∆°n gi·∫£n ch·ªâ ch·ªù thread l√™n l·ªãch th·ª±c hi·ªán c√¥ng vi·ªác
            time.sleep(1)
        
        logger.info("D·ªãch v·ª• h·ª£p nh·∫•t ƒëang tho√°t...")
        return 0
    
    except KeyboardInterrupt:
        logger.info("ƒê√£ nh·∫≠n KeyboardInterrupt, ƒëang tho√°t...")
        running = False
        return 0
    
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong d·ªãch v·ª• h·ª£p nh·∫•t: {str(e)}")
        return 1
    
    finally:
        # ƒê·∫£m b·∫£o x√≥a file PID khi tho√°t
        try:
            if os.path.exists(PID_FILE):
                os.remove(PID_FILE)
                logger.info(f"ƒê√£ x√≥a file PID")
        except:
            pass

if __name__ == "__main__":
    sys.exit(main())