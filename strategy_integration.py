#!/usr/bin/env python3
"""
Module t√≠ch h·ª£p chi·∫øn thu·∫≠t giao d·ªãch (Strategy Integration)

Module n√†y t√≠ch h·ª£p c√°c chi·∫øn thu·∫≠t giao d·ªãch v√†o h·ªá th·ªëng ch√≠nh, ƒë·∫£m b·∫£o r·∫±ng
c√°c t√≠n hi·ªáu giao d·ªãch ƒë∆∞·ª£c t·∫°o ra ƒë√∫ng c√°ch v√† ƒë∆∞·ª£c ghi log ƒë·∫ßy ƒë·ªß.
"""

import os
import json
import logging
import time
from typing import Dict, List, Tuple, Optional, Union, Any
from datetime import datetime, timedelta

from composite_trading_strategy import CompositeTradingStrategy
from market_regime_detector import MarketRegimeDetector
from data_processor import DataProcessor
from binance_api import BinanceAPI
from telegram_notifier import TelegramNotifier

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("strategy_integration")

class StrategyIntegration:
    """L·ªõp t√≠ch h·ª£p chi·∫øn thu·∫≠t giao d·ªãch v√†o h·ªá th·ªëng"""
    
    def __init__(self, account_config_path: str = 'account_config.json',
               bot_config_path: str = 'bot_config.json',
               algorithm_config_path: str = 'configs/algorithm_config.json'):
        """
        Kh·ªüi t·∫°o b·ªô t√≠ch h·ª£p chi·∫øn thu·∫≠t
        
        Args:
            account_config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh t√†i kho·∫£n
            bot_config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh bot
            algorithm_config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh thu·∫≠t to√°n
        """
        self.account_config_path = account_config_path
        self.bot_config_path = bot_config_path
        self.algorithm_config_path = algorithm_config_path
        
        # T·∫£i c·∫•u h√¨nh
        self.account_config = self._load_config(account_config_path)
        self.bot_config = self._load_config(bot_config_path)
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
        self.data_processor = DataProcessor()
        self.binance_api = BinanceAPI()
        self.market_regime_detector = MarketRegimeDetector()
        
        # Kh·ªüi t·∫°o chi·∫øn thu·∫≠t t·ªïng h·ª£p
        self.trading_strategy = CompositeTradingStrategy(
            data_processor=self.data_processor,
            config_path=algorithm_config_path,
            account_config_path=account_config_path
        )
        
        # T·∫°o Telegram notifier
        self.telegram_enabled = self.account_config.get('telegram_enabled', False)
        if self.telegram_enabled:
            bot_token = self.account_config.get('telegram_bot_token', '')
            chat_id = self.account_config.get('telegram_chat_id', '')
            self.telegram = TelegramNotifier(bot_token=bot_token, chat_id=chat_id)
        else:
            self.telegram = None
        
        # Tr·∫°ng th√°i h·ªá th·ªëng
        self.active_positions = {}
        self.last_signals = {}
        self.signal_history = []
        
        logger.info("ƒê√£ kh·ªüi t·∫°o StrategyIntegration")
        
    def _load_config(self, config_path: str) -> Dict:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Args:
            config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            
        Returns:
            Dict: C·∫•u h√¨nh ƒë√£ t·∫£i
        """
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_path}")
                return config
            else:
                logger.warning(f"File c·∫•u h√¨nh {config_path} kh√¥ng t·ªìn t·∫°i")
                return {}
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh t·ª´ {config_path}: {e}")
            return {}
    
    def analyze_market(self, symbol: str = 'BTCUSDT', timeframe: str = '1h') -> Dict:
        """
        Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† t·∫°o t√≠n hi·ªáu giao d·ªãch
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            timeframe (str): Khung th·ªùi gian
            
        Returns:
            Dict: K·∫øt qu·∫£ ph√¢n t√≠ch th·ªã tr∆∞·ªùng
        """
        try:
            # S·ª≠ d·ª•ng chi·∫øn thu·∫≠t t·ªïng h·ª£p ƒë·ªÉ ph√¢n t√≠ch
            analysis = self.trading_strategy.analyze_market(symbol, timeframe)
            
            if analysis['success']:
                # L∆∞u t√≠n hi·ªáu g·∫ßn ƒë√¢y
                self.last_signals[symbol] = {
                    'timeframe': timeframe,
                    'timestamp': analysis['timestamp'],
                    'signal': analysis['signal'],
                    'score': analysis['composite_score'],
                    'confidence': analysis['confidence'],
                    'market_regime': analysis['market_regime']
                }
                
                # Ghi log
                logger.info(f"Ph√¢n t√≠ch th·ªã tr∆∞·ªùng {symbol} {timeframe}: " +
                         f"{analysis['signal_description']} (ƒêi·ªÉm: {analysis['composite_score']:.2f}, " +
                         f"ƒê·ªô tin c·∫≠y: {analysis['confidence']:.2f}%)")
                
                # G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ t√≠n hi·ªáu m·∫°nh
                if self.telegram_enabled and self.telegram and abs(analysis['signal']) >= 0.7:
                    signal_type = "MUA m·∫°nh" if analysis['signal'] >= 0.7 else "B√ÅN m·∫°nh"
                    message = (f"üìä T√≠n hi·ªáu {signal_type} ƒë∆∞·ª£c ph√°t hi·ªán\n"
                              f"üí± {symbol} / {timeframe}\n"
                              f"üìà ƒêi·ªÉm: {analysis['composite_score']:.2f}\n"
                              f"‚úÖ ƒê·ªô tin c·∫≠y: {analysis['confidence']:.2f}%\n"
                              f"üîÑ Ch·∫ø ƒë·ªô: {analysis['market_regime']}")
                    self.telegram.send_message(message)
            
            return analysis
            
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng {symbol} {timeframe}: {e}")
            return {'success': False, 'message': f'L·ªói khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {str(e)}'}
    
    def get_trading_signal(self, symbol: str = 'BTCUSDT', timeframe: str = '1h') -> Dict:
        """
        L·∫•y t√≠n hi·ªáu giao d·ªãch ƒë√£ ƒë∆∞·ª£c l·ªçc
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            timeframe (str): Khung th·ªùi gian
            
        Returns:
            Dict: T√≠n hi·ªáu giao d·ªãch
        """
        # S·ª≠ d·ª•ng chi·∫øn thu·∫≠t t·ªïng h·ª£p ƒë·ªÉ l·∫•y t√≠n hi·ªáu
        signal = self.trading_strategy.get_trading_signal(symbol, timeframe)
        
        if signal['success']:
            # L∆∞u l·∫°i l·ªãch s·ª≠ t√≠n hi·ªáu
            signal_record = {
                'symbol': symbol,
                'timeframe': timeframe,
                'timestamp': signal['timestamp'],
                'action': signal['action'],
                'confidence': signal['confidence'],
                'price': signal['price'],
                'market_regime': signal['market_regime']
            }
            self.signal_history.append(signal_record)
            
            # Gi·ªõi h·∫°n l·ªãch s·ª≠
            if len(self.signal_history) > 100:
                self.signal_history.pop(0)
            
            # Ghi log
            logger.info(f"T√≠n hi·ªáu giao d·ªãch cho {symbol} {timeframe}: {signal['action']} " +
                     f"(ƒê·ªô tin c·∫≠y: {signal['confidence']:.2f}%)")
        
        return signal
    
    def analyze_all_markets(self) -> Dict[str, Dict]:
        """
        Ph√¢n t√≠ch t·∫•t c·∫£ c√°c c·∫∑p giao d·ªãch ƒë√£ c·∫•u h√¨nh
        
        Returns:
            Dict[str, Dict]: K·∫øt qu·∫£ ph√¢n t√≠ch cho t·ª´ng c·∫∑p giao d·ªãch
        """
        results = {}
        
        # L·∫•y danh s√°ch c·∫∑p giao d·ªãch v√† khung th·ªùi gian t·ª´ c·∫•u h√¨nh
        symbols = self.account_config.get('symbols', ['BTCUSDT', 'ETHUSDT'])
        timeframes = self.account_config.get('timeframes', ['1h', '4h'])
        
        # ∆Øu ti√™n khung th·ªùi gian d√†i h∆°n
        timeframes.sort(key=lambda x: self._timeframe_to_minutes(x), reverse=True)
        
        # Ph√¢n t√≠ch t·ª´ng c·∫∑p
        for symbol in symbols:
            # B·∫Øt ƒë·∫ßu v·ªõi khung th·ªùi gian d√†i nh·∫•t
            for timeframe in timeframes:
                analysis = self.analyze_market(symbol, timeframe)
                
                if analysis['success']:
                    if symbol not in results:
                        results[symbol] = {}
                    
                    results[symbol][timeframe] = analysis
        
        return results
    
    def _timeframe_to_minutes(self, timeframe: str) -> int:
        """
        Chuy·ªÉn ƒë·ªïi khung th·ªùi gian sang s·ªë ph√∫t
        
        Args:
            timeframe (str): Khung th·ªùi gian (1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 12h, 1d, 3d, 1w, 1M)
            
        Returns:
            int: S·ªë ph√∫t
        """
        if 'm' in timeframe:
            return int(timeframe.replace('m', ''))
        elif 'h' in timeframe:
            return int(timeframe.replace('h', '')) * 60
        elif 'd' in timeframe:
            return int(timeframe.replace('d', '')) * 60 * 24
        elif 'w' in timeframe:
            return int(timeframe.replace('w', '')) * 60 * 24 * 7
        elif 'M' in timeframe:
            return int(timeframe.replace('M', '')) * 60 * 24 * 30
        return 0
    
    def get_market_summary(self, symbol: str = 'BTCUSDT') -> Dict:
        """
        L·∫•y t√≥m t·∫Øt th·ªã tr∆∞·ªùng cho m·ªôt c·∫∑p giao d·ªãch
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            
        Returns:
            Dict: T√≥m t·∫Øt th·ªã tr∆∞·ªùng
        """
        return self.data_processor.get_market_summary(symbol)
    
    def get_market_regime(self, symbol: str = 'BTCUSDT', timeframe: str = '1h') -> str:
        """
        L·∫•y ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            timeframe (str): Khung th·ªùi gian
            
        Returns:
            str: Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng
        """
        df = self.data_processor.get_market_data(symbol, timeframe)
        regime = self.market_regime_detector.detect_regime(df)
        return regime
    
    def get_suitable_strategies_for_current_market(self, symbol: str = 'BTCUSDT', timeframe: str = '1h') -> Dict[str, float]:
        """
        L·∫•y c√°c chi·∫øn thu·∫≠t ph√π h·ª£p v·ªõi ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng hi·ªán t·∫°i
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            timeframe (str): Khung th·ªùi gian
            
        Returns:
            Dict[str, float]: √Ånh x·∫° chi·∫øn thu·∫≠t -> tr·ªçng s·ªë
        """
        # L·∫•y ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng
        regime = self.get_market_regime(symbol, timeframe)
        
        # L·∫•y c√°c chi·∫øn thu·∫≠t ph√π h·ª£p
        return self.trading_strategy.get_suitable_strategies(regime)
    
    def execute_trade(self, signal: Dict) -> Dict:
        """
        Th·ª±c hi·ªán giao d·ªãch d·ª±a tr√™n t√≠n hi·ªáu
        
        Args:
            signal (Dict): T√≠n hi·ªáu giao d·ªãch
            
        Returns:
            Dict: K·∫øt qu·∫£ giao d·ªãch
        """
        if not signal.get('success', False):
            return {'success': False, 'message': 'T√≠n hi·ªáu kh√¥ng h·ª£p l·ªá'}
        
        symbol = signal.get('symbol', '')
        action = signal.get('action', 'HOLD')
        price = signal.get('price', 0)
        
        # Ki·ªÉm tra xem c√≥ n√™n giao d·ªãch kh√¥ng
        if action in ['HOLD']:
            return {'success': True, 'message': 'Kh√¥ng c√≥ h√†nh ƒë·ªông', 'action': action}
        
        # Ki·ªÉm tra r·ªßi ro
        max_positions = int(self.account_config.get('max_open_positions', 5))
        if len(self.active_positions) >= max_positions and action in ['BUY', 'STRONG_BUY']:
            return {'success': False, 'message': f'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n v·ªã th·∫ø m·ªü ({max_positions})'}
        
        # L·∫•y tham s·ªë qu·∫£n l√Ω r·ªßi ro
        risk_params = signal.get('risk_params', {})
        leverage = risk_params.get('leverage', int(self.account_config.get('leverage', 5)))
        risk_percentage = risk_params.get('risk_percentage', float(self.account_config.get('risk_per_trade', 1.0)))
        stop_loss_pct = risk_params.get('stop_loss_pct', 1.5)
        take_profit_pct = risk_params.get('take_profit_pct', 3.0)
        
        # T√≠nh to√°n k√≠ch th∆∞·ªõc v·ªã th·∫ø
        balance = float(self.bot_config.get('balance', 10000.0))
        position_size_usd = balance * (risk_percentage / 100.0)
        
        # T√≠nh to√°n s·ªë l∆∞·ª£ng
        quantity = position_size_usd / price
        
        # T√≠nh to√°n gi√° stop loss v√† take profit
        if action in ['BUY', 'STRONG_BUY']:
            side = 'BUY'
            stop_loss = price * (1 - stop_loss_pct / 100.0)
            take_profit = price * (1 + take_profit_pct / 100.0)
        else:
            side = 'SELL'
            stop_loss = price * (1 + stop_loss_pct / 100.0)
            take_profit = price * (1 - take_profit_pct / 100.0)
        
        # T·∫°o l·ªánh giao d·ªãch (gi·∫£ l·∫≠p ho·∫∑c th·∫≠t t√πy v√†o mode)
        order_result = self._create_order(symbol, side, quantity, price, leverage, stop_loss, take_profit)
        
        if order_result.get('success', False):
            # L∆∞u v·ªã th·∫ø m·ªü
            position_id = order_result.get('order_id', '')
            self.active_positions[position_id] = {
                'symbol': symbol,
                'side': side,
                'entry_price': price,
                'quantity': quantity,
                'leverage': leverage,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'entry_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'action': action,
                'confidence': signal.get('confidence', 0)
            }
            
            # G·ª≠i th√¥ng b√°o
            if self.telegram_enabled and self.telegram:
                message = (f"üîî L·ªánh {side} ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán\n"
                          f"üí± {symbol}\n"
                          f"üí∞ Gi√°: {price}\n"
                          f"üìä SL: {stop_loss:.2f} / TP: {take_profit:.2f}\n"
                          f"üìà ƒê√≤n b·∫©y: {leverage}x\n"
                          f"üíµ Gi√° tr·ªã: {position_size_usd:.2f} USD")
                self.telegram.send_message(message)
            
            logger.info(f"ƒê√£ th·ª±c hi·ªán l·ªánh {side} cho {symbol}: {quantity} @ {price}")
        
        return order_result
    
    def _create_order(self, symbol: str, side: str, quantity: float, price: float,
                   leverage: int, stop_loss: float, take_profit: float) -> Dict:
        """
        T·∫°o l·ªánh giao d·ªãch (gi·∫£ l·∫≠p ho·∫∑c th·∫≠t t√πy v√†o mode)
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch
            side (str): H∆∞·ªõng giao d·ªãch (BUY/SELL)
            quantity (float): S·ªë l∆∞·ª£ng
            price (float): Gi√°
            leverage (int): ƒê√≤n b·∫©y
            stop_loss (float): Gi√° stop loss
            take_profit (float): Gi√° take profit
            
        Returns:
            Dict: K·∫øt qu·∫£ t·∫°o l·ªánh
        """
        # L·∫•y mode t·ª´ c·∫•u h√¨nh
        mode = self.account_config.get('api_mode', 'testnet')
        
        if mode == 'demo':
            # Ch·∫ø ƒë·ªô demo, t·∫°o l·ªánh gi·∫£ l·∫≠p
            return {
                'success': True,
                'order_id': f"demo_{int(time.time())}",
                'symbol': symbol,
                'side': side,
                'quantity': quantity,
                'price': price,
                'status': 'FILLED',
                'leverage': leverage,
                'stop_loss': stop_loss,
                'take_profit': take_profit
            }
        elif mode in ['testnet', 'live']:
            # Ch·∫ø ƒë·ªô testnet ho·∫∑c live, t·∫°o l·ªánh th·∫≠t
            try:
                # ƒê·∫∑t ƒë√≤n b·∫©y
                self.binance_api.futures_change_leverage(symbol, leverage)
                
                # T·∫°o l·ªánh market
                order = self.binance_api.create_order(
                    symbol=symbol,
                    side=side,
                    type='MARKET',
                    quantity=round(quantity, 6)  # L√†m tr√≤n s·ªë l∆∞·ª£ng theo y√™u c·∫ßu c·ªßa Binance
                )
                
                # T·∫°o order_id t·ª´ k·∫øt qu·∫£
                order_id = str(order.get('orderId', f"api_{int(time.time())}"))
                
                # TODO: Th√™m stop loss v√† take profit
                
                return {
                    'success': True,
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': price,
                    'status': order.get('status', 'UNKNOWN'),
                    'leverage': leverage,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'api_response': order
                }
            except Exception as e:
                logger.error(f"L·ªói khi t·∫°o l·ªánh: {str(e)}")
                return {'success': False, 'message': f'L·ªói khi t·∫°o l·ªánh: {str(e)}'}
        else:
            return {'success': False, 'message': f'Ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá: {mode}'}
    
    def update_positions(self) -> List[Dict]:
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c v·ªã th·∫ø ƒëang m·ªü
        
        Returns:
            List[Dict]: Danh s√°ch c√°c v·ªã th·∫ø ƒë√£ ƒë√≥ng
        """
        closed_positions = []
        
        # L·∫•y gi√° hi·ªán t·∫°i
        current_prices = {}
        for position_id, position in self.active_positions.items():
            symbol = position['symbol']
            if symbol not in current_prices:
                ticker = self.binance_api.get_symbol_ticker(symbol)
                current_prices[symbol] = float(ticker['price']) if 'price' in ticker else 0
        
        # C·∫≠p nh·∫≠t t·ª´ng v·ªã th·∫ø
        for position_id, position in list(self.active_positions.items()):
            symbol = position['symbol']
            current_price = current_prices.get(symbol, 0)
            
            if current_price <= 0:
                continue
            
            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√≥ng v·ªã th·∫ø
            side = position['side']
            entry_price = position['entry_price']
            stop_loss = position['stop_loss']
            take_profit = position['take_profit']
            
            # T√≠nh l·ª£i nhu·∫≠n/thua l·ªó
            if side == 'BUY':
                pnl_pct = (current_price / entry_price - 1) * 100
                hit_stop_loss = current_price <= stop_loss
                hit_take_profit = current_price >= take_profit
            else:  # SELL
                pnl_pct = (entry_price / current_price - 1) * 100
                hit_stop_loss = current_price >= stop_loss
                hit_take_profit = current_price <= take_profit
            
            # Ki·ªÉm tra xem c√≥ n√™n ƒë√≥ng v·ªã th·∫ø kh√¥ng
            close_reason = None
            if hit_stop_loss:
                close_reason = 'stop_loss'
            elif hit_take_profit:
                close_reason = 'take_profit'
            
            # ƒê√≥ng v·ªã th·∫ø n·∫øu c·∫ßn
            if close_reason:
                # T√≠nh l·ª£i nhu·∫≠n tuy·ªát ƒë·ªëi
                entry_value = entry_price * position['quantity']
                current_value = current_price * position['quantity']
                
                if side == 'BUY':
                    pnl_abs = current_value - entry_value
                else:  # SELL
                    pnl_abs = entry_value - current_value
                
                pnl_abs_with_leverage = pnl_abs * position['leverage']
                
                # Th√™m th√¥ng tin v√†o v·ªã th·∫ø ƒë√£ ƒë√≥ng
                position['exit_price'] = current_price
                position['exit_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                position['close_reason'] = close_reason
                position['pnl_pct'] = pnl_pct
                position['pnl_abs'] = pnl_abs_with_leverage
                
                # Th√™m v√†o danh s√°ch v·ªã th·∫ø ƒë√£ ƒë√≥ng
                closed_positions.append(position)
                
                # X√≥a kh·ªèi danh s√°ch v·ªã th·∫ø ƒëang m·ªü
                del self.active_positions[position_id]
                
                # G·ª≠i th√¥ng b√°o
                if self.telegram_enabled and self.telegram:
                    emoji = "üî¥" if pnl_abs_with_leverage < 0 else "üü¢"
                    message = (f"{emoji} V·ªã th·∫ø ƒë√£ ƒë√≥ng ({close_reason})\n"
                              f"üí± {symbol} {side}\n"
                              f"üìà V√†o: {entry_price:.2f} / Ra: {current_price:.2f}\n"
                              f"üí∞ P/L: {pnl_pct:.2f}% ({pnl_abs_with_leverage:.2f} USD)")
                    self.telegram.send_message(message)
                
                logger.info(f"ƒê√£ ƒë√≥ng v·ªã th·∫ø {side} {symbol}: P/L = {pnl_pct:.2f}% ({pnl_abs_with_leverage:.2f} USD)")
        
        return closed_positions
    
    def run_strategy_cycle(self) -> Dict:
        """
        Ch·∫°y m·ªôt chu k·ª≥ c·ªßa chi·∫øn thu·∫≠t: ph√¢n t√≠ch, t·∫°o t√≠n hi·ªáu, th·ª±c hi·ªán giao d·ªãch
        
        Returns:
            Dict: K·∫øt qu·∫£ c·ªßa chu k·ª≥
        """
        try:
            logger.info("B·∫Øt ƒë·∫ßu chu k·ª≥ chi·∫øn thu·∫≠t m·ªõi")
            
            # C·∫≠p nh·∫≠t c√°c v·ªã th·∫ø ƒëang m·ªü
            closed_positions = self.update_positions()
            
            # Ph√¢n t√≠ch t·∫•t c·∫£ c√°c th·ªã tr∆∞·ªùng
            analysis_results = self.analyze_all_markets()
            
            # T·∫°o t√≠n hi·ªáu giao d·ªãch v√† th·ª±c hi·ªán giao d·ªãch n·∫øu c·∫ßn
            trade_results = []
            
            for symbol, timeframe_results in analysis_results.items():
                # ∆Øu ti√™n khung th·ªùi gian d√†i h∆°n
                for timeframe, analysis in sorted(timeframe_results.items(), 
                                              key=lambda x: self._timeframe_to_minutes(x[0]), 
                                              reverse=True):
                    # Ch·ªâ l·∫•y t√≠n hi·ªáu giao d·ªãch n·∫øu c√≥ t√≠n hi·ªáu m·∫°nh
                    if abs(analysis.get('signal', 0)) >= 0.5:
                        signal = self.get_trading_signal(symbol, timeframe)
                        
                        # Th·ª±c hi·ªán giao d·ªãch n·∫øu c√≥ t√≠n hi·ªáu h√†nh ƒë·ªông
                        if signal.get('action', 'HOLD') in ['BUY', 'STRONG_BUY', 'SELL', 'STRONG_SELL']:
                            trade_result = self.execute_trade(signal)
                            trade_results.append(trade_result)
                            
                            # Ch·ªâ th·ª±c hi·ªán m·ªôt giao d·ªãch cho m·ªói symbol
                            break
            
            return {
                'success': True,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'closed_positions': closed_positions,
                'analysis_count': len(analysis_results),
                'trade_results': trade_results
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi ch·∫°y chu k·ª≥ chi·∫øn thu·∫≠t: {str(e)}")
            return {'success': False, 'message': f'L·ªói: {str(e)}'}
    
    def get_system_status(self) -> Dict:
        """
        L·∫•y tr·∫°ng th√°i h·ªá th·ªëng
        
        Returns:
            Dict: Tr·∫°ng th√°i h·ªá th·ªëng
        """
        # T√≠nh hi·ªáu su·∫•t
        performance = self.trading_strategy.calculate_performance_metrics()
        
        # ƒê·∫øm t√≠n hi·ªáu theo lo·∫°i
        signal_counts = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
        for signal in self.signal_history:
            action = signal.get('action', 'HOLD')
            if 'STRONG_' in action:
                action = action.replace('STRONG_', '')
            if action in signal_counts:
                signal_counts[action] += 1
        
        return {
            'active_positions': len(self.active_positions),
            'signal_history_count': len(self.signal_history),
            'win_rate': performance.get('win_rate', 0),
            'profit_factor': performance.get('profit_factor', 0),
            'signal_counts': signal_counts,
            'market_regimes': {s: self.trading_strategy.current_regime for s in self.account_config.get('symbols', ['BTCUSDT'])},
            'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

def main():
    """H√†m ch√≠nh ƒë·ªÉ test StrategyIntegration"""
    strategy = StrategyIntegration()
    
    # Ch·∫°y chu k·ª≥ chi·∫øn thu·∫≠t
    result = strategy.run_strategy_cycle()
    
    print("\n===== K·∫æT QU·∫¢ CHU K·ª≤ CHI·∫æN THU·∫¨T =====")
    print(f"Th√†nh c√¥ng: {result['success']}")
    if 'message' in result:
        print(f"Th√¥ng b√°o: {result['message']}")
    
    if result['success']:
        print(f"Th·ªùi gian: {result['timestamp']}")
        print(f"S·ªë ph√¢n t√≠ch: {result['analysis_count']}")
        print(f"S·ªë v·ªã th·∫ø ƒë√£ ƒë√≥ng: {len(result['closed_positions'])}")
        print(f"S·ªë giao d·ªãch m·ªõi: {len(result['trade_results'])}")
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng
    status = strategy.get_system_status()
    
    print("\n===== TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG =====")
    print(f"S·ªë v·ªã th·∫ø ƒëang m·ªü: {status['active_positions']}")
    print(f"S·ªë t√≠n hi·ªáu ƒë√£ l∆∞u: {status['signal_history_count']}")
    print(f"T·ª∑ l·ªá th·∫Øng: {status['win_rate']:.2f}%")
    print(f"H·ªá s·ªë l·ª£i nhu·∫≠n: {status['profit_factor']:.2f}")
    
    print("\nPh√¢n b·ªë t√≠n hi·ªáu:")
    for action, count in status['signal_counts'].items():
        print(f"- {action}: {count}")
    
    print("\nCh·∫ø ƒë·ªô th·ªã tr∆∞·ªùng:")
    for symbol, regime in status['market_regimes'].items():
        print(f"- {symbol}: {regime}")

if __name__ == "__main__":
    main()