#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module th√¥ng b√°o n√¢ng cao (EnhancedNotification)

Module n√†y cung c·∫•p c√°c ch·ª©c nƒÉng th√¥ng b√°o n√¢ng cao qua Telegram, Email
v·ªõi c√°c ƒë·ªãnh d·∫°ng phong ph√∫ v√† b√°o c√°o chi ti·∫øt ƒë·∫ßy ƒë·ªß.
"""

import os
import json
import time
import logging
import smtplib
import datetime
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Tuple, Union, Optional, Any

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('enhanced_notification')

class NotificationChannel:
    """L·ªõp c∆° s·ªü cho c√°c k√™nh th√¥ng b√°o"""
    
    def __init__(self, name: str):
        """
        Kh·ªüi t·∫°o k√™nh th√¥ng b√°o
        
        Args:
            name (str): T√™n k√™nh th√¥ng b√°o
        """
        self.name = name
        self.enabled = True
    
    def send(self, message: str, subject: str = None, data: Dict = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o
        
        Args:
            message (str): N·ªôi dung th√¥ng b√°o
            subject (str, optional): Ti√™u ƒë·ªÅ th√¥ng b√°o
            data (Dict, optional): D·ªØ li·ªáu b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c send() ph·∫£i ƒë∆∞·ª£c ghi ƒë√®")
    
    def format_message(self, template_name: str, data: Dict) -> str:
        """
        ƒê·ªãnh d·∫°ng th√¥ng b√°o theo template
        
        Args:
            template_name (str): T√™n template
            data (Dict): D·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn v√†o template
            
        Returns:
            str: Th√¥ng b√°o ƒë√£ ƒë·ªãnh d·∫°ng
        """
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c format_message() ph·∫£i ƒë∆∞·ª£c ghi ƒë√®")


class TelegramNotifier(NotificationChannel):
    """L·ªõp g·ª≠i th√¥ng b√°o qua Telegram"""
    
    def __init__(self, bot_token: str = None, chat_id: str = None, 
                config_path: str = None, disable_notification: bool = False):
        """
        Kh·ªüi t·∫°o TelegramNotifier
        
        Args:
            bot_token (str, optional): Token c·ªßa Telegram Bot
            chat_id (str, optional): ID c·ªßa chat/channel nh·∫≠n th√¥ng b√°o
            config_path (str, optional): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            disable_notification (bool): T·∫Øt √¢m thanh th√¥ng b√°o
        """
        super().__init__("telegram")
        
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.disable_notification = disable_notification
        
        # N·∫øu c√≥ config_path, ƒë·ªçc c·∫•u h√¨nh t·ª´ file
        if config_path:
            self._load_config(config_path)
        # N·∫øu kh√¥ng c√≥ bot_token ho·∫∑c chat_id, th·ª≠ ƒë·ªçc t·ª´ env
        elif not bot_token or not chat_id:
            self._load_from_env()
    
    def _load_config(self, config_path: str) -> bool:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Args:
            config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            
        Returns:
            bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                
                telegram_config = config.get('telegram', {})
                self.bot_token = telegram_config.get('bot_token') or self.bot_token
                self.chat_id = telegram_config.get('chat_id') or self.chat_id
                
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh Telegram t·ª´ {config_path}")
                return True
            else:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh Telegram: {config_path}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Telegram: {str(e)}")
            return False
    
    def _load_from_env(self) -> bool:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        
        Returns:
            bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Th·ª≠ ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
            self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN') or self.bot_token
            self.chat_id = os.environ.get('TELEGRAM_CHAT_ID') or self.chat_id
            
            if self.bot_token and self.chat_id:
                logger.info("ƒê√£ t·∫£i c·∫•u h√¨nh Telegram t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
                return True
            else:
                logger.warning("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Telegram trong bi·∫øn m√¥i tr∆∞·ªùng")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Telegram t·ª´ bi·∫øn m√¥i tr∆∞·ªùng: {str(e)}")
            return False
    
    def _is_configured(self) -> bool:
        """
        Ki·ªÉm tra xem k√™nh Telegram ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ch∆∞a
        
        Returns:
            bool: True n·∫øu ƒë√£ c·∫•u h√¨nh, False n·∫øu ch∆∞a
        """
        return bool(self.bot_token and self.chat_id)
    
    def send(self, message: str, subject: str = None, data: Dict = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o qua Telegram
        
        Args:
            message (str): N·ªôi dung th√¥ng b√°o
            subject (str, optional): Ti√™u ƒë·ªÅ th√¥ng b√°o
            data (Dict, optional): D·ªØ li·ªáu b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.enabled:
            logger.info("Th√¥ng b√°o Telegram ƒë√£ b·ªã t·∫Øt")
            return False
        
        if not self._is_configured():
            logger.error("Ch∆∞a c·∫•u h√¨nh Telegram (thi·∫øu bot_token ho·∫∑c chat_id)")
            return False
        
        try:
            # K·∫øt h·ª£p subject v√†o message n·∫øu c√≥
            if subject:
                full_message = f"*{subject}*\n\n{message}"
            else:
                full_message = message
            
            # Chu·∫©n b·ªã payload
            payload = {
                'chat_id': self.chat_id,
                'text': full_message,
                'parse_mode': 'Markdown',
                'disable_notification': self.disable_notification
            }
            
            # G·ª≠i request
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            response = requests.post(url, json=payload)
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            if response.status_code == 200:
                logger.info("ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {str(e)}")
            return False
    
    def format_message(self, template_name: str, data: Dict) -> str:
        """
        ƒê·ªãnh d·∫°ng th√¥ng b√°o Telegram theo template
        
        Args:
            template_name (str): T√™n template
            data (Dict): D·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn v√†o template
            
        Returns:
            str: Th√¥ng b√°o ƒë√£ ƒë·ªãnh d·∫°ng
        """
        # Danh s√°ch c√°c template
        templates = {
            # Th√¥ng b√°o khi c√≥ v·ªã th·∫ø m·ªõi m·ªü
            'new_position': (
                "üîî *V·ªã th·∫ø m·ªõi*\n\n"
                f"*Symbol:* `{data.get('symbol', 'N/A')}`\n"
                f"*Lo·∫°i:* `{data.get('side', 'N/A')}`\n"
                f"*Gi√° v√†o:* `{data.get('entry_price', 0):.2f}`\n"
                f"*Kh·ªëi l∆∞·ª£ng:* `{data.get('quantity', 0):.4f}`\n"
                f"*ƒê√≤n b·∫©y:* `{data.get('leverage', 1)}x`\n"
                f"*Stop Loss:* `{data.get('stop_loss', 'N/A')}`\n"
                f"*Take Profit:* `{data.get('take_profit', 'N/A')}`\n"
                f"*Th·ªùi gian:* `{data.get('entry_time', 'N/A')}`"
            ),
            
            # Th√¥ng b√°o khi m·ªôt v·ªã th·∫ø ƒë√≥ng
            'position_closed': (
                "üîî *V·ªã th·∫ø ƒë√£ ƒë√≥ng*\n\n"
                f"*Symbol:* `{data.get('symbol', 'N/A')}`\n"
                f"*Lo·∫°i:* `{data.get('side', 'N/A')}`\n"
                f"*Gi√° v√†o:* `{data.get('entry_price', 0):.2f}`\n"
                f"*Gi√° ra:* `{data.get('exit_price', 0):.2f}`\n"
                f"*P&L:* `{data.get('profit_loss', 0):.2f} ({data.get('profit_percent', 0):.2f}%)`\n"
                f"*L√Ω do:* `{data.get('close_reason', 'N/A')}`\n"
                f"*Th·ªùi gian:* `{data.get('exit_time', 'N/A')}`"
            ),
            
            # Th√¥ng b√°o khi trailing stop ƒë∆∞·ª£c k√≠ch ho·∫°t
            'trailing_stop_activated': (
                "üîî *Trailing Stop k√≠ch ho·∫°t*\n\n"
                f"*Symbol:* `{data.get('symbol', 'N/A')}`\n"
                f"*Lo·∫°i:* `{data.get('side', 'N/A')}`\n"
                f"*Gi√° v√†o:* `{data.get('entry_price', 0):.2f}`\n"
                f"*Gi√° hi·ªán t·∫°i:* `{data.get('current_price', 0):.2f}`\n"
                f"*M·ª©c trailing:* `{data.get('trailing_stop', 0):.2f}`\n"
                f"*P&L hi·ªán t·∫°i:* `{data.get('profit_percent', 0):.2f}%`\n"
                f"*Th·ªùi gian:* `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            ),
            
            # Th√¥ng b√°o l·ªói
            'error': (
                "‚ö†Ô∏è *C·∫£nh b√°o l·ªói*\n\n"
                f"*Lo·∫°i l·ªói:* `{data.get('error_type', 'N/A')}`\n"
                f"*Chi ti·∫øt:* `{data.get('error_message', 'N/A')}`\n"
                f"*Th·ªùi gian:* `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            ),
            
            # Th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng
            'system_start': (
                "üöÄ *H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông*\n\n"
                f"*Phi√™n b·∫£n:* `{data.get('version', 'N/A')}`\n"
                f"*Mode:* `{data.get('mode', 'N/A')}`\n"
                f"*T√†i kho·∫£n:* `{data.get('account', 'N/A')}`\n"
                f"*S·ªë d∆∞:* `{data.get('balance', 0):.2f} USDT`\n"
                f"*Th·ªùi gian:* `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            ),
            
            # B√°o c√°o hi·ªáu su·∫•t ƒë·ªãnh k·ª≥
            'performance_report': (
                "üìä *B√°o c√°o hi·ªáu su·∫•t*\n\n"
                f"*Kho·∫£ng th·ªùi gian:* `{data.get('period', 'N/A')}`\n"
                f"*T·ªïng P&L:* `{data.get('total_pnl', 0):.2f} USDT ({data.get('pnl_percent', 0):.2f}%)`\n"
                f"*S·ªë giao d·ªãch:* `{data.get('total_trades', 0)}`\n"
                f"*T·ª∑ l·ªá th·∫Øng:* `{data.get('win_rate', 0):.2f}%`\n"
                f"*Drawdown t·ªëi ƒëa:* `{data.get('max_drawdown', 0):.2f}%`\n"
                f"*H·ªá s·ªë l·ª£i nhu·∫≠n:* `{data.get('profit_factor', 0):.2f}`\n"
                f"*Sharpe Ratio:* `{data.get('sharpe_ratio', 0):.2f}`\n"
                f"*Th·ªùi gian:* `{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            )
        }
        
        # N·∫øu template kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ message m·∫∑c ƒë·ªãnh
        if template_name not in templates:
            logger.warning(f"Template '{template_name}' kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
            return f"*Th√¥ng b√°o*\n\n{json.dumps(data, indent=2)}"
        
        try:
            # L·∫•y template v√† thay th·∫ø c√°c bi·∫øn
            return templates[template_name]
        except Exception as e:
            logger.error(f"L·ªói khi ƒë·ªãnh d·∫°ng th√¥ng b√°o Telegram: {str(e)}")
            return f"*Th√¥ng b√°o*\n\n{json.dumps(data, indent=2)}"
    
    def send_position_notification(self, data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø
        
        Args:
            data (Dict): D·ªØ li·ªáu v·ªã th·∫ø
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        message = self.format_message('new_position', data)
        subject = f"V·ªã th·∫ø m·ªõi: {data.get('symbol')} {data.get('side')}"
        return self.send(message, subject, data)
    
    def send_position_close_notification(self, data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø ƒë√£ ƒë√≥ng
        
        Args:
            data (Dict): D·ªØ li·ªáu v·ªã th·∫ø
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        message = self.format_message('position_closed', data)
        subject = f"V·ªã th·∫ø ƒë√≥ng: {data.get('symbol')} {data.get('side')}"
        return self.send(message, subject, data)
    
    def send_trailing_stop_notification(self, data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªÅ trailing stop ƒë√£ k√≠ch ho·∫°t
        
        Args:
            data (Dict): D·ªØ li·ªáu trailing stop
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        message = self.format_message('trailing_stop_activated', data)
        subject = f"Trailing Stop: {data.get('symbol')} {data.get('side')}"
        return self.send(message, subject, data)
    
    def send_error_notification(self, error_type: str, error_message: str) -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªÅ l·ªói
        
        Args:
            error_type (str): Lo·∫°i l·ªói
            error_message (str): Chi ti·∫øt l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        data = {
            'error_type': error_type,
            'error_message': error_message
        }
        message = self.format_message('error', data)
        subject = f"L·ªói: {error_type}"
        return self.send(message, subject, data)
    
    def send_system_start_notification(self, version: str, mode: str, account: str, balance: float) -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªÅ vi·ªác h·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông
        
        Args:
            version (str): Phi√™n b·∫£n h·ªá th·ªëng
            mode (str): Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông
            account (str): Th√¥ng tin t√†i kho·∫£n
            balance (float): S·ªë d∆∞ t√†i kho·∫£n
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        data = {
            'version': version,
            'mode': mode,
            'account': account,
            'balance': balance
        }
        message = self.format_message('system_start', data)
        subject = f"H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông"
        return self.send(message, subject, data)
    
    def send_performance_report(self, data: Dict) -> bool:
        """
        G·ª≠i b√°o c√°o hi·ªáu su·∫•t
        
        Args:
            data (Dict): D·ªØ li·ªáu b√°o c√°o
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        message = self.format_message('performance_report', data)
        subject = f"B√°o c√°o hi·ªáu su·∫•t: {data.get('period', 'N/A')}"
        return self.send(message, subject, data)


class EmailNotifier(NotificationChannel):
    """L·ªõp g·ª≠i th√¥ng b√°o qua Email"""
    
    def __init__(self, smtp_server: str = None, smtp_port: int = 587,
                sender_email: str = None, password: str = None, 
                recipients: List[str] = None, config_path: str = None):
        """
        Kh·ªüi t·∫°o EmailNotifier
        
        Args:
            smtp_server (str, optional): ƒê·ªãa ch·ªâ SMTP server
            smtp_port (int): Port c·ªßa SMTP server
            sender_email (str, optional): Email ng∆∞·ªùi g·ª≠i
            password (str, optional): M·∫≠t kh·∫©u email
            recipients (List[str], optional): Danh s√°ch email ng∆∞·ªùi nh·∫≠n
            config_path (str, optional): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        """
        super().__init__("email")
        
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.sender_email = sender_email
        self.password = password
        self.recipients = recipients or []
        
        # N·∫øu c√≥ config_path, ƒë·ªçc c·∫•u h√¨nh t·ª´ file
        if config_path:
            self._load_config(config_path)
        # N·∫øu kh√¥ng c√≥ c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß, th·ª≠ ƒë·ªçc t·ª´ env
        elif not smtp_server or not sender_email or not password or not recipients:
            self._load_from_env()
    
    def _load_config(self, config_path: str) -> bool:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Args:
            config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            
        Returns:
            bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                
                email_config = config.get('email', {})
                self.smtp_server = email_config.get('smtp_server') or self.smtp_server
                self.smtp_port = email_config.get('smtp_port') or self.smtp_port
                self.sender_email = email_config.get('sender_email') or self.sender_email
                self.password = email_config.get('password') or self.password
                self.recipients = email_config.get('recipients') or self.recipients
                
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh Email t·ª´ {config_path}")
                return True
            else:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh Email: {config_path}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Email: {str(e)}")
            return False
    
    def _load_from_env(self) -> bool:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        
        Returns:
            bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # Th·ª≠ ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
            self.smtp_server = os.environ.get('EMAIL_SMTP_SERVER') or self.smtp_server
            self.smtp_port = int(os.environ.get('EMAIL_SMTP_PORT') or self.smtp_port)
            self.sender_email = os.environ.get('EMAIL_SENDER') or self.sender_email
            self.password = os.environ.get('EMAIL_PASSWORD') or self.password
            
            recipients_str = os.environ.get('EMAIL_RECIPIENTS')
            if recipients_str:
                self.recipients = [r.strip() for r in recipients_str.split(',')]
            
            if self.smtp_server and self.sender_email and self.password and self.recipients:
                logger.info("ƒê√£ t·∫£i c·∫•u h√¨nh Email t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
                return True
            else:
                logger.warning("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Email ƒë·∫ßy ƒë·ªß trong bi·∫øn m√¥i tr∆∞·ªùng")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh Email t·ª´ bi·∫øn m√¥i tr∆∞·ªùng: {str(e)}")
            return False
    
    def _is_configured(self) -> bool:
        """
        Ki·ªÉm tra xem k√™nh Email ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß ch∆∞a
        
        Returns:
            bool: True n·∫øu ƒë√£ c·∫•u h√¨nh, False n·∫øu ch∆∞a
        """
        return bool(self.smtp_server and self.sender_email and self.password and self.recipients)
    
    def send(self, message: str, subject: str = None, data: Dict = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o qua Email
        
        Args:
            message (str): N·ªôi dung th√¥ng b√°o
            subject (str, optional): Ti√™u ƒë·ªÅ th√¥ng b√°o
            data (Dict, optional): D·ªØ li·ªáu b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.enabled:
            logger.info("Th√¥ng b√°o Email ƒë√£ b·ªã t·∫Øt")
            return False
        
        if not self._is_configured():
            logger.error("Ch∆∞a c·∫•u h√¨nh Email ƒë·∫ßy ƒë·ªß")
            return False
        
        try:
            # Chu·∫©n b·ªã email
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = ', '.join(self.recipients)
            msg['Subject'] = subject or "Th√¥ng b√°o t·ª´ h·ªá th·ªëng Trading Bot"
            
            # ƒê·ªãnh d·∫°ng n·ªôi dung email
            html_content = f"<html><body>{message}</body></html>"
            msg.attach(MIMEText(html_content, 'html'))
            
            # G·ª≠i email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()  # B·∫£o m·∫≠t k·∫øt n·ªëi
                server.login(self.sender_email, self.password)
                server.send_message(msg)
            
            logger.info(f"ƒê√£ g·ª≠i email th√†nh c√¥ng ƒë·∫øn {len(self.recipients)} ng∆∞·ªùi nh·∫≠n")
            return True
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i email: {str(e)}")
            return False
    
    def format_message(self, template_name: str, data: Dict) -> str:
        """
        ƒê·ªãnh d·∫°ng th√¥ng b√°o Email theo template
        
        Args:
            template_name (str): T√™n template
            data (Dict): D·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn v√†o template
            
        Returns:
            str: Th√¥ng b√°o ƒë√£ ƒë·ªãnh d·∫°ng d·∫°ng HTML
        """
        # Danh s√°ch c√°c template
        templates = {
            # Th√¥ng b√°o khi c√≥ v·ªã th·∫ø m·ªõi m·ªü
            'new_position': (
                "<h2>V·ªã th·∫ø m·ªõi</h2>"
                "<table style='width: 100%; border-collapse: collapse;'>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Symbol:</td><td>{data.get('symbol', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Lo·∫°i:</td><td>{data.get('side', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Gi√° v√†o:</td><td>{data.get('entry_price', 0):.2f}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Kh·ªëi l∆∞·ª£ng:</td><td>{data.get('quantity', 0):.4f}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>ƒê√≤n b·∫©y:</td><td>{data.get('leverage', 1)}x</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Stop Loss:</td><td>{data.get('stop_loss', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Take Profit:</td><td>{data.get('take_profit', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Th·ªùi gian:</td><td>{data.get('entry_time', 'N/A')}</td></tr>"
                "</table>"
            ),
            
            # Th√¥ng b√°o khi m·ªôt v·ªã th·∫ø ƒë√≥ng
            'position_closed': (
                "<h2>V·ªã th·∫ø ƒë√£ ƒë√≥ng</h2>"
                "<table style='width: 100%; border-collapse: collapse;'>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Symbol:</td><td>{data.get('symbol', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Lo·∫°i:</td><td>{data.get('side', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Gi√° v√†o:</td><td>{data.get('entry_price', 0):.2f}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Gi√° ra:</td><td>{data.get('exit_price', 0):.2f}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>P&L:</td><td>{data.get('profit_loss', 0):.2f} ({data.get('profit_percent', 0):.2f}%)</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>L√Ω do:</td><td>{data.get('close_reason', 'N/A')}</td></tr>"
                f"<tr><td style='font-weight: bold; padding: 5px;'>Th·ªùi gian:</td><td>{data.get('exit_time', 'N/A')}</td></tr>"
                "</table>"
            ),
            
            # B√°o c√°o hi·ªáu su·∫•t ƒë·ªãnh k·ª≥
            'performance_report': (
                "<h2>B√°o c√°o hi·ªáu su·∫•t</h2>"
                "<p>Kho·∫£ng th·ªùi gian: " + data.get('period', 'N/A') + "</p>"
                "<table style='width: 100%; border-collapse: collapse; border: 1px solid #ddd;'>"
                "<tr style='background-color: #f2f2f2;'>"
                "<th style='padding: 8px; text-align: left; border: 1px solid #ddd;'>Ch·ªâ s·ªë</th>"
                "<th style='padding: 8px; text-align: right; border: 1px solid #ddd;'>Gi√° tr·ªã</th>"
                "</tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>T·ªïng P&L</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('total_pnl', 0):.2f} USDT ({data.get('pnl_percent', 0):.2f}%)</td></tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>S·ªë giao d·ªãch</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('total_trades', 0)}</td></tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>T·ª∑ l·ªá th·∫Øng</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('win_rate', 0):.2f}%</td></tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>Drawdown t·ªëi ƒëa</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('max_drawdown', 0):.2f}%</td></tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>H·ªá s·ªë l·ª£i nhu·∫≠n</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('profit_factor', 0):.2f}</td></tr>"
                f"<tr><td style='padding: 8px; border: 1px solid #ddd;'>Sharpe Ratio</td><td style='padding: 8px; text-align: right; border: 1px solid #ddd;'>{data.get('sharpe_ratio', 0):.2f}</td></tr>"
                "</table>"
                "<p>Th·ªùi gian: " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') + "</p>"
            )
        }
        
        # N·∫øu template kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ message m·∫∑c ƒë·ªãnh
        if template_name not in templates:
            logger.warning(f"Template '{template_name}' kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
            return f"<h2>Th√¥ng b√°o</h2><pre>{json.dumps(data, indent=2)}</pre>"
        
        try:
            # L·∫•y template
            return templates[template_name]
        except Exception as e:
            logger.error(f"L·ªói khi ƒë·ªãnh d·∫°ng th√¥ng b√°o Email: {str(e)}")
            return f"<h2>Th√¥ng b√°o</h2><pre>{json.dumps(data, indent=2)}</pre>"


class EnhancedNotification:
    """L·ªõp th√¥ng b√°o n√¢ng cao k·∫øt h·ª£p nhi·ªÅu k√™nh"""
    
    def __init__(self, config_path: str = None):
        """
        Kh·ªüi t·∫°o EnhancedNotification
        
        Args:
            config_path (str, optional): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        """
        self.config_path = config_path
        self.channels = {}
        
        # T·∫£i c·∫•u h√¨nh
        if config_path:
            self._load_config()
        
        # Kh·ªüi t·∫°o c√°c k√™nh m·∫∑c ƒë·ªãnh
        if not self.channels:
            self._init_default_channels()
    
    def _load_config(self) -> bool:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Returns:
            bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r') as f:
                    config = json.load(f)
                
                # Kh·ªüi t·∫°o c√°c k√™nh t·ª´ c·∫•u h√¨nh
                if 'telegram' in config and config['telegram'].get('enabled', True):
                    self.channels['telegram'] = TelegramNotifier(
                        bot_token=config['telegram'].get('bot_token'),
                        chat_id=config['telegram'].get('chat_id'),
                        disable_notification=config['telegram'].get('disable_notification', False)
                    )
                
                if 'email' in config and config['email'].get('enabled', True):
                    self.channels['email'] = EmailNotifier(
                        smtp_server=config['email'].get('smtp_server'),
                        smtp_port=config['email'].get('smtp_port', 587),
                        sender_email=config['email'].get('sender_email'),
                        password=config['email'].get('password'),
                        recipients=config['email'].get('recipients')
                    )
                
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh th√¥ng b√°o t·ª´ {self.config_path}")
                return True
            else:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh th√¥ng b√°o: {self.config_path}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh th√¥ng b√°o: {str(e)}")
            return False
    
    def _init_default_channels(self) -> None:
        """Kh·ªüi t·∫°o c√°c k√™nh th√¥ng b√°o m·∫∑c ƒë·ªãnh"""
        # Th·ª≠ kh·ªüi t·∫°o Telegram t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        telegram = TelegramNotifier()
        if telegram._is_configured():
            self.channels['telegram'] = telegram
        
        # Th·ª≠ kh·ªüi t·∫°o Email t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        email = EmailNotifier()
        if email._is_configured():
            self.channels['email'] = email
    
    def add_channel(self, channel: NotificationChannel) -> bool:
        """
        Th√™m m·ªôt k√™nh th√¥ng b√°o
        
        Args:
            channel (NotificationChannel): K√™nh th√¥ng b√°o
            
        Returns:
            bool: True n·∫øu th√™m th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if channel.name in self.channels:
            logger.warning(f"K√™nh th√¥ng b√°o '{channel.name}' ƒë√£ t·ªìn t·∫°i, s·∫Ω ghi ƒë√®")
        
        self.channels[channel.name] = channel
        logger.info(f"ƒê√£ th√™m k√™nh th√¥ng b√°o: {channel.name}")
        return True
    
    def remove_channel(self, channel_name: str) -> bool:
        """
        X√≥a m·ªôt k√™nh th√¥ng b√°o
        
        Args:
            channel_name (str): T√™n k√™nh th√¥ng b√°o
            
        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if channel_name not in self.channels:
            logger.warning(f"K√™nh th√¥ng b√°o '{channel_name}' kh√¥ng t·ªìn t·∫°i")
            return False
        
        del self.channels[channel_name]
        logger.info(f"ƒê√£ x√≥a k√™nh th√¥ng b√°o: {channel_name}")
        return True
    
    def enable_channel(self, channel_name: str) -> bool:
        """
        B·∫≠t m·ªôt k√™nh th√¥ng b√°o
        
        Args:
            channel_name (str): T√™n k√™nh th√¥ng b√°o
            
        Returns:
            bool: True n·∫øu b·∫≠t th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if channel_name not in self.channels:
            logger.warning(f"K√™nh th√¥ng b√°o '{channel_name}' kh√¥ng t·ªìn t·∫°i")
            return False
        
        self.channels[channel_name].enabled = True
        logger.info(f"ƒê√£ b·∫≠t k√™nh th√¥ng b√°o: {channel_name}")
        return True
    
    def disable_channel(self, channel_name: str) -> bool:
        """
        T·∫Øt m·ªôt k√™nh th√¥ng b√°o
        
        Args:
            channel_name (str): T√™n k√™nh th√¥ng b√°o
            
        Returns:
            bool: True n·∫øu t·∫Øt th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if channel_name not in self.channels:
            logger.warning(f"K√™nh th√¥ng b√°o '{channel_name}' kh√¥ng t·ªìn t·∫°i")
            return False
        
        self.channels[channel_name].enabled = False
        logger.info(f"ƒê√£ t·∫Øt k√™nh th√¥ng b√°o: {channel_name}")
        return True
    
    def send(self, message: str, subject: str = None, data: Dict = None, 
           channels: List[str] = None) -> Dict[str, bool]:
        """
        G·ª≠i th√¥ng b√°o qua c√°c k√™nh
        
        Args:
            message (str): N·ªôi dung th√¥ng b√°o
            subject (str, optional): Ti√™u ƒë·ªÅ th√¥ng b√°o
            data (Dict, optional): D·ªØ li·ªáu b·ªï sung
            channels (List[str], optional): Danh s√°ch k√™nh c·∫ßn g·ª≠i, None ƒë·ªÉ g·ª≠i t·∫•t c·∫£
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        results = {}
        
        # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh k√™nh, s·ª≠ d·ª•ng t·∫•t c·∫£ k√™nh ƒë√£ b·∫≠t
        if channels is None:
            use_channels = [name for name, channel in self.channels.items() if channel.enabled]
        else:
            use_channels = [name for name in channels if name in self.channels and self.channels[name].enabled]
        
        if not use_channels:
            logger.warning("Kh√¥ng c√≥ k√™nh th√¥ng b√°o n√†o kh·∫£ d·ª•ng ƒë·ªÉ g·ª≠i th√¥ng b√°o")
            return results
        
        # G·ª≠i th√¥ng b√°o qua t·ª´ng k√™nh
        for channel_name in use_channels:
            channel = self.channels[channel_name]
            try:
                result = channel.send(message, subject, data)
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results
    
    def notify_new_position(self, position_data: Dict) -> Dict[str, bool]:
        """
        Th√¥ng b√°o v·ªÅ v·ªã th·∫ø m·ªõi
        
        Args:
            position_data (Dict): D·ªØ li·ªáu v·ªã th·∫ø
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        results = {}
        
        for channel_name, channel in self.channels.items():
            if not channel.enabled:
                continue
            
            try:
                if isinstance(channel, TelegramNotifier):
                    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c chuy√™n bi·ªát cho Telegram
                    result = channel.send_position_notification(position_data)
                else:
                    # ƒê·ªëi v·ªõi c√°c k√™nh kh√°c, ƒë·ªãnh d·∫°ng message theo c√°ch ri√™ng
                    formatted_message = channel.format_message('new_position', position_data)
                    subject = f"V·ªã th·∫ø m·ªõi: {position_data.get('symbol')} {position_data.get('side')}"
                    result = channel.send(formatted_message, subject, position_data)
                
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o v·ªã th·∫ø m·ªõi qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results
    
    def notify_position_closed(self, position_data: Dict) -> Dict[str, bool]:
        """
        Th√¥ng b√°o v·ªÅ v·ªã th·∫ø ƒë√£ ƒë√≥ng
        
        Args:
            position_data (Dict): D·ªØ li·ªáu v·ªã th·∫ø
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        results = {}
        
        for channel_name, channel in self.channels.items():
            if not channel.enabled:
                continue
            
            try:
                if isinstance(channel, TelegramNotifier):
                    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c chuy√™n bi·ªát cho Telegram
                    result = channel.send_position_close_notification(position_data)
                else:
                    # ƒê·ªëi v·ªõi c√°c k√™nh kh√°c, ƒë·ªãnh d·∫°ng message theo c√°ch ri√™ng
                    formatted_message = channel.format_message('position_closed', position_data)
                    subject = f"V·ªã th·∫ø ƒë√≥ng: {position_data.get('symbol')} {position_data.get('side')}"
                    result = channel.send(formatted_message, subject, position_data)
                
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o v·ªã th·∫ø ƒë√≥ng qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results
    
    def notify_trailing_stop(self, position_data: Dict) -> Dict[str, bool]:
        """
        Th√¥ng b√°o v·ªÅ trailing stop ƒë√£ k√≠ch ho·∫°t
        
        Args:
            position_data (Dict): D·ªØ li·ªáu v·ªã th·∫ø
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        results = {}
        
        for channel_name, channel in self.channels.items():
            if not channel.enabled:
                continue
            
            try:
                if isinstance(channel, TelegramNotifier):
                    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c chuy√™n bi·ªát cho Telegram
                    result = channel.send_trailing_stop_notification(position_data)
                else:
                    # ƒê·ªëi v·ªõi c√°c k√™nh kh√°c, ƒë·ªãnh d·∫°ng message theo c√°ch ri√™ng
                    formatted_message = channel.format_message('trailing_stop_activated', position_data)
                    subject = f"Trailing Stop: {position_data.get('symbol')} {position_data.get('side')}"
                    result = channel.send(formatted_message, subject, position_data)
                
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o trailing stop qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results
    
    def notify_error(self, error_type: str, error_message: str) -> Dict[str, bool]:
        """
        Th√¥ng b√°o v·ªÅ l·ªói
        
        Args:
            error_type (str): Lo·∫°i l·ªói
            error_message (str): Chi ti·∫øt l·ªói
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        data = {
            'error_type': error_type,
            'error_message': error_message
        }
        results = {}
        
        for channel_name, channel in self.channels.items():
            if not channel.enabled:
                continue
            
            try:
                formatted_message = channel.format_message('error', data)
                subject = f"L·ªói: {error_type}"
                result = channel.send(formatted_message, subject, data)
                
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o l·ªói qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results
    
    def notify_performance(self, performance_data: Dict) -> Dict[str, bool]:
        """
        Th√¥ng b√°o v·ªÅ hi·ªáu su·∫•t
        
        Args:
            performance_data (Dict): D·ªØ li·ªáu hi·ªáu su·∫•t
            
        Returns:
            Dict[str, bool]: K·∫øt qu·∫£ g·ª≠i theo t·ª´ng k√™nh
        """
        results = {}
        
        for channel_name, channel in self.channels.items():
            if not channel.enabled:
                continue
            
            try:
                if isinstance(channel, TelegramNotifier):
                    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c chuy√™n bi·ªát cho Telegram
                    result = channel.send_performance_report(performance_data)
                else:
                    # ƒê·ªëi v·ªõi c√°c k√™nh kh√°c, ƒë·ªãnh d·∫°ng message theo c√°ch ri√™ng
                    formatted_message = channel.format_message('performance_report', performance_data)
                    subject = f"B√°o c√°o hi·ªáu su·∫•t: {performance_data.get('period', 'N/A')}"
                    result = channel.send(formatted_message, subject, performance_data)
                
                results[channel_name] = result
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o hi·ªáu su·∫•t qua k√™nh {channel_name}: {str(e)}")
                results[channel_name] = False
        
        return results


def main():
    """H√†m ch√≠nh ƒë·ªÉ test EnhancedNotification"""
    # T·∫°o d·ªØ li·ªáu v·ªã th·∫ø gi·∫£ l·∫≠p
    position_data = {
        "symbol": "BTCUSDT",
        "side": "LONG",
        "entry_price": 60000,
        "current_price": 61500,
        "quantity": 0.1,
        "leverage": 10,
        "stop_loss": 57000,
        "take_profit": 65000,
        "entry_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "profit_percent": 25.0  # (61500 - 60000) / 60000 * 100 * 10
    }
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o
    print("Kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o...")
    notification = EnhancedNotification()
    
    # Ki·ªÉm tra c√°c k√™nh ƒë√£ c·∫•u h√¨nh
    print(f"C√°c k√™nh th√¥ng b√°o: {list(notification.channels.keys())}")
    
    # Th·ª≠ g·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø m·ªõi
    print("\nG·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø m·ªõi:")
    results = notification.notify_new_position(position_data)
    print(f"K·∫øt qu·∫£ g·ª≠i: {results}")
    
    # T·∫°o d·ªØ li·ªáu v·ªã th·∫ø ƒë√£ ƒë√≥ng
    position_closed_data = position_data.copy()
    position_closed_data.update({
        "exit_price": 63000,
        "exit_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "profit_loss": (63000 - 60000) * 0.1 * 10,
        "profit_percent": 50.0,  # (63000 - 60000) / 60000 * 100 * 10
        "close_reason": "Take Profit"
    })
    
    # Th·ª≠ g·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø ƒë√£ ƒë√≥ng
    print("\nG·ª≠i th√¥ng b√°o v·ªÅ v·ªã th·∫ø ƒë√£ ƒë√≥ng:")
    results = notification.notify_position_closed(position_closed_data)
    print(f"K·∫øt qu·∫£ g·ª≠i: {results}")
    
    # T·∫°o d·ªØ li·ªáu hi·ªáu su·∫•t
    performance_data = {
        "period": "Th√°ng 3/2025",
        "total_pnl": 1250.75,
        "pnl_percent": 12.5,
        "total_trades": 25,
        "win_rate": 68.0,
        "max_drawdown": 5.2,
        "profit_factor": 2.3,
        "sharpe_ratio": 1.8
    }
    
    # Th·ª≠ g·ª≠i th√¥ng b√°o v·ªÅ hi·ªáu su·∫•t
    print("\nG·ª≠i b√°o c√°o hi·ªáu su·∫•t:")
    results = notification.notify_performance(performance_data)
    print(f"K·∫øt qu·∫£ g·ª≠i: {results}")
    
    # Th·ª≠ g·ª≠i th√¥ng b√°o v·ªÅ l·ªói
    print("\nG·ª≠i th√¥ng b√°o v·ªÅ l·ªói:")
    results = notification.notify_error("API_ERROR", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Binance API")
    print(f"K·∫øt qu·∫£ g·ª≠i: {results}")


if __name__ == "__main__":
    main()