#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script k√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† th√¥ng b√°o
Script n√†y:
1. Kh·ªüi t·∫°o v√† k√≠ch ho·∫°t EnhancedMarketUpdater
2. Thi·∫øt l·∫≠p th√¥ng b√°o chi ti·∫øt qua Telegram
3. B·∫Øt ƒë·∫ßu ph√¢n t√≠ch coin theo c·∫•u h√¨nh
4. Ch·∫°y trong ch·∫ø ƒë·ªô n·ªÅn v·ªõi l·ªãch tr√¨nh th√¥ng b√°o t·ª± ƒë·ªông
"""

import os
import sys
import time
import logging
import threading
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("market_analyzer_activation.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("market_analyzer")

# Import c√°c module c·∫ßn thi·∫øt
try:
    from enhanced_market_updater import EnhancedMarketUpdater
    from enhanced_binance_api import EnhancedBinanceAPI
    from enhanced_telegram_notifications import EnhancedTelegramNotifications
    from telegram_notifier import TelegramNotifier
    from detailed_trade_notifications import DetailedTradeNotifications
except ImportError as e:
    logger.error(f"L·ªói import module: {e}")
    logger.error("ƒê·∫£m b·∫£o ƒë√£ t·∫°o v√† c√†i ƒë·∫∑t ƒë√∫ng c√°c module c·∫ßn thi·∫øt")
    sys.exit(1)

def save_pid():
    """L∆∞u PID v√†o file ƒë·ªÉ c√≥ th·ªÉ d·ª´ng ti·∫øn tr√¨nh sau n√†y"""
    pid = os.getpid()
    
    with open('market_analyzer.pid', 'w') as f:
        f.write(str(pid))
    
    logger.info(f"ƒê√£ l∆∞u PID {pid} v√†o market_analyzer.pid")

def main():
    """H√†m ch√≠nh kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng"""
    try:
        logger.info("B·∫Øt ƒë·∫ßu k√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
        
        # L∆∞u PID
        save_pid()
        
        # Th√¥ng b√°o b·∫Øt ƒë·∫ßu
        telegram = TelegramNotifier()
        telegram.send_notification(
            "info",
            "<b>üöÄ B·∫ÆT ƒê·∫¶U K√çCH HO·∫†T H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG</b>\n\n"
            "ƒêang kh·ªüi t·∫°o c√°c module...\n"
            f"Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # Kh·ªüi t·∫°o Binance API
        binance_api = EnhancedBinanceAPI(
            config_path='account_config.json',
            testnet=True,
            auto_fallback=True
        )
        logger.info("ƒê√£ kh·ªüi t·∫°o Binance API")
        
        # Kh·ªüi t·∫°o th√¥ng b√°o Telegram n√¢ng cao
        telegram_notifications = EnhancedTelegramNotifications(
            notification_interval=30  # 30 ph√∫t/l·∫ßn th√¥ng b√°o
        )
        logger.info("ƒê√£ kh·ªüi t·∫°o th√¥ng b√°o Telegram n√¢ng cao")
        
        # Kh·ªüi t·∫°o th√¥ng b√°o giao d·ªãch chi ti·∫øt
        detailed_notifications = DetailedTradeNotifications()
        logger.info("ƒê√£ kh·ªüi t·∫°o th√¥ng b√°o giao d·ªãch chi ti·∫øt")
        
        # Kh·ªüi t·∫°o Market Updater
        market_updater = EnhancedMarketUpdater(
            config_path='account_config.json',
            update_interval=15,  # 15 ph√∫t/l·∫ßn c·∫≠p nh·∫≠t
            notification_interval=30  # 30 ph√∫t/l·∫ßn th√¥ng b√°o
        )
        logger.info("ƒê√£ kh·ªüi t·∫°o Enhanced Market Updater")
        
        # Kh·ªüi ƒë·ªông l·ªãch tr√¨nh th√¥ng b√°o
        telegram_notifications.start_scheduled_notifications()
        logger.info("ƒê√£ kh·ªüi ƒë·ªông l·ªãch tr√¨nh th√¥ng b√°o")
        
        # Kh·ªüi ƒë·ªông l·ªãch tr√¨nh c·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng
        market_updater.run_scheduled_updates()
        logger.info("ƒê√£ kh·ªüi ƒë·ªông l·ªãch tr√¨nh c·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng")
        
        # Th√¥ng b√°o h·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông
        telegram.send_notification(
            "success",
            "<b>‚úÖ H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG ƒê√É ƒê∆Ø·ª¢C K√çCH HO·∫†T</b>\n\n"
            "üìä <b>Th√¥ng tin chi ti·∫øt:</b>\n"
            f"‚Ä¢ C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng: m·ªói 15 ph√∫t\n"
            f"‚Ä¢ Th√¥ng b√°o ph√¢n t√≠ch: m·ªói 30 ph√∫t\n"
            f"‚Ä¢ Ch·∫ø ƒë·ªô testnet: B·∫≠t\n"
            f"‚Ä¢ C√°c coin theo d√µi: {len(market_updater.symbols)}\n\n"
            f"<i>Th·ªùi gian k√≠ch ho·∫°t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        
        # C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng ngay l·∫≠p t·ª©c
        logger.info("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch th·ªã tr∆∞·ªùng l·∫ßn ƒë·∫ßu")
        market_updater.update_all_markets()
        logger.info("ƒê√£ ho√†n th√†nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng l·∫ßn ƒë·∫ßu")
        
        # G·ª≠i th√¥ng b√°o ph√¢n t√≠ch th·ªã tr∆∞·ªùng ngay l·∫≠p t·ª©c
        telegram_notifications.send_market_update()
        
        logger.info("H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng ƒëang ch·∫°y trong n·ªÅn")
        
        # Gi·ªØ cho ti·∫øn tr√¨nh ch·∫°y
        try:
            while True:
                time.sleep(60)
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
        
        # D·ª´ng c√°c l·ªãch tr√¨nh khi k·∫øt th√∫c
        telegram_notifications.stop_scheduled_notifications()
        market_updater.stop_scheduled_updates()
        
        # Th√¥ng b√°o h·ªá th·ªëng ƒë√£ d·ª´ng
        telegram.send_notification(
            "warning",
            "<b>‚ö†Ô∏è H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG ƒê√É D·ª™NG</b>\n\n"
            f"<i>Th·ªùi gian d·ª´ng: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        
        logger.info("H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng ƒë√£ d·ª´ng th√†nh c√¥ng")
        return 0
        
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong ƒë·ª£i khi kh·ªüi ƒë·ªông h·ªá th·ªëng: {e}")
        
        # Th√¥ng b√°o l·ªói qua Telegram
        try:
            telegram = TelegramNotifier()
            telegram.send_notification(
                "error",
                "<b>‚ùå L·ªñI KHI KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG PH√ÇN T√çCH</b>\n\n"
                f"Th√¥ng b√°o l·ªói: {str(e)}\n\n"
                f"<i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            )
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o
            
        return 1

if __name__ == "__main__":
    sys.exit(main())