#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Activate Market Analyzer
-----------------------
Script kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng t·ª± ƒë·ªông v·ªõi c·∫£nh b√°o qua Telegram
"""

import os
import sys
import json
import time
import logging
import argparse
import threading
from datetime import datetime
import schedule

from market_analysis_system import MarketAnalysisSystem
from enhanced_telegram_notifications import EnhancedTelegramNotifications

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("market_analyzer.log"),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("activate_market_analyzer")

class MarketAnalyzerActivator:
    """
    K√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng t·ª± ƒë·ªông
    """
    
    def __init__(self, 
                 config_path: str = "configs/market_analysis_config.json",
                 notification_interval: int = 60,
                 run_immediately: bool = True):
        """
        Kh·ªüi t·∫°o activator
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            notification_interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c th√¥ng b√°o (ph√∫t)
            run_immediately: Ch·∫°y ph√¢n t√≠ch ngay l·∫≠p t·ª©c sau khi kh·ªüi t·∫°o
        """
        self.config_path = config_path
        self.notification_interval = notification_interval
        self.analyzer = MarketAnalysisSystem(config_path)
        self.notifier = EnhancedTelegramNotifications(config_path, notification_interval)
        
        # Ch·∫°y ph√¢n t√≠ch ngay l·∫≠p t·ª©c n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if run_immediately:
            self.run_analysis()
        
        # B·∫Øt ƒë·∫ßu l·ªãch tr√¨nh th√¥ng b√°o
        self.start_schedule()
    
    def run_analysis(self):
        """Ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† l∆∞u k·∫øt qu·∫£"""
        try:
            logger.info("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch th·ªã tr∆∞·ªùng...")
            start_time = time.time()
            
            # L·∫•y c·∫•u h√¨nh ph√¢n t√≠ch
            symbols = self.analyzer.config.get('symbols_to_analyze', ["BTCUSDT", "ETHUSDT"])
            
            # Ph√¢n t√≠ch th·ªã tr∆∞·ªùng t·ªïng th·ªÉ
            market_data = self.analyzer.analyze_market()
            
            # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch th·ªã tr∆∞·ªùng
            with open('market_overview.json', 'w') as f:
                json.dump(market_data, f, indent=4)
            
            logger.info(f"ƒê√£ ho√†n th√†nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng t·ªïng th·ªÉ")
            
            # Ph√¢n t√≠ch t·ª´ng symbol
            all_analysis = {}
            primary_tf = self.analyzer.config.get('primary_timeframe', "1h")
            
            for symbol in symbols:
                logger.info(f"ƒêang ph√¢n t√≠ch {symbol}...")
                analysis = self.analyzer.analyze_symbol(symbol, primary_tf)
                all_analysis[symbol] = analysis
                
                # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch cho t·ª´ng symbol
                with open(f'market_analysis_{symbol.lower()}.json', 'w') as f:
                    json.dump(analysis, f, indent=4)
            
            # L∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ ph√¢n t√≠ch
            with open('market_analysis.json', 'w') as f:
                json.dump(all_analysis, f, indent=4)
            
            # T·∫°o ƒë·ªÅ xu·∫•t giao d·ªãch
            recommendations = self.analyzer.generate_trading_recommendations(symbols)
            
            # L∆∞u ƒë·ªÅ xu·∫•t giao d·ªãch
            with open('all_recommendations.json', 'w') as f:
                json.dump(recommendations, f, indent=4)
            
            # T·∫°o b√°o c√°o th·ªã tr∆∞·ªùng
            market_report = self.analyzer.generate_market_report()
            
            # L∆∞u b√°o c√°o th·ªã tr∆∞·ªùng
            with open('market_report.json', 'w') as f:
                json.dump(market_report, f, indent=4)
            
            elapsed_time = time.time() - start_time
            logger.info(f"ƒê√£ ho√†n th√†nh ph√¢n t√≠ch t·∫•t c·∫£ ({elapsed_time:.2f} gi√¢y)")
            
            return all_analysis, recommendations, market_report
            
        except Exception as e:
            logger.error(f"L·ªói khi ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {e}")
            return None, None, None
    
    def start_schedule(self):
        """B·∫Øt ƒë·∫ßu l·ªãch tr√¨nh ph√¢n t√≠ch v√† th√¥ng b√°o"""
        try:
            # L·∫•y kho·∫£ng th·ªùi gian ph√¢n t√≠ch t·ª´ c·∫•u h√¨nh
            analysis_interval = self.analyzer.config.get('analysis_interval', 1800)  # M·∫∑c ƒë·ªãnh 30 ph√∫t
            analysis_interval_minutes = max(1, analysis_interval // 60)  # Chuy·ªÉn ƒë·ªïi gi√¢y sang ph√∫t
            
            logger.info(f"Thi·∫øt l·∫≠p ph√¢n t√≠ch th·ªã tr∆∞·ªùng m·ªói {analysis_interval_minutes} ph√∫t")
            
            # L·ªãch tr√¨nh ph√¢n t√≠ch
            schedule.every(analysis_interval_minutes).minutes.do(self.run_and_notify)
            
            # B·∫Øt ƒë·∫ßu th√¥ng b√°o Telegram
            self.notifier.start_scheduled_notifications()
            
            # B·∫Øt ƒë·∫ßu thread ƒë·ªÉ ch·∫°y l·ªãch tr√¨nh
            self.scheduler_thread = threading.Thread(target=self._run_schedule, daemon=True)
            self.scheduler_thread.start()
            
            logger.info("ƒê√£ b·∫Øt ƒë·∫ßu l·ªãch tr√¨nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
            
            # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
            self.send_startup_notification()
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi b·∫Øt ƒë·∫ßu l·ªãch tr√¨nh: {e}")
            return False
    
    def _run_schedule(self):
        """H√†m ch·∫°y l·ªãch tr√¨nh trong thread ri√™ng"""
        logger.info("Thread l·ªãch tr√¨nh ph√¢n t√≠ch ƒë√£ b·∫Øt ƒë·∫ßu")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(1)
        except Exception as e:
            logger.error(f"L·ªói trong thread l·ªãch tr√¨nh: {e}")
        
        logger.info("Thread l·ªãch tr√¨nh ph√¢n t√≠ch ƒë√£ k·∫øt th√∫c")
    
    def run_and_notify(self):
        """Ch·∫°y ph√¢n t√≠ch v√† g·ª≠i th√¥ng b√°o"""
        analysis, recommendations, market_report = self.run_analysis()
        
        if analysis and recommendations:
            # G·ª≠i th√¥ng b√°o th·ªã tr∆∞·ªùng
            self.notifier.send_market_update()
            
            # T√¨m c√°c t√≠n hi·ªáu m·∫°nh ƒë·ªÉ g·ª≠i c·∫£nh b√°o
            for symbol, data in analysis.items():
                summary = data.get('summary', {})
                signal = summary.get('overall_signal', 'NEUTRAL')
                confidence = summary.get('confidence', 0)
                
                if signal != 'NEUTRAL' and confidence >= 70:
                    # T·∫°o d·ªØ li·ªáu t√≠n hi·ªáu
                    signal_data = {
                        'symbol': symbol,
                        'signal': signal,
                        'confidence': confidence,
                        'price': data.get('current_price', 0),
                        'description': summary.get('description', ''),
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    # Th√™m th√¥ng tin gi√° m·ª•c ti√™u v√† stop loss
                    price_prediction = summary.get('price_prediction', {})
                    if signal in ['STRONG_BUY', 'BUY']:
                        signal_data['target_price'] = price_prediction.get('resistance', 0)
                        signal_data['stop_loss'] = price_prediction.get('support', 0)
                    elif signal in ['STRONG_SELL', 'SELL']:
                        signal_data['target_price'] = price_prediction.get('support', 0)
                        signal_data['stop_loss'] = price_prediction.get('resistance', 0)
                    
                    # G·ª≠i c·∫£nh b√°o t√≠n hi·ªáu
                    self.notifier.send_signal_alert(symbol, signal_data)
            
            # G·ª≠i ƒë·ªÅ xu·∫•t giao d·ªãch t·ªët nh·∫•t n·∫øu c√≥
            top_opportunities = recommendations.get('top_opportunities', [])
            if top_opportunities:
                for opportunity in top_opportunities[:1]:  # Ch·ªâ l·∫•y c∆° h·ªôi t·ªët nh·∫•t
                    symbol = opportunity.get('symbol', '')
                    
                    # Ch·ªâ g·ª≠i th√¥ng b√°o n·∫øu c√≥ t√≠n hi·ªáu m·∫°nh
                    if opportunity.get('action') in ['BUY', 'SELL'] and opportunity.get('confidence', 0) >= 75:
                        # T·∫°o d·ªØ li·ªáu trade
                        trade_data = {
                            'symbol': symbol,
                            'side': 'BUY' if opportunity.get('action') == 'BUY' else 'SELL',
                            'entry_price': opportunity.get('current_price', 0),
                            'quantity': 0.1,  # Gi√° tr·ªã m·∫´u
                            'take_profit': opportunity.get('target_price', 0),
                            'stop_loss': opportunity.get('stop_loss', 0),
                            'reason': opportunity.get('description', ''),
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        }
                        
                        # G·ª≠i th√¥ng b√°o giao d·ªãch
                        self.notifier.send_trade_notification(trade_data)
    
    def send_startup_notification(self):
        """G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng"""
        message = "<b>üöÄ H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG ƒê√É KH·ªûI ƒê·ªòNG</b>\n\n"
        
        # Th√™m th√¥ng tin c·∫•u h√¨nh
        symbols = self.analyzer.config.get('symbols_to_analyze', [])
        timeframes = self.analyzer.config.get('timeframes', [])
        
        message += f"<b>ƒêang theo d√µi:</b> {', '.join(symbols)}\n"
        message += f"<b>Khung th·ªùi gian:</b> {', '.join(timeframes)}\n"
        message += f"<b>Khung th·ªùi gian ch√≠nh:</b> {self.analyzer.config.get('primary_timeframe', '1h')}\n"
        
        # Th√™m th√¥ng tin l·ªãch tr√¨nh
        analysis_interval = self.analyzer.config.get('analysis_interval', 1800)
        analysis_interval_minutes = max(1, analysis_interval // 60)
        
        message += f"\n<b>L·ªãch tr√¨nh:</b>\n"
        message += f"‚Ä¢ Ph√¢n t√≠ch th·ªã tr∆∞·ªùng: M·ªói {analysis_interval_minutes} ph√∫t\n"
        message += f"‚Ä¢ Th√¥ng b√°o th·ªã tr∆∞·ªùng: M·ªói {self.notification_interval} ph√∫t\n"
        
        # Th√™m th√¥ng tin v·ªÅ ƒë·ªô tin c·∫≠y t·ªëi thi·ªÉu
        min_confidence = self.notifier.config.get('min_signal_confidence', 70)
        message += f"\n<b>C·∫•u h√¨nh th√¥ng b√°o:</b>\n"
        message += f"‚Ä¢ ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu: {min_confidence}%\n"
        
        # Th√™m th√¥ng tin v·ªÅ gi·ªù y√™n tƒ©nh
        quiet_hours = self.notifier.config.get('quiet_hours', {})
        if quiet_hours.get('enabled', False):
            start_hour = quiet_hours.get('start_hour', 0)
            end_hour = quiet_hours.get('end_hour', 7)
            message += f"‚Ä¢ Gi·ªù y√™n tƒ©nh: {start_hour}:00 - {end_hour}:00\n"
        
        # Th√™m th·ªùi gian
        message += f"\n‚è± <i>Kh·ªüi ƒë·ªông l√∫c: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        
        # G·ª≠i th√¥ng b√°o
        self.notifier.telegram.send_notification("info", message)

def main():
    """H√†m ch√≠nh"""
    parser = argparse.ArgumentParser(description='K√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng t·ª± ƒë·ªông')
    parser.add_argument('--config', type=str, default="configs/market_analysis_config.json", help='ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh')
    parser.add_argument('--interval', type=int, default=60, help='Kho·∫£ng th·ªùi gian gi·ªØa c√°c th√¥ng b√°o (ph√∫t)')
    parser.add_argument('--no-immediate', action='store_false', dest='run_immediately', help='Kh√¥ng ch·∫°y ph√¢n t√≠ch ngay l·∫≠p t·ª©c')
    
    args = parser.parse_args()
    
    activator = MarketAnalyzerActivator(
        config_path=args.config,
        notification_interval=args.interval,
        run_immediately=args.run_immediately
    )
    
    try:
        # Gi·ªØ thread ch√≠nh ch·∫°y
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("ƒê√£ nh·∫≠n t√≠n hi·ªáu tho√°t. D·ª´ng h·ªá th·ªëng...")
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
    
    logger.info("H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng ƒë√£ d·ª´ng")

if __name__ == "__main__":
    main()