#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script k√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† th√¥ng b√°o
Script n√†y:
1. Kh·ªüi t·∫°o v√† k√≠ch ho·∫°t Market Analysis System
2. Thi·∫øt l·∫≠p th√¥ng b√°o chi ti·∫øt qua Telegram
3. B·∫Øt ƒë·∫ßu ph√¢n t√≠ch coin theo c·∫•u h√¨nh
4. Ch·∫°y trong ch·∫ø ƒë·ªô n·ªÅn v·ªõi l·ªãch tr√¨nh th√¥ng b√°o t·ª± ƒë·ªông
"""

import os
import sys
import time
import logging
import threading
import schedule
import json
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("market_analyzer_activation.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("market_analyzer")

# Import c√°c module c·∫ßn thi·∫øt
try:
    from telegram_notifier import TelegramNotifier
    from market_analysis_system import MarketAnalysisSystem
    from enhanced_telegram_notifications import EnhancedTelegramNotifications
except ImportError as e:
    logger.error(f"L·ªói import module: {e}")
    logger.error("ƒê·∫£m b·∫£o ƒë√£ t·∫°o v√† c√†i ƒë·∫∑t ƒë√∫ng c√°c module c·∫ßn thi·∫øt")
    sys.exit(1)

def save_pid():
    """L∆∞u PID v√†o file ƒë·ªÉ c√≥ th·ªÉ d·ª´ng ti·∫øn tr√¨nh sau n√†y"""
    pid = os.getpid()
    
    with open('market_analyzer.pid', 'w') as f:
        f.write(str(pid))
    
    logger.info(f"ƒê√£ l∆∞u PID {pid} v√†o market_analyzer.pid")

def scheduled_market_analysis(market_analyzer, telegram, symbols=None, timeframes=None):
    """
    Ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng theo l·ªãch tr√¨nh

    Args:
        market_analyzer: ƒê·ªëi t∆∞·ª£ng MarketAnalysisSystem
        telegram: ƒê·ªëi t∆∞·ª£ng TelegramNotifier
        symbols: Danh s√°ch c√°c c·∫∑p ti·ªÅn ƒëi·ªán t·ª≠ c·∫ßn ph√¢n t√≠ch
        timeframes: Danh s√°ch c√°c khung th·ªùi gian c·∫ßn ph√¢n t√≠ch
    """
    logger.info("ƒêang ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng theo l·ªãch tr√¨nh...")
    
    try:
        # Ph√¢n t√≠ch t·ªïng th·ªÉ th·ªã tr∆∞·ªùng
        market_analyzer.analyze_market()
        logger.info("ƒê√£ ph√¢n t√≠ch t·ªïng th·ªÉ th·ªã tr∆∞·ªùng")
        
        # Ph√¢n t√≠ch c√°c c·∫∑p coin theo c·∫•u h√¨nh
        if symbols is None:
            symbols = market_analyzer.config['symbols_to_analyze']
        
        if timeframes is None:
            timeframes = market_analyzer.config['timeframes']
        
        # Ph√¢n t√≠ch t·ª´ng coin v√† t·∫°o b√°o c√°o
        analysis_results = {}
        for symbol in symbols:
            logger.info(f"ƒêang ph√¢n t√≠ch {symbol}...")
            symbol_result = market_analyzer.analyze_symbol(symbol, timeframes)
            analysis_results[symbol] = symbol_result
            
            # L∆∞u ph√¢n t√≠ch ri√™ng cho t·ª´ng coin
            with open(f"market_analysis_{symbol.lower()}.json", "w") as f:
                json.dump(symbol_result, f, indent=4)
            
            # T·∫°o file recommendation
            recommendation = {
                'symbol': symbol,
                'price': market_analyzer.api.get_symbol_price(symbol),
                'signal': 'NEUTRAL',
                'signal_text': 'ƒêang ph√¢n t√≠ch d·ªØ li·ªáu',
                'confidence': 50,
                'action': 'THEO D√ïI',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'timeframes': {},
                'summary': 'T·ªïng h·ª£p c√°c ch·ªâ b√°o v√† ph√¢n t√≠ch k·ªπ thu·∫≠t'
            }
            
            # C·∫≠p nh·∫≠t recommendation d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch
            if symbol_result:
                # T√≠nh to√°n t√≠n hi·ªáu t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch
                bullish_count = 0
                bearish_count = 0
                neutral_count = 0
                total_signals = 0
                
                # ƒê√°nh gi√° t√≠n hi·ªáu t·ª´ c√°c khung th·ªùi gian
                recommendation['timeframes'] = {}
                for timeframe, data in symbol_result.items():
                    if not isinstance(data, dict):
                        continue
                        
                    indicators = data.get('indicators', {})
                    signal = 'NEUTRAL'
                    signal_strength = 0
                    
                    # ƒê√°nh gi√° RSI
                    rsi = indicators.get('rsi', 50)
                    if rsi < 30:
                        bullish_count += 1
                        signal_strength += 1
                    elif rsi > 70:
                        bearish_count += 1
                        signal_strength += 1
                    else:
                        neutral_count += 1
                    
                    # ƒê√°nh gi√° MACD
                    macd = indicators.get('macd', {})
                    if macd.get('histogram', 0) > 0 and macd.get('signal_crossover', '') == 'bullish':
                        bullish_count += 1
                        signal_strength += 1
                    elif macd.get('histogram', 0) < 0 and macd.get('signal_crossover', '') == 'bearish':
                        bearish_count += 1
                        signal_strength += 1
                    
                    # ƒê√°nh gi√° MA
                    ma_trend = indicators.get('ma_trend', 'neutral')
                    if ma_trend == 'bullish':
                        bullish_count += 1
                    elif ma_trend == 'bearish':
                        bearish_count += 1
                    else:
                        neutral_count += 1
                    
                    # X√°c ƒë·ªãnh t√≠n hi·ªáu cho timeframe n√†y
                    if bullish_count > bearish_count and bullish_count > neutral_count:
                        signal = 'BUY'
                        if bullish_count >= 3:
                            signal = 'STRONG_BUY'
                    elif bearish_count > bullish_count and bearish_count > neutral_count:
                        signal = 'SELL'
                        if bearish_count >= 3:
                            signal = 'STRONG_SELL'
                    
                    # C·∫≠p nh·∫≠t th√¥ng tin cho timeframe
                    recommendation['timeframes'][timeframe] = {
                        'signal': signal,
                        'strength': signal_strength,
                        'indicators': indicators
                    }
                    
                    total_signals += 1
                
                # X√°c ƒë·ªãnh t√≠n hi·ªáu t·ªïng th·ªÉ
                if total_signals > 0:
                    if bullish_count > bearish_count and bullish_count > neutral_count:
                        recommendation['signal'] = 'BUY'
                        if bullish_count >= total_signals * 0.7:
                            recommendation['signal'] = 'STRONG_BUY'
                        recommendation['signal_text'] = 'T√≠n hi·ªáu mua d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t'
                        recommendation['action'] = 'XEM X√âT MUA'
                        recommendation['confidence'] = min(100, int(bullish_count / total_signals * 100))
                    elif bearish_count > bullish_count and bearish_count > neutral_count:
                        recommendation['signal'] = 'SELL'
                        if bearish_count >= total_signals * 0.7:
                            recommendation['signal'] = 'STRONG_SELL'
                        recommendation['signal_text'] = 'T√≠n hi·ªáu b√°n d·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t'
                        recommendation['action'] = 'XEM X√âT B√ÅN'
                        recommendation['confidence'] = min(100, int(bearish_count / total_signals * 100))
                    else:
                        recommendation['signal'] = 'NEUTRAL'
                        recommendation['signal_text'] = 'Th·ªã tr∆∞·ªùng ƒëang ƒëi ngang, ch·ªù t√≠n hi·ªáu r√µ r√†ng'
                        recommendation['action'] = 'THEO D√ïI'
                        recommendation['confidence'] = max(40, min(60, int(neutral_count / total_signals * 100)))
            
            with open(f"recommendation_{symbol.lower()}.json", "w") as f:
                json.dump(recommendation, f, indent=4)
        
        # L∆∞u k·∫øt qu·∫£ t·ªïng h·ª£p
        with open("market_analysis.json", "w") as f:
            json.dump(analysis_results, f, indent=4)
        
        # G·ª≠i th√¥ng b√°o
        telegram.send_notification(
            "info", 
            f"<b>‚úÖ ƒê√É HO√ÄN TH√ÄNH PH√ÇN T√çCH {len(symbols)} COIN</b>\n\n"
            f"Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n"
            f"Khung th·ªùi gian: {', '.join(timeframes)}"
        )
        
        logger.info(f"ƒê√£ ho√†n th√†nh ph√¢n t√≠ch {len(symbols)} coin tr√™n {len(timeframes)} khung th·ªùi gian")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {str(e)}")
        
        # G·ª≠i th√¥ng b√°o l·ªói
        telegram.send_notification(
            "error",
            f"<b>‚ùå L·ªñI KHI PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG</b>\n\n"
            f"Th√¥ng b√°o l·ªói: {str(e)}\n\n"
            f"<i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        return False

def main():
    """H√†m ch√≠nh kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng"""
    try:
        logger.info("B·∫Øt ƒë·∫ßu k√≠ch ho·∫°t h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
        
        # L∆∞u PID
        save_pid()
        
        # Kh·ªüi t·∫°o TelegramNotifier
        telegram = TelegramNotifier()
        
        # Th√¥ng b√°o b·∫Øt ƒë·∫ßu
        telegram.send_notification(
            "info",
            "<b>üöÄ B·∫ÆT ƒê·∫¶U K√çCH HO·∫†T H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG</b>\n\n"
            "ƒêang kh·ªüi t·∫°o c√°c module...\n"
            f"Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        # Kh·ªüi t·∫°o MarketAnalysisSystem
        config_path = "configs/market_analysis_config.json"
        market_analyzer = MarketAnalysisSystem(config_path=config_path)
        logger.info(f"ƒê√£ kh·ªüi t·∫°o MarketAnalysisSystem t·ª´ {config_path}")
        
        # Kh·ªüi t·∫°o th√¥ng b√°o Telegram n√¢ng cao
        telegram_notifications = EnhancedTelegramNotifications(
            notification_interval=30  # 30 ph√∫t/l·∫ßn th√¥ng b√°o
        )
        logger.info("ƒê√£ kh·ªüi t·∫°o th√¥ng b√°o Telegram n√¢ng cao")
        
        # ƒê·ªçc c·∫•u h√¨nh
        symbols = market_analyzer.config['symbols_to_analyze']
        timeframes = market_analyzer.config['timeframes']
        primary_timeframe = market_analyzer.config['primary_timeframe']
        
        # Thi·∫øt l·∫≠p l·ªãch tr√¨nh ph√¢n t√≠ch
        schedule.every(30).minutes.do(
            scheduled_market_analysis, 
            market_analyzer=market_analyzer, 
            telegram=telegram, 
            symbols=symbols, 
            timeframes=timeframes
        )
        
        # Thi·∫øt l·∫≠p l·ªãch tr√¨nh th√¥ng b√°o
        schedule.every(60).minutes.do(telegram_notifications.send_market_update)
        
        # G·ª≠i th√¥ng b√°o v·ªÅ c·∫•u h√¨nh
        telegram.send_notification(
            "success",
            "<b>‚úÖ H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG ƒê√É ƒê∆Ø·ª¢C K√çCH HO·∫†T</b>\n\n"
            "üìä <b>Th√¥ng tin chi ti·∫øt:</b>\n"
            f"‚Ä¢ C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng: m·ªói 30 ph√∫t\n"
            f"‚Ä¢ Th√¥ng b√°o ph√¢n t√≠ch: m·ªói 60 ph√∫t\n"
            f"‚Ä¢ Khung th·ªùi gian ch√≠nh: {primary_timeframe}\n"
            f"‚Ä¢ C√°c coin theo d√µi: {len(symbols)}\n"
            f"‚Ä¢ C√°c khung th·ªùi gian: {', '.join(timeframes)}\n\n"
            f"<i>Th·ªùi gian k√≠ch ho·∫°t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        
        # Ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng ngay l·∫≠p t·ª©c
        logger.info("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch th·ªã tr∆∞·ªùng l·∫ßn ƒë·∫ßu")
        scheduled_market_analysis(market_analyzer, telegram, symbols, timeframes)
        logger.info("ƒê√£ ho√†n th√†nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng l·∫ßn ƒë·∫ßu")
        
        # Ch·∫°y th√¥ng b√°o ph√¢n t√≠ch ngay l·∫≠p t·ª©c
        telegram_notifications.send_market_update()
        
        logger.info("H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng ƒëang ch·∫°y trong n·ªÅn")
        
        # Gi·ªØ cho ti·∫øn tr√¨nh ch·∫°y v√† ch·∫°y l·ªãch tr√¨nh
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
        
        # Th√¥ng b√°o h·ªá th·ªëng ƒë√£ d·ª´ng
        telegram.send_notification(
            "warning",
            "<b>‚ö†Ô∏è H·ªÜ TH·ªêNG PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG ƒê√É D·ª™NG</b>\n\n"
            f"<i>Th·ªùi gian d·ª´ng: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
        )
        
        logger.info("H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng ƒë√£ d·ª´ng th√†nh c√¥ng")
        return 0
        
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong ƒë·ª£i khi kh·ªüi ƒë·ªông h·ªá th·ªëng: {e}")
        
        # Th√¥ng b√°o l·ªói qua Telegram
        try:
            telegram = TelegramNotifier()
            telegram.send_notification(
                "error",
                "<b>‚ùå L·ªñI KHI KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG PH√ÇN T√çCH</b>\n\n"
                f"Th√¥ng b√°o l·ªói: {str(e)}\n\n"
                f"<i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            )
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o
            
        return 1

if __name__ == "__main__":
    sys.exit(main())