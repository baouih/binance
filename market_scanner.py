#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import json
import logging
import threading
from typing import Dict, List, Any
from datetime import datetime

from market_analyzer import MarketAnalyzer
from position_manager import PositionManager
from risk_manager import RiskManager
from advanced_telegram_notifier import TelegramNotifier

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("market_scanner")

class MarketScanner:
    """
    L·ªõp qu√©t th·ªã tr∆∞·ªùng ƒë·ªÉ t√¨m ki·∫øm c√°c c∆° h·ªôi giao d·ªãch
    """
    def __init__(self, testnet=True):
        """
        Kh·ªüi t·∫°o Market Scanner
        
        :param testnet: S·ª≠ d·ª•ng testnet hay kh√¥ng
        """
        self.testnet = testnet
        self.active = False
        self.scan_thread = None
        self.scan_interval = 300  # Qu√©t m·ªói 5 ph√∫t
        self.pairs_to_scan = [
            "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "DOGEUSDT", 
            "ADAUSDT", "XRPUSDT", "DOTUSDT", "LTCUSDT", "AVAXUSDT",
            "MATICUSDT", "LINKUSDT", "UNIUSDT", "ATOMUSDT", "VETUSDT"
        ]
        self.timeframes = ["15m", "1h", "4h"]  # C√°c khung th·ªùi gian c·∫ßn qu√©t
        self.min_score_threshold = 65  # ƒêi·ªÉm s·ªë t·ªëi thi·ªÉu ƒë·ªÉ g·ª≠i th√¥ng b√°o
        
        try:
            # Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng ph√¢n t√≠ch
            self.market_analyzer = MarketAnalyzer(testnet=testnet)
            self.position_manager = PositionManager(testnet=testnet)
            
            # T·∫£i c·∫•u h√¨nh t·ª´ file n·∫øu c√≥
            self.load_config()
            
            logger.info(f"ƒê√£ kh·ªüi t·∫°o MarketScanner v·ªõi {len(self.pairs_to_scan)} c·∫∑p v√† {len(self.timeframes)} khung th·ªùi gian")
        except Exception as e:
            logger.error(f"L·ªói khi kh·ªüi t·∫°o MarketScanner: {str(e)}", exc_info=True)
    
    def load_config(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file"""
        config_path = "configs/market_scanner_config.json"
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                
                # C·∫≠p nh·∫≠t c·∫•u h√¨nh
                self.pairs_to_scan = config.get("pairs_to_scan", self.pairs_to_scan)
                self.timeframes = config.get("timeframes", self.timeframes)
                self.scan_interval = config.get("scan_interval", self.scan_interval)
                self.min_score_threshold = config.get("min_score_threshold", self.min_score_threshold)
                
                logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_path}")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh: {str(e)}", exc_info=True)
    
    def save_config(self):
        """L∆∞u c·∫•u h√¨nh v√†o file"""
        config_path = "configs/market_scanner_config.json"
        try:
            # T·∫°o th∆∞ m·ª•c configs n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs("configs", exist_ok=True)
            
            config = {
                "pairs_to_scan": self.pairs_to_scan,
                "timeframes": self.timeframes,
                "scan_interval": self.scan_interval,
                "min_score_threshold": self.min_score_threshold
            }
            
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=4)
            
            logger.info(f"ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {config_path}")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u c·∫•u h√¨nh: {str(e)}", exc_info=True)
    
    def start_scanning(self):
        """B·∫Øt ƒë·∫ßu qu√©t th·ªã tr∆∞·ªùng"""
        if self.scan_thread and self.scan_thread.is_alive():
            logger.warning("ƒê√£ c√≥ m·ªôt lu·ªìng qu√©t ƒëang ch·∫°y")
            return False
        
        self.active = True
        self.scan_thread = threading.Thread(target=self._scan_loop, daemon=True)
        self.scan_thread.start()
        
        logger.info("ƒê√£ b·∫Øt ƒë·∫ßu qu√©t th·ªã tr∆∞·ªùng")
        return True
    
    def stop_scanning(self):
        """D·ª´ng qu√©t th·ªã tr∆∞·ªùng"""
        self.active = False
        if self.scan_thread and self.scan_thread.is_alive():
            self.scan_thread.join(timeout=1.0)
        
        logger.info("ƒê√£ d·ª´ng qu√©t th·ªã tr∆∞·ªùng")
        return True
    
    def _scan_loop(self):
        """V√≤ng l·∫∑p qu√©t th·ªã tr∆∞·ªùng"""
        while self.active:
            try:
                logger.info("B·∫Øt ƒë·∫ßu qu√©t th·ªã tr∆∞·ªùng...")
                scan_results = self.scan_market()
                
                # X·ª≠ l√Ω k·∫øt qu·∫£ qu√©t
                self._process_scan_results(scan_results)
                
                # L∆∞u k·∫øt qu·∫£ qu√©t
                self._save_scan_results(scan_results)
                
                logger.info(f"Ho√†n th√†nh qu√©t th·ªã tr∆∞·ªùng, s·∫Ω qu√©t l·∫°i sau {self.scan_interval} gi√¢y")
            except Exception as e:
                logger.error(f"L·ªói trong qu√° tr√¨nh qu√©t th·ªã tr∆∞·ªùng: {str(e)}", exc_info=True)
            
            # Ch·ªù ƒë·∫øn l·∫ßn qu√©t ti·∫øp theo
            for _ in range(self.scan_interval):
                if not self.active:
                    break
                time.sleep(1)
    
    def scan_market(self) -> List[Dict[str, Any]]:
        """
        Qu√©t th·ªã tr∆∞·ªùng cho t·∫•t c·∫£ c√°c c·∫∑p v√† khung th·ªùi gian
        
        :return: Danh s√°ch k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        results = []
        
        # L·∫∑p qua t·ª´ng c·∫∑p giao d·ªãch
        for symbol in self.pairs_to_scan:
            for interval in self.timeframes:
                try:
                    # Ph√¢n t√≠ch k·ªπ thu·∫≠t
                    analysis = self.market_analyzer.analyze_technical(symbol, interval)
                    
                    if analysis.get("status") == "success":
                        # Th√™m th√¥ng tin th·ªùi gian
                        analysis["timestamp"] = datetime.now().isoformat()
                        analysis["symbol"] = symbol
                        analysis["interval"] = interval
                        
                        # N·∫øu t√≠n hi·ªáu ƒë·ªß m·∫°nh, th√™m v√†o k·∫øt qu·∫£
                        score = analysis.get("score", 0)
                        if score >= self.min_score_threshold:
                            results.append(analysis)
                            logger.info(f"ƒê√£ t√¨m th·∫•y t√≠n hi·ªáu m·∫°nh cho {symbol} ({interval}): {analysis.get('overall_signal', 'N/A')} - ƒêi·ªÉm s·ªë: {score}")
                    
                    # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° gi·ªõi h·∫°n API
                    time.sleep(0.5)
                
                except Exception as e:
                    logger.error(f"L·ªói khi ph√¢n t√≠ch {symbol} ({interval}): {str(e)}", exc_info=True)
        
        return results
    
    def _process_scan_results(self, results: List[Dict[str, Any]]):
        """
        X·ª≠ l√Ω k·∫øt qu·∫£ qu√©t th·ªã tr∆∞·ªùng
        
        :param results: Danh s√°ch k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        if not results:
            logger.info("Kh√¥ng t√¨m th·∫•y c∆° h·ªôi giao d·ªãch n√†o")
            return
        
        # S·∫Øp x·∫øp k·∫øt qu·∫£ theo ƒëi·ªÉm s·ªë
        results.sort(key=lambda x: x.get("score", 0), reverse=True)
        
        # G·ª≠i th√¥ng b√°o v·ªÅ nh·ªØng c∆° h·ªôi t·ªët nh·∫•t
        self._send_opportunity_notifications(results[:5])  # Top 5 c∆° h·ªôi
    
    def _send_opportunity_notifications(self, opportunities: List[Dict[str, Any]]):
        """
        G·ª≠i th√¥ng b√°o v·ªÅ c√°c c∆° h·ªôi giao d·ªãch
        
        :param opportunities: Danh s√°ch c∆° h·ªôi giao d·ªãch
        """
        if not opportunities:
            return
        
        # T·∫°o n·ªôi dung th√¥ng b√°o
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"üîç PH√ÅT HI·ªÜN C∆† H·ªòI GIAO D·ªäCH ({now})\n\n"
        
        for i, opportunity in enumerate(opportunities, 1):
            symbol = opportunity.get("symbol", "N/A")
            interval = opportunity.get("interval", "N/A")
            signal = opportunity.get("overall_signal", "N/A")
            score = opportunity.get("score", 0)
            price = opportunity.get("price", 0)
            
            # X√°c ƒë·ªãnh emoji d·ª±a tr√™n t√≠n hi·ªáu
            emoji = "üü¢" if signal == "Mua" else "üî¥" if signal == "B√°n" else "‚ö™"
            
            message += f"{emoji} {i}. {symbol} ({interval})\n"
            message += f"   ‚Ä¢ T√≠n hi·ªáu: {signal}\n"
            message += f"   ‚Ä¢ ƒê·ªô tin c·∫≠y: {score:.0f}%\n"
            message += f"   ‚Ä¢ Gi√° hi·ªán t·∫°i: {price:.2f} USDT\n"
            
            # Th√™m th√¥ng tin v·ªÅ h·ªó tr·ª£/kh√°ng c·ª±
            support_resistance = opportunity.get("support_resistance", [])
            supports = [sr.get("value", 0) for sr in support_resistance if sr.get("type", "").lower() == "support"]
            resistances = [sr.get("value", 0) for sr in support_resistance if sr.get("type", "").lower() == "resistance"]
            
            if supports:
                message += f"   ‚Ä¢ H·ªó tr·ª£: {min(supports):.2f}\n"
            
            if resistances:
                message += f"   ‚Ä¢ Kh√°ng c·ª±: {max(resistances):.2f}\n"
            
            message += "\n"
        
        # G·ª≠i th√¥ng b√°o qua Telegram
        try:
            telegram = TelegramNotifier()
            telegram.send_message(message)
            logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o v·ªÅ {len(opportunities)} c∆° h·ªôi giao d·ªãch")
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o: {str(e)}", exc_info=True)
    
    def _save_scan_results(self, results: List[Dict[str, Any]]):
        """
        L∆∞u k·∫øt qu·∫£ qu√©t th·ªã tr∆∞·ªùng
        
        :param results: Danh s√°ch k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        if not results:
            return
        
        try:
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs("signal_analysis", exist_ok=True)
            
            # T√™n file d·ª±a tr√™n th·ªùi gian
            filename = f"signal_analysis/market_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # L∆∞u k·∫øt qu·∫£ v√†o file
            with open(filename, 'w') as f:
                json.dump(results, f, indent=4)
            
            logger.info(f"ƒê√£ l∆∞u k·∫øt qu·∫£ qu√©t th·ªã tr∆∞·ªùng v√†o {filename}")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u k·∫øt qu·∫£ qu√©t: {str(e)}", exc_info=True)
    
    def get_latest_opportunities(self, max_count=10) -> List[Dict[str, Any]]:
        """
        L·∫•y c√°c c∆° h·ªôi giao d·ªãch m·ªõi nh·∫•t
        
        :param max_count: S·ªë l∆∞·ª£ng c∆° h·ªôi t·ªëi ƒëa
        :return: Danh s√°ch c∆° h·ªôi giao d·ªãch
        """
        opportunities = []
        
        try:
            # T√¨m file k·∫øt qu·∫£ qu√©t m·ªõi nh·∫•t
            signal_dir = "signal_analysis"
            if not os.path.exists(signal_dir):
                return []
            
            files = [os.path.join(signal_dir, f) for f in os.listdir(signal_dir) 
                    if f.startswith("market_scan_") and f.endswith(".json")]
            
            if not files:
                return []
            
            # S·∫Øp x·∫øp theo th·ªùi gian s·ª≠a ƒë·ªïi
            latest_file = max(files, key=os.path.getmtime)
            
            # ƒê·ªçc file
            with open(latest_file, 'r') as f:
                opportunities = json.load(f)
            
            # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£
            opportunities = opportunities[:max_count]
            
            logger.info(f"ƒê√£ t·∫£i {len(opportunities)} c∆° h·ªôi giao d·ªãch t·ª´ {latest_file}")
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y c∆° h·ªôi giao d·ªãch m·ªõi nh·∫•t: {str(e)}", exc_info=True)
        
        return opportunities


# Singleton instance
_scanner_instance = None

def get_scanner(testnet=True):
    """L·∫•y singleton instance c·ªßa MarketScanner"""
    global _scanner_instance
    if _scanner_instance is None:
        _scanner_instance = MarketScanner(testnet=testnet)
    return _scanner_instance


if __name__ == "__main__":
    # Test ch∆∞∆°ng tr√¨nh
    scanner = MarketScanner(testnet=True)
    scanner.start_scanning()
    
    try:
        # ƒê·ªÉ ch∆∞∆°ng tr√¨nh ch·∫°y trong 1 gi·ªù
        time.sleep(3600)
    except KeyboardInterrupt:
        print("D·ª´ng ch∆∞∆°ng tr√¨nh...")
    finally:
        scanner.stop_scanning()