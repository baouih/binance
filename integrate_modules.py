"""
T√≠ch h·ª£p c√°c module m·ªõi v√†o h·ªá th·ªëng ch√≠nh
Module n√†y gi√∫p kh·ªüi ƒë·ªông v√† t√≠ch h·ª£p c√°c module th√¥ng b√°o chi ti·∫øt,
gi√°m s√°t v·ªã th·∫ø v√† c·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng n√¢ng cao v√†o h·ªá th·ªëng ch√≠nh
"""

import logging
import os
import json
import time
import threading
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('module_integration')

# Import c√°c module ƒë√£ t·∫°o
from telegram_notifier import TelegramNotifier
from detailed_trade_notifications import DetailedTradeNotifications
from position_monitoring import PositionMonitor
from enhanced_market_updater import EnhancedMarketUpdater

# ƒê∆∞·ªùng d·∫´n file c·∫•u h√¨nh
TELEGRAM_CONFIG_PATH = 'telegram_config.json'
BOT_CONFIG_PATH = 'bot_config.json'
ACCOUNT_CONFIG_PATH = 'account_config.json'

def load_config(config_path):
    """
    T·∫£i c·∫•u h√¨nh t·ª´ file
    
    Args:
        config_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        
    Returns:
        dict: C·∫•u h√¨nh ƒë√£ t·∫£i
    """
    try:
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                config = json.load(f)
            logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_path}")
            return config
        else:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {config_path}")
            return {}
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh t·ª´ {config_path}: {str(e)}")
        return {}

def test_telegram_connection():
    """
    Ki·ªÉm tra k·∫øt n·ªëi Telegram
    
    Returns:
        bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
    """
    try:
        logger.info("Ki·ªÉm tra k·∫øt n·ªëi Telegram...")
        notifier = TelegramNotifier(config_path=TELEGRAM_CONFIG_PATH)
        success = notifier.test_connection()
        
        if success:
            logger.info("K·∫øt n·ªëi Telegram th√†nh c√¥ng")
            return True
        else:
            logger.warning("K·∫øt n·ªëi Telegram th·∫•t b·∫°i")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi Telegram: {str(e)}")
        return False

def start_enhanced_market_updater(api_connector, data_processor, strategy_engine):
    """
    Kh·ªüi ƒë·ªông module c·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng n√¢ng cao
    
    Args:
        api_connector: API connector
        data_processor: B·ªô x·ª≠ l√Ω d·ªØ li·ªáu
        strategy_engine: Engine chi·∫øn l∆∞·ª£c giao d·ªãch
        
    Returns:
        EnhancedMarketUpdater: Instance c·ªßa updater
    """
    try:
        logger.info("Kh·ªüi ƒë·ªông EnhancedMarketUpdater...")
        updater = EnhancedMarketUpdater(
            api_connector=api_connector,
            data_processor=data_processor,
            strategy_engine=strategy_engine,
            telegram_config_path=TELEGRAM_CONFIG_PATH
        )
        
        # T·∫°o th∆∞ m·ª•c ph√¢n t√≠ch th·ªã tr∆∞·ªùng n·∫øu ch∆∞a c√≥
        os.makedirs(updater.analysis_dir, exist_ok=True)
        
        # B·∫Øt ƒë·∫ßu thread c·∫≠p nh·∫≠t
        updater.start_updating()
        
        logger.info("ƒê√£ kh·ªüi ƒë·ªông EnhancedMarketUpdater")
        return updater
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông EnhancedMarketUpdater: {str(e)}")
        return None

def start_position_monitor(api_connector):
    """
    Kh·ªüi ƒë·ªông module gi√°m s√°t v·ªã th·∫ø
    
    Args:
        api_connector: API connector
        
    Returns:
        PositionMonitor: Instance c·ªßa monitor
    """
    try:
        logger.info("Kh·ªüi ƒë·ªông PositionMonitor...")
        monitor = PositionMonitor(
            api_connector=api_connector,
            telegram_config_path=TELEGRAM_CONFIG_PATH
        )
        
        # T·∫°o th∆∞ m·ª•c ph√¢n t√≠ch v·ªã th·∫ø n·∫øu ch∆∞a c√≥
        os.makedirs(monitor.analysis_dir, exist_ok=True)
        
        # B·∫Øt ƒë·∫ßu thread gi√°m s√°t
        monitor.start_monitoring()
        
        logger.info("ƒê√£ kh·ªüi ƒë·ªông PositionMonitor")
        return monitor
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông PositionMonitor: {str(e)}")
        return None

def start_detailed_notifications():
    """
    Kh·ªüi ƒë·ªông module th√¥ng b√°o chi ti·∫øt
    
    Returns:
        DetailedTradeNotifications: Instance c·ªßa notifier
    """
    try:
        logger.info("Kh·ªüi ƒë·ªông DetailedTradeNotifications...")
        notifier = DetailedTradeNotifications(telegram_config_path=TELEGRAM_CONFIG_PATH)
        
        # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ th√¥ng b√°o n·∫øu ch∆∞a c√≥
        os.makedirs('trade_notifications', exist_ok=True)
        
        logger.info("ƒê√£ kh·ªüi ƒë·ªông DetailedTradeNotifications")
        return notifier
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông DetailedTradeNotifications: {str(e)}")
        return None

def integrate_modules(api_connector, data_processor, strategy_engine, main_bot=None):
    """
    T√≠ch h·ª£p t·∫•t c·∫£ c√°c module m·ªõi v√†o h·ªá th·ªëng ch√≠nh
    
    Args:
        api_connector: API connector
        data_processor: B·ªô x·ª≠ l√Ω d·ªØ li·ªáu
        strategy_engine: Engine chi·∫øn l∆∞·ª£c giao d·ªãch
        main_bot: Instance c·ªßa bot ch√≠nh (n·∫øu c√≥)
        
    Returns:
        dict: C√°c module ƒë√£ t√≠ch h·ª£p
    """
    # Ki·ªÉm tra k·∫øt n·ªëi Telegram (n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh)
    test_telegram_connection()
    
    # Kh·ªüi ƒë·ªông c√°c module
    detailed_notifier = start_detailed_notifications()
    position_monitor = start_position_monitor(api_connector)
    market_updater = start_enhanced_market_updater(api_connector, data_processor, strategy_engine)
    
    # Th√¥ng b√°o t√≠ch h·ª£p th√†nh c√¥ng
    if all([detailed_notifier, position_monitor, market_updater]):
        telegram = TelegramNotifier(config_path=TELEGRAM_CONFIG_PATH)
        
        if telegram.enabled:
            message = (
                "üöÄ *T√çCH H·ª¢P MODULE M·ªöI TH√ÄNH C√îNG*\n\n"
                "C√°c module sau ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o h·ªá th·ªëng:\n"
                "‚úÖ Th√¥ng b√°o chi ti·∫øt v·ªÅ giao d·ªãch\n"
                "‚úÖ Gi√°m s√°t v·ªã th·∫ø giao d·ªãch\n"
                "‚úÖ C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng n√¢ng cao\n\n"
                f"‚è∞ Th·ªùi gian: `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            )
            
            telegram.send_message(message, parse_mode='Markdown')
            logger.info("ƒê√£ g·ª≠i th√¥ng b√°o t√≠ch h·ª£p th√†nh c√¥ng qua Telegram")
    
    # Tr·∫£ v·ªÅ c√°c module ƒë√£ t√≠ch h·ª£p
    return {
        'detailed_notifier': detailed_notifier,
        'position_monitor': position_monitor,
        'market_updater': market_updater
    }

# S·ª≠ d·ª•ng h√†m n√†y ƒë·ªÉ t·∫Øt c√°c module khi c·∫ßn
def stop_modules(modules):
    """
    D·ª´ng c√°c module ƒë√£ t√≠ch h·ª£p
    
    Args:
        modules (dict): Dict ch·ª©a c√°c module c·∫ßn d·ª´ng
        
    Returns:
        bool: True n·∫øu d·ª´ng th√†nh c√¥ng
    """
    try:
        # D·ª´ng market updater
        if 'market_updater' in modules and modules['market_updater']:
            modules['market_updater'].stop_updating()
            logger.info("ƒê√£ d·ª´ng EnhancedMarketUpdater")
        
        # D·ª´ng position monitor
        if 'position_monitor' in modules and modules['position_monitor']:
            modules['position_monitor'].stop_monitoring()
            logger.info("ƒê√£ d·ª´ng PositionMonitor")
        
        return True
    except Exception as e:
        logger.error(f"L·ªói khi d·ª´ng c√°c module: {str(e)}")
        return False


if __name__ == "__main__":
    # Import c√°c module c·∫ßn thi·∫øt n·∫øu ch·∫°y tr·ª±c ti·∫øp
    try:
        from binance_api import BinanceAPI
        from data_processor import DataProcessor
        from composite_trading_strategy import CompositeTradingStrategy
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
        api_connector = BinanceAPI()
        data_processor = DataProcessor()
        strategy_engine = CompositeTradingStrategy()
        
        # T√≠ch h·ª£p c√°c module
        modules = integrate_modules(api_connector, data_processor, strategy_engine)
        
        logger.info("ƒê√£ kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c module th√†nh c√¥ng")
        
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("Nh·∫≠n t√≠n hi·ªáu k·∫øt th√∫c t·ª´ ng∆∞·ªùi d√πng, ƒëang d·ª´ng c√°c module...")
        if 'modules' in locals():
            stop_modules(modules)
        logger.info("ƒê√£ d·ª´ng t·∫•t c·∫£ c√°c module")
    except Exception as e:
        logger.error(f"L·ªói khi ch·∫°y ch∆∞∆°ng tr√¨nh: {str(e)}")