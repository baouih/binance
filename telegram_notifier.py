#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Notifier
--------------
Module cung c·∫•p ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o qua Telegram Bot
H·ªó tr·ª£ ƒë·ªãnh d·∫°ng th√¥ng b√°o, g·ª≠i ·∫£nh, v√† nhi·ªÅu lo·∫°i th√¥ng b√°o kh√°c nhau
"""

import os
import json
import logging
import requests
from datetime import datetime
from typing import Dict, List, Union, Optional, Any
import traceback

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger("telegram_notifier")

class TelegramNotifier:
    """
    L·ªõp cung c·∫•p ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o qua Telegram Bot
    """
    
    def __init__(self, token: str = None, chat_id: str = None, enabled: bool = True):
        """
        Kh·ªüi t·∫°o Telegram Notifier
        
        Args:
            token: Token c·ªßa Telegram Bot
            chat_id: ID c·ªßa chat ƒë·ªÉ g·ª≠i th√¥ng b√°o
            enabled: Tr·∫°ng th√°i b·∫≠t/t·∫Øt th√¥ng b√°o
        """
        self.token = token or os.environ.get('TELEGRAM_BOT_TOKEN')
        self.chat_id = chat_id or os.environ.get('TELEGRAM_CHAT_ID')
        self.enabled = enabled
        
        # URL c∆° s·ªü ƒë·ªÉ g·ªçi Telegram API
        self.api_url = f"https://api.telegram.org/bot{self.token}" if self.token else ""
        
        # Ki·ªÉm tra c·∫•u h√¨nh
        if not self.token or not self.chat_id:
            self._load_config_from_file()
        
        # Th√¥ng b√°o tr·∫°ng th√°i
        if self.enabled and self.token and self.chat_id:
            logger.info("Telegram Notifier ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
        elif not self.enabled:
            logger.info("Telegram Notifier ƒë√£ ƒë∆∞·ª£c t·∫Øt")
        else:
            logger.warning("Telegram Notifier kh√¥ng th·ªÉ k√≠ch ho·∫°t do thi·∫øu token ho·∫∑c chat_id")
            self.enabled = False
    
    def _load_config_from_file(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file"""
        config_files = [
            'telegram_config.json',
            'configs/telegram_config.json',
            'config.json',
            'configs/config.json',
            'account_config.json'
        ]
        
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    with open(config_file, 'r') as f:
                        config = json.load(f)
                    
                    self.token = self.token or config.get('telegram_bot_token')
                    self.chat_id = self.chat_id or config.get('telegram_chat_id')
                    
                    if self.token and self.chat_id:
                        self.api_url = f"https://api.telegram.org/bot{self.token}"
                        logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh Telegram t·ª´ {config_file}")
                        return
                except Exception as e:
                    logger.warning(f"L·ªói khi t·∫£i c·∫•u h√¨nh Telegram t·ª´ {config_file}: {e}")
        
        logger.warning("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Telegram trong c√°c file")
    
    def send_notification(self, level: str, message: str, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i th√¥ng b√°o v·ªõi m·ª©c ƒë·ªô ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        
        Args:
            level: M·ª©c ƒë·ªô th√¥ng b√°o (info, warning, error, success)
            message: N·ªôi dung th√¥ng b√°o
            parse_mode: Ch·∫ø ƒë·ªô ph√¢n t√≠ch c√∫ ph√°p (HTML, Markdown)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.info(f"Telegram Notifier ƒë√£ b·ªã t·∫Øt. B·ªè qua th√¥ng b√°o: {message[:50]}...")
            return False
        
        # Th√™m emoji theo m·ª©c ƒë·ªô
        if level == "info":
            icon = "‚ÑπÔ∏è"
        elif level == "warning":
            icon = "‚ö†Ô∏è"
        elif level == "error":
            icon = "üî¥"
        elif level == "success":
            icon = "‚úÖ"
        else:
            icon = "üîî"
        
        formatted_message = f"{icon} {message}"
        return self.send_message(formatted_message, parse_mode)
    
    def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i tin nh·∫Øn Telegram
        
        Args:
            message: N·ªôi dung tin nh·∫Øn
            parse_mode: Ch·∫ø ƒë·ªô ph√¢n t√≠ch c√∫ ph√°p (HTML, Markdown)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info(f"B·ªè qua tin nh·∫Øn Telegram: {message[:50]}...")
            return False
        
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                logger.info("ƒê√£ g·ª≠i tin nh·∫Øn Telegram th√†nh c√¥ng")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_photo(self, photo_path: str, caption: str = "", parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i ·∫£nh qua Telegram
        
        Args:
            photo_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
            caption: Ch√∫ th√≠ch cho ·∫£nh
            parse_mode: Ch·∫ø ƒë·ªô ph√¢n t√≠ch c√∫ ph√°p (HTML, Markdown)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info(f"B·ªè qua g·ª≠i ·∫£nh Telegram: {photo_path}")
            return False
        
        try:
            url = f"{self.api_url}/sendPhoto"
            
            # Ki·ªÉm tra xem file ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(photo_path):
                logger.error(f"File ·∫£nh kh√¥ng t·ªìn t·∫°i: {photo_path}")
                return False
            
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                data = {
                    "chat_id": self.chat_id,
                    "caption": caption,
                    "parse_mode": parse_mode
                }
                
                response = requests.post(url, data=data, files=files, timeout=30)
                
                if response.status_code == 200:
                    logger.info(f"ƒê√£ g·ª≠i ·∫£nh Telegram th√†nh c√¥ng: {photo_path}")
                    return True
                else:
                    logger.error(f"L·ªói khi g·ª≠i ·∫£nh Telegram: {response.status_code} - {response.text}")
                    return False
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i ·∫£nh Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_document(self, document_path: str, caption: str = "", parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i t√†i li·ªáu qua Telegram
        
        Args:
            document_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file t√†i li·ªáu
            caption: Ch√∫ th√≠ch cho t√†i li·ªáu
            parse_mode: Ch·∫ø ƒë·ªô ph√¢n t√≠ch c√∫ ph√°p (HTML, Markdown)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info(f"B·ªè qua g·ª≠i t√†i li·ªáu Telegram: {document_path}")
            return False
        
        try:
            url = f"{self.api_url}/sendDocument"
            
            # Ki·ªÉm tra xem file t√†i li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(document_path):
                logger.error(f"File t√†i li·ªáu kh√¥ng t·ªìn t·∫°i: {document_path}")
                return False
            
            with open(document_path, 'rb') as document:
                files = {'document': document}
                data = {
                    "chat_id": self.chat_id,
                    "caption": caption,
                    "parse_mode": parse_mode
                }
                
                response = requests.post(url, data=data, files=files, timeout=30)
                
                if response.status_code == 200:
                    logger.info(f"ƒê√£ g·ª≠i t√†i li·ªáu Telegram th√†nh c√¥ng: {document_path}")
                    return True
                else:
                    logger.error(f"L·ªói khi g·ª≠i t√†i li·ªáu Telegram: {response.status_code} - {response.text}")
                    return False
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√†i li·ªáu Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_market_analysis(self, market_data: Dict) -> bool:
        """
        G·ª≠i ph√¢n t√≠ch th·ªã tr∆∞·ªùng
        
        Args:
            market_data: D·ªØ li·ªáu ph√¢n t√≠ch th·ªã tr∆∞·ªùng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info("B·ªè qua g·ª≠i ph√¢n t√≠ch th·ªã tr∆∞·ªùng Telegram")
            return False
        
        try:
            # T·∫°o tin nh·∫Øn ph√¢n t√≠ch th·ªã tr∆∞·ªùng
            message = "<b>üìä PH√ÇN T√çCH TH·ªä TR∆Ø·ªúNG</b>\n\n"
            
            # Th√™m th√¥ng tin th·ªã tr∆∞·ªùng t·ªïng th·ªÉ
            market_status = market_data.get('market_status', 'UNKNOWN')
            status_emoji = "üü¢" if market_status == 'BULLISH' else "üî¥" if market_status == 'BEARISH' else "‚ö™"
            
            message += f"<b>Tr·∫°ng th√°i th·ªã tr∆∞·ªùng:</b> {status_emoji} {market_status}\n"
            message += f"<b>Gi√° BTC:</b> ${market_data.get('btc_price', 0):,.2f}\n"
            message += f"<b>Thay ƒë·ªïi 24h:</b> {market_data.get('btc_price_change_24h', 0):+.2f}%\n\n"
            
            # Th√™m top gainers/losers
            if 'top_gainers' in market_data and market_data['top_gainers']:
                message += "<b>Top tƒÉng gi√°:</b>\n"
                
                for i, coin in enumerate(market_data['top_gainers'][:3], 1):
                    symbol = coin.get('symbol', '').replace('USDT', '')
                    price = coin.get('price', 0)
                    change = coin.get('price_change_24h', 0)
                    
                    message += f"{i}. {symbol}: ${price:,.2f} ({change:+.2f}%)\n"
                
                message += "\n"
            
            if 'top_losers' in market_data and market_data['top_losers']:
                message += "<b>Top gi·∫£m gi√°:</b>\n"
                
                for i, coin in enumerate(market_data['top_losers'][:3], 1):
                    symbol = coin.get('symbol', '').replace('USDT', '')
                    price = coin.get('price', 0)
                    change = coin.get('price_change_24h', 0)
                    
                    message += f"{i}. {symbol}: ${price:,.2f} ({change:+.2f}%)\n"
                
                message += "\n"
            
            # Th√™m ph√¢n t√≠ch BTC
            if 'btc_analysis' in market_data:
                btc_analysis = market_data['btc_analysis']
                btc_signal = btc_analysis.get('overall_signal', 'NEUTRAL')
                btc_confidence = btc_analysis.get('confidence', 0)
                
                message += "<b>Ph√¢n t√≠ch BTC:</b>\n"
                
                signal_emoji = "‚ö™"
                if btc_signal in ['STRONG_BUY', 'BUY']:
                    signal_emoji = "üü¢"
                elif btc_signal in ['STRONG_SELL', 'SELL']:
                    signal_emoji = "üî¥"
                
                message += f"- T√≠n hi·ªáu: {signal_emoji} {btc_signal}\n"
                message += f"- ƒê·ªô tin c·∫≠y: {btc_confidence}%\n\n"
            
            # Th√™m ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng
            if 'market_regime' in market_data:
                regime = market_data['market_regime']
                message += "<b>Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng:</b>\n"
                
                primary = regime.get('primary', 'RANGE_BOUND')
                volatility = regime.get('volatility', 'NORMAL')
                
                message += f"- Primary: {primary}\n"
                message += f"- Volatility: {volatility}\n\n"
            
            # Th√™m th·ªùi gian
            message += f"‚è± <i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            
            # G·ª≠i tin nh·∫Øn
            return self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i ph√¢n t√≠ch th·ªã tr∆∞·ªùng Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_signal_alert(self, signal_data: Dict) -> bool:
        """
        G·ª≠i c·∫£nh b√°o t√≠n hi·ªáu giao d·ªãch
        
        Args:
            signal_data: D·ªØ li·ªáu t√≠n hi·ªáu giao d·ªãch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info("B·ªè qua g·ª≠i c·∫£nh b√°o t√≠n hi·ªáu Telegram")
            return False
        
        try:
            # L·∫•y th√¥ng tin t√≠n hi·ªáu
            symbol = signal_data.get('symbol', 'UNKNOWN')
            signal = signal_data.get('signal', 'NEUTRAL')
            confidence = signal_data.get('confidence', 0)
            price = signal_data.get('price', 0)
            description = signal_data.get('description', '')
            
            # X√°c ƒë·ªãnh emoji v√† ti√™u ƒë·ªÅ
            signal_emoji = "‚ö™"
            title = "C·∫¨P NH·∫¨T TH·ªä TR∆Ø·ªúNG"
            
            if signal in ['STRONG_BUY', 'BUY']:
                signal_emoji = "üü¢"
                title = "T√çN HI·ªÜU MUA"
            elif signal in ['STRONG_SELL', 'SELL']:
                signal_emoji = "üî¥"
                title = "T√çN HI·ªÜU B√ÅN"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{signal_emoji} {title}: {symbol}</b>\n\n"
            
            # Symbol v√† gi√°
            symbol_name = symbol.replace("USDT", "")
            message += f"<b>{symbol_name}:</b> ${price:,.2f}\n"
            message += f"<b>T√≠n hi·ªáu:</b> {signal}\n"
            message += f"<b>ƒê·ªô tin c·∫≠y:</b> {confidence}%\n\n"
            
            # Th√™m gi√° m·ª•c ti√™u v√† stop loss
            target_price = signal_data.get('target_price', 0)
            stop_loss = signal_data.get('stop_loss', 0)
            
            if target_price > 0:
                target_pct = (target_price - price) / price * 100
                message += f"<b>Gi√° m·ª•c ti√™u:</b> ${target_price:,.2f} ({target_pct:+.2f}%)\n"
            
            if stop_loss > 0:
                sl_pct = (stop_loss - price) / price * 100
                message += f"<b>Stop Loss:</b> ${stop_loss:,.2f} ({sl_pct:+.2f}%)\n\n"
            
            # Th√™m m√¥ t·∫£
            if description:
                message += f"<b>Ph√¢n t√≠ch:</b>\n{description}\n\n"
            
            # Th√™m th·ªùi gian
            message += f"‚è± <i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            
            # G·ª≠i tin nh·∫Øn
            return self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o t√≠n hi·ªáu Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_trade_notification(self, trade_data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o giao d·ªãch
        
        Args:
            trade_data: D·ªØ li·ªáu giao d·ªãch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info("B·ªè qua g·ª≠i th√¥ng b√°o giao d·ªãch Telegram")
            return False
        
        try:
            # L·∫•y th√¥ng tin giao d·ªãch
            symbol = trade_data.get('symbol', 'UNKNOWN')
            side = trade_data.get('side', 'UNKNOWN')
            entry_price = trade_data.get('entry_price', 0)
            quantity = trade_data.get('quantity', 0)
            take_profit = trade_data.get('take_profit', 0)
            stop_loss = trade_data.get('stop_loss', 0)
            reason = trade_data.get('reason', '')
            
            # X√°c ƒë·ªãnh emoji v√† ti√™u ƒë·ªÅ
            if side == 'BUY':
                emoji = "üü¢"
                title = "MUA/LONG"
            elif side == 'SELL':
                emoji = "üî¥"
                title = "B√ÅN/SHORT"
            else:
                emoji = "‚ö™"
                title = "GIAO D·ªäCH"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{emoji} {title}: {symbol}</b>\n\n"
            
            # Symbol v√† gi√°
            symbol_name = symbol.replace("USDT", "")
            message += f"<b>{symbol_name}:</b> ${entry_price:,.2f}\n"
            message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
            
            # Th√™m take profit v√† stop loss
            if take_profit > 0:
                tp_pct = (take_profit - entry_price) / entry_price * 100
                tp_sign = "+" if side == 'BUY' else "-"
                message += f"<b>Take Profit:</b> ${take_profit:,.2f} ({tp_sign}{abs(tp_pct):.2f}%)\n"
            
            if stop_loss > 0:
                sl_pct = (stop_loss - entry_price) / entry_price * 100
                sl_sign = "-" if side == 'BUY' else "+"
                message += f"<b>Stop Loss:</b> ${stop_loss:,.2f} ({sl_sign}{abs(sl_pct):.2f}%)\n"
            
            # T√≠nh Risk/Reward
            if take_profit > 0 and stop_loss > 0:
                if side == 'BUY':
                    risk = entry_price - stop_loss
                    reward = take_profit - entry_price
                else:
                    risk = stop_loss - entry_price
                    reward = entry_price - take_profit
                
                if risk > 0:
                    rr_ratio = reward / risk
                    message += f"<b>Risk/Reward:</b> 1:{rr_ratio:.2f}\n"
            
            message += "\n"
            
            # Th√™m l√Ω do
            if reason:
                message += f"<b>L√Ω do:</b>\n{reason}\n\n"
            
            # Th√™m th·ªùi gian
            message += f"‚è± <i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            
            # G·ª≠i tin nh·∫Øn
            return self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o giao d·ªãch Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_bot_status(self, status_data: Dict) -> bool:
        """
        G·ª≠i tr·∫°ng th√°i c·ªßa bot
        
        Args:
            status_data: D·ªØ li·ªáu tr·∫°ng th√°i
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.info("B·ªè qua g·ª≠i tr·∫°ng th√°i bot Telegram")
            return False
        
        try:
            # L·∫•y th√¥ng tin tr·∫°ng th√°i
            status = status_data.get('status', 'UNKNOWN')
            uptime = status_data.get('uptime', 0)
            active_positions = status_data.get('active_positions', 0)
            account_balance = status_data.get('account_balance', 0)
            pnl_24h = status_data.get('pnl_24h', 0)
            
            # X√°c ƒë·ªãnh emoji
            if status == 'RUNNING':
                emoji = "‚úÖ"
            elif status == 'STOPPED':
                emoji = "üõë"
            elif status == 'WARNING':
                emoji = "‚ö†Ô∏è"
            elif status == 'ERROR':
                emoji = "üî¥"
            else:
                emoji = "‚ÑπÔ∏è"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{emoji} BOT STATUS: {status}</b>\n\n"
            
            # Th√™m th√¥ng tin
            message += f"<b>Uptime:</b> {uptime}\n"
            message += f"<b>V·ªã th·∫ø ho·∫°t ƒë·ªông:</b> {active_positions}\n"
            message += f"<b>S·ªë d∆∞ t√†i kho·∫£n:</b> ${account_balance:,.2f}\n"
            
            if pnl_24h != 0:
                pnl_emoji = "üìà" if pnl_24h > 0 else "üìâ"
                message += f"<b>P&L 24h:</b> {pnl_emoji} ${pnl_24h:+,.2f}\n\n"
            
            # Th√™m th√¥ng tin b·ªï sung
            if 'additional_info' in status_data:
                message += "<b>Th√¥ng tin b·ªï sung:</b>\n"
                
                for key, value in status_data['additional_info'].items():
                    message += f"- {key}: {value}\n"
                
                message += "\n"
            
            # Th√™m th·ªùi gian
            message += f"‚è± <i>Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
            
            # G·ª≠i tin nh·∫Øn
            return self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tr·∫°ng th√°i bot Telegram: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def send_startup_notification(self) -> bool:
        """
        G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        message = "<b>üöÄ H·ªÜ TH·ªêNG ƒê√É KH·ªûI ƒê·ªòNG</b>\n\n"
        message += f"<b>Phi√™n b·∫£n:</b> 1.0.0\n"
        message += f"<b>Th·ªùi gian kh·ªüi ƒë·ªông:</b> {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n"
        
        # L·∫•y th√¥ng tin t√†i kho·∫£n n·∫øu c√≥ th·ªÉ
        try:
            from enhanced_binance_api import get_account_balance
            balance = get_account_balance(testnet=True)
            
            if balance:
                message += "\n<b>S·ªë d∆∞ t√†i kho·∫£n:</b>\n"
                
                for symbol, amount in balance.items():
                    if amount > 0:
                        message += f"- {symbol}: {amount:,.2f}\n"
        except Exception:
            pass
        
        return self.send_notification("info", message)

# Test n·∫øu ch·∫°y tr·ª±c ti·∫øp
if __name__ == "__main__":
    # Thi·∫øt l·∫≠p logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Ki·ªÉm tra v√† test th√¥ng b√°o
    notifier = TelegramNotifier()
    
    if notifier.enabled:
        print("Telegram Notifier ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
        
        # G·ª≠i th√¥ng b√°o th·ª≠ nghi·ªám
        notifier.send_notification("info", "ƒê√¢y l√† th√¥ng b√°o th·ª≠ nghi·ªám t·ª´ <b>Telegram Notifier</b>")
        
        # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
        notifier.send_startup_notification()
    else:
        print("Telegram Notifier kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t")
        print("H√£y cung c·∫•p TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c file c·∫•u h√¨nh")