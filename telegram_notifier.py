"""
Module th√¥ng b√°o Telegram cho BinanceTrader Bot

Module n√†y cung c·∫•p ch·ª©c nƒÉng g·ª≠i th√¥ng b√°o t·ªõi Telegram v·ªÅ c√°c ho·∫°t ƒë·ªông quan tr·ªçng
c·ªßa bot: ra v√†o l·ªánh, l√£i l·ªó, c·∫£nh b√°o th·ªã tr∆∞·ªùng, v.v.
"""
import os
import logging
import requests
import json
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('telegram_notifier')

class TelegramNotifier:
    """
    L·ªõp qu·∫£n l√Ω g·ª≠i th√¥ng b√°o t·ªõi Telegram
    """
    def __init__(self, token: str = None, chat_id: str = None):
        """
        Kh·ªüi t·∫°o TelegramNotifier
        
        Args:
            token (str): Token c·ªßa Telegram bot API
            chat_id (str): ID c·ªßa chat/ng∆∞·ªùi d√πng nh·∫≠n th√¥ng b√°o
        """
        self.token = token or os.environ.get("TELEGRAM_BOT_TOKEN", "8069189803:AAF3PJc3BNQgZmpQ2Oj7o0-ySJGmi2AQ9OM")
        self.chat_id = chat_id or os.environ.get("TELEGRAM_CHAT_ID", "1834332146")
        self.api_url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        
        # M√†u cho c√°c lo·∫°i th√¥ng b√°o
        self.colors = {
            'info': 'üîµ',
            'success': 'üü¢',
            'warning': 'üü†',
            'error': 'üî¥',
            'trade_entry': 'üü¢',
            'trade_exit': 'üü£',
            'trade_profit': 'üí∞',
            'trade_loss': 'üìâ',
            'market_alert': '‚ö†Ô∏è',
            'system': '‚öôÔ∏è'
        }
    
    def send_message(self, message: str, category: str = 'info') -> bool:
        """
        G·ª≠i th√¥ng b√°o t·ªõi Telegram
        
        Args:
            message (str): N·ªôi dung th√¥ng b√°o
            category (str): Lo·∫°i th√¥ng b√°o (info/success/warning/error/trade_entry/trade_exit...)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            emoji = self.colors.get(category, 'üî∑')
            formatted_message = f"{emoji} {message}"
            
            # Th√™m timestamp
            formatted_message += f"\n‚è±Ô∏è {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                'chat_id': self.chat_id,
                'text': formatted_message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(self.api_url, json=payload)
            response_data = response.json()
            
            if response.status_code == 200 and response_data.get('ok'):
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng: {category}")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {response_data}")
                return False
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o Telegram: {str(e)}")
            return False
    
    def send_trade_entry(self, symbol: str, side: str, entry_price: float, 
                       quantity: float, stop_loss: float = None, 
                       take_profit: float = None, reason: str = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o v√†o l·ªánh
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch (BTCUSDT, ETHUSDT, ...)
            side (str): H∆∞·ªõng l·ªánh (BUY/SELL)
            entry_price (float): Gi√° v√†o l·ªánh
            quantity (float): S·ªë l∆∞·ª£ng
            stop_loss (float, optional): Gi√° stop loss
            take_profit (float, optional): Gi√° take profit
            reason (str, optional): L√Ω do v√†o l·ªánh
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        # Bi·ªÉu t∆∞·ª£ng m≈©i t√™n
        direction_arrow = 'üîº' if side == 'BUY' else 'üîΩ'
        side_text = 'MUA' if side == 'BUY' else 'B√ÅN'
        
        message = f"<b>{direction_arrow} V√ÄO L·ªÜNH {side_text}</b>\n\n"
        message += f"<b>C·∫∑p:</b> {symbol}\n"
        message += f"<b>Gi√° v√†o:</b> {entry_price:,.2f} USDT\n"
        message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
        
        if stop_loss:
            message += f"<b>Stop Loss:</b> {stop_loss:,.2f} USDT\n"
        
        if take_profit:
            message += f"<b>Take Profit:</b> {take_profit:,.2f} USDT\n"
        
        if reason:
            message += f"\n<b>L√Ω do:</b> {reason}"
        
        return self.send_message(message, 'trade_entry')
    
    def send_trade_exit(self, symbol: str, side: str, exit_price: float, 
                      entry_price: float, quantity: float, profit_loss: float,
                      profit_loss_percent: float, exit_reason: str = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o tho√°t l·ªánh
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch (BTCUSDT, ETHUSDT, ...)
            side (str): H∆∞·ªõng l·ªánh ban ƒë·∫ßu (BUY/SELL)
            exit_price (float): Gi√° tho√°t l·ªánh
            entry_price (float): Gi√° v√†o l·ªánh
            quantity (float): S·ªë l∆∞·ª£ng
            profit_loss (float): L√£i/l·ªó (USDT)
            profit_loss_percent (float): L√£i/l·ªó (%)
            exit_reason (str, optional): L√Ω do tho√°t l·ªánh
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        # X√°c ƒë·ªãnh l√£i/l·ªó
        is_profit = profit_loss > 0
        pl_emoji = 'üí∞' if is_profit else 'üìâ'
        
        # X√°c ƒë·ªãnh lo·∫°i l·ªánh
        side_text = 'MUA' if side == 'BUY' else 'B√ÅN'
        exit_text = 'B√ÅN' if side == 'BUY' else 'MUA'
        
        message = f"<b>{pl_emoji} THO√ÅT L·ªÜNH {side_text}</b>\n\n"
        message += f"<b>C·∫∑p:</b> {symbol}\n"
        message += f"<b>Gi√° v√†o:</b> {entry_price:,.2f} USDT\n"
        message += f"<b>Gi√° tho√°t:</b> {exit_price:,.2f} USDT\n"
        message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
        
        # Highlight profit/loss
        profit_loss_text = f"+{profit_loss:,.2f}" if is_profit else f"{profit_loss:,.2f}"
        profit_loss_percent_text = f"+{profit_loss_percent:.2f}%" if is_profit else f"{profit_loss_percent:.2f}%"
        
        if is_profit:
            message += f"<b>L·ª£i nhu·∫≠n:</b> {profit_loss_text} USDT ({profit_loss_percent_text})\n"
        else:
            message += f"<b>L·ªó:</b> {profit_loss_text} USDT ({profit_loss_percent_text})\n"
        
        if exit_reason:
            message += f"\n<b>L√Ω do tho√°t:</b> {exit_reason}"
        
        category = 'trade_profit' if is_profit else 'trade_loss'
        return self.send_message(message, category)
    
    def send_market_alert(self, symbol: str, alert_type: str, 
                        price: float = None, message: str = None) -> bool:
        """
        G·ª≠i c·∫£nh b√°o th·ªã tr∆∞·ªùng
        
        Args:
            symbol (str): M√£ c·∫∑p giao d·ªãch (BTCUSDT, ETHUSDT, ...)
            alert_type (str): Lo·∫°i c·∫£nh b√°o
            price (float, optional): Gi√° hi·ªán t·∫°i
            message (str, optional): N·ªôi dung c·∫£nh b√°o
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        alert_message = f"<b>‚ö†Ô∏è C·∫¢NH B√ÅO TH·ªä TR∆Ø·ªúNG</b>\n\n"
        alert_message += f"<b>C·∫∑p:</b> {symbol}\n"
        
        if price:
            alert_message += f"<b>Gi√° hi·ªán t·∫°i:</b> {price:,.2f} USDT\n"
        
        alert_message += f"<b>Lo·∫°i c·∫£nh b√°o:</b> {alert_type}\n"
        
        if message:
            alert_message += f"\n<b>Chi ti·∫øt:</b> {message}"
        
        return self.send_message(alert_message, 'market_alert')
    
    def send_bot_status(self, status: str, mode: str, uptime: str = None, 
                      stats: dict = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o tr·∫°ng th√°i bot
        
        Args:
            status (str): Tr·∫°ng th√°i bot (running/stopped)
            mode (str): Ch·∫ø ƒë·ªô API (demo/testnet/live)
            uptime (str, optional): Th·ªùi gian ho·∫°t ƒë·ªông
            stats (dict, optional): Th·ªëng k√™ ho·∫°t ƒë·ªông
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        status_text = 'ƒëang ch·∫°y' if status == 'running' else 'ƒë√£ d·ª´ng'
        status_emoji = 'üü¢' if status == 'running' else 'üî¥'
        
        message = f"<b>{status_emoji} BOT {status_text.upper()}</b>\n\n"
        message += f"<b>Ch·∫ø ƒë·ªô:</b> {mode.capitalize()}\n"
        
        if uptime:
            message += f"<b>Th·ªùi gian ho·∫°t ƒë·ªông:</b> {uptime}\n"
        
        if stats:
            message += "\n<b>Th·ªëng k√™:</b>\n"
            for key, value in stats.items():
                message += f"- {key}: {value}\n"
        
        return self.send_message(message, 'system')
    
    def send_daily_summary(self, date: str, total_trades: int, winning_trades: int,
                         losing_trades: int, profit_loss: float, win_rate: float,
                         top_pairs: list = None) -> bool:
        """
        G·ª≠i b√°o c√°o t·ªïng k·∫øt h√†ng ng√†y
        
        Args:
            date (str): Ng√†y b√°o c√°o
            total_trades (int): T·ªïng s·ªë giao d·ªãch
            winning_trades (int): S·ªë giao d·ªãch th·∫Øng
            losing_trades (int): S·ªë giao d·ªãch thua
            profit_loss (float): T·ªïng l√£i/l·ªó
            win_rate (float): T·ª∑ l·ªá th·∫Øng (%)
            top_pairs (list, optional): Danh s√°ch c·∫∑p giao d·ªãch t·ªët nh·∫•t
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        is_profit = profit_loss > 0
        pl_emoji = 'üìà' if is_profit else 'üìâ'
        
        message = f"<b>üìä B√ÅO C√ÅO NG√ÄY {date}</b>\n\n"
        message += f"<b>T·ªïng giao d·ªãch:</b> {total_trades}\n"
        message += f"<b>Th·∫Øng:</b> {winning_trades}\n"
        message += f"<b>Thua:</b> {losing_trades}\n"
        message += f"<b>T·ª∑ l·ªá th·∫Øng:</b> {win_rate:.2f}%\n"
        
        profit_loss_text = f"+{profit_loss:,.2f}" if is_profit else f"{profit_loss:,.2f}"
        message += f"<b>{pl_emoji} P&L:</b> {profit_loss_text} USDT\n"
        
        if top_pairs and len(top_pairs) > 0:
            message += "\n<b>Top c·∫∑p giao d·ªãch:</b>\n"
            for pair in top_pairs:
                pair_profit = pair.get('profit', 0)
                pair_emoji = 'üìà' if pair_profit > 0 else 'üìâ'
                message += f"- {pair['symbol']}: {pair_profit:,.2f} USDT {pair_emoji}\n"
        
        return self.send_message(message, 'info')

def test_telegram_notification():
    """H√†m test th√¥ng b√°o Telegram"""
    notifier = TelegramNotifier()
    
    # Test th√¥ng b√°o v√†o l·ªánh
    notifier.send_trade_entry(
        symbol="BTCUSDT",
        side="BUY",
        entry_price=47250.50,
        quantity=0.01,
        stop_loss=46500.00,
        take_profit=48500.00,
        reason="RSI v∆∞·ª£t ng∆∞·ª°ng 30 t·ª´ d∆∞·ªõi l√™n, gi√° ƒëang n·∫±m tr√™n MA50"
    )
    
    # Test th√¥ng b√°o tho√°t l·ªánh l√£i
    notifier.send_trade_exit(
        symbol="BTCUSDT",
        side="BUY",
        exit_price=48100.75,
        entry_price=47250.50,
        quantity=0.01,
        profit_loss=85.0,
        profit_loss_percent=1.8,
        exit_reason="ƒê·∫°t m·ª©c Take Profit"
    )
    
    # Test th√¥ng b√°o tho√°t l·ªánh l·ªó
    notifier.send_trade_exit(
        symbol="ETHUSDT",
        side="SELL",
        exit_price=3250.25,
        entry_price=3300.25,
        quantity=0.05,
        profit_loss=-25.0,
        profit_loss_percent=-0.75,
        exit_reason="K√≠ch ho·∫°t Stop Loss"
    )
    
    # Test c·∫£nh b√°o th·ªã tr∆∞·ªùng
    notifier.send_market_alert(
        symbol="BTCUSDT",
        alert_type="Bi·∫øn ƒë·ªông l·ªõn",
        price=47500.00,
        message="Gi√° BTC ƒë√£ di chuy·ªÉn 5% trong 10 ph√∫t, bi·∫øn ƒë·ªông cao"
    )
    
    # Test b√°o c√°o tr·∫°ng th√°i bot
    notifier.send_bot_status(
        status="running",
        mode="testnet",
        uptime="14h 35m",
        stats={
            "T·ªïng ph√¢n t√≠ch": 342,
            "Quy·∫øt ƒë·ªãnh": 28,
            "Giao d·ªãch": 12
        }
    )
    
    # Test b√°o c√°o t·ªïng k·∫øt ng√†y
    notifier.send_daily_summary(
        date="03/03/2025",
        total_trades=15,
        winning_trades=9,
        losing_trades=6,
        profit_loss=125.5,
        win_rate=60.0,
        top_pairs=[
            {"symbol": "BTCUSDT", "profit": 85.0},
            {"symbol": "ETHUSDT", "profit": 45.5},
            {"symbol": "SOLUSDT", "profit": -5.0}
        ]
    )
    
    return True

if __name__ == "__main__":
    test_telegram_notification()