#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Start Trading System
------------------
Script kh·ªüi ƒë·ªông v√† ƒëi·ªÅu khi·ªÉn h·ªá th·ªëng giao d·ªãch, cung c·∫•p giao di·ªán CLI ƒë·ªÉ qu·∫£n l√Ω c√°c d·ªãch v·ª•.
"""

import os
import sys
import time
import json
import argparse
import logging
from datetime import datetime
import subprocess

from telegram_notifier import TelegramNotifier
from service_guardian import ServiceGuardian

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('trading_system.log')
    ]
)

logger = logging.getLogger("trading_system")

def create_default_configs():
    """
    T·∫°o c√°c file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i
    """
    # T·∫°o th∆∞ m·ª•c configs n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs("configs", exist_ok=True)
    
    # T·∫°o c·∫•u h√¨nh market_analysis_config.json n·∫øu ch∆∞a t·ªìn t·∫°i
    market_analysis_config_path = "configs/market_analysis_config.json"
    if not os.path.exists(market_analysis_config_path):
        market_analysis_config = {
            "testnet": True,
            "primary_timeframe": "1h",
            "timeframes": ["5m", "15m", "1h", "4h", "1d"],
            "symbols_to_analyze": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT", "DOGEUSDT", "XRPUSDT"],
            "analysis_interval": 1800,
            "notification_settings": {
                "send_market_summary": True,
                "send_trading_signals": True,
                "signal_confidence_threshold": 70,
                "notification_interval": 7200,
                "quiet_hours": [0, 5]
            },
            "indicators": {
                "sma": [20, 50, 100, 200],
                "ema": [9, 21, 55, 100],
                "rsi": 14,
                "macd": {"fast": 12, "slow": 26, "signal": 9},
                "bollinger": {"window": 20, "std": 2},
                "atr": 14,
                "stoch": {"k": 14, "d": 3, "smooth": 3},
                "volume_sma": 20
            },
            "market_regime": {
                "volatility_threshold": 2.5,
                "trend_strength_threshold": 3.0,
                "volume_surge_threshold": 2.0
            },
            "data_window": 200,
            "system_settings": {
                "debug_mode": True,
                "cache_data": True,
                "cache_expiry": 300,
                "log_level": "INFO",
                "save_analysis_files": True
            }
        }
        
        with open(market_analysis_config_path, 'w') as f:
            json.dump(market_analysis_config, f, indent=4)
        
        logger.info(f"ƒê√£ t·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh: {market_analysis_config_path}")
    
    # T·∫°o c·∫•u h√¨nh service_config.json n·∫øu ch∆∞a t·ªìn t·∫°i
    service_config_path = "configs/service_config.json"
    if not os.path.exists(service_config_path):
        service_config = {
            "services": {
                "market_analyzer": {
                    "enabled": True,
                    "command": "python activate_market_analyzer.py --once",
                    "description": "H·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† t√≠n hi·ªáu giao d·ªãch",
                    "autostart": True,
                    "auto_restart": True,
                    "check_interval": 60,
                    "restart_delay": 10,
                    "max_restart_attempts": 5,
                    "health_check": {
                        "type": "file",
                        "path": "market_analyzer.log",
                        "max_age": 600
                    },
                    "dependencies": []
                },
                "auto_sltp_manager": {
                    "enabled": False,  # T·∫Øt m·∫∑c ƒë·ªãnh do ch∆∞a c·∫ßn thi·∫øt
                    "command": "python auto_sltp_manager.py",
                    "description": "Qu·∫£n l√Ω t·ª± ƒë·ªông Stop Loss v√† Take Profit",
                    "autostart": False,
                    "auto_restart": True,
                    "check_interval": 60,
                    "restart_delay": 10,
                    "max_restart_attempts": 5,
                    "health_check": {
                        "type": "file",
                        "path": "auto_sltp_manager.log",
                        "max_age": 600
                    },
                    "dependencies": []
                }
            },
            "system": {
                "check_interval": 30,
                "status_report_interval": 3600,
                "enable_notifications": True,
                "log_level": "INFO"
            }
        }
        
        with open(service_config_path, 'w') as f:
            json.dump(service_config, f, indent=4)
        
        logger.info(f"ƒê√£ t·∫°o file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh: {service_config_path}")

def init_system():
    """
    Kh·ªüi t·∫°o h·ªá th·ªëng
    """
    logger.info("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng giao d·ªãch...")
    
    # T·∫°o c√°c file c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    create_default_configs()
    
    # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
    notifier = TelegramNotifier()
    
    try:
        message = "<b>üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG GIAO D·ªäCH</b>\n\n"
        message += "<b>Th√¥ng tin h·ªá th·ªëng:</b>\n"
        message += f"- Th·ªùi gian: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n"
        message += f"- M√¥i tr∆∞·ªùng: Testnet\n"
        message += f"- Phi√™n b·∫£n: 1.0.0\n\n"
        message += "H·ªá th·ªëng ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o. M·ªôt b√°o c√°o tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c g·ª≠i sau khi kh·ªüi ƒë·ªông ho√†n t·∫•t."
        
        success = notifier.send_message(message)
        if success:
            logger.info("ƒê√£ g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng")
        else:
            logger.warning("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng")
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông: {e}")
    
    logger.info("H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")

def start_market_analyzer():
    """
    Kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng
    """
    logger.info("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng...")
    
    try:
        # Kh·ªüi ƒë·ªông tr·ª±c ti·∫øp m·ªôt l·∫ßn
        result = subprocess.run(
            ["python", "activate_market_analyzer.py", "--once"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            check=False
        )
        
        if result.returncode == 0:
            logger.info("ƒê√£ kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng")
            print(result.stdout[-500:] if len(result.stdout) > 500 else result.stdout)
            return True
        else:
            logger.error(f"L·ªói khi kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng: m√£ tho√°t {result.returncode}")
            print(f"L·ªói: {result.stderr}")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông h·ªá th·ªëng ph√¢n t√≠ch th·ªã tr∆∞·ªùng: {e}")
        return False

def start_service_guardian():
    """
    Kh·ªüi ƒë·ªông Service Guardian ƒë·ªÉ qu·∫£n l√Ω c√°c d·ªãch v·ª•
    """
    logger.info("ƒêang kh·ªüi ƒë·ªông Service Guardian...")
    
    try:
        guardian = ServiceGuardian()
        guardian.start()
        return True
    except KeyboardInterrupt:
        logger.info("ƒê√£ nh·∫≠n l·ªánh d·ª´ng t·ª´ ng∆∞·ªùi d√πng")
        return False
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông Service Guardian: {e}")
        return False

def main():
    """
    H√†m ch√≠nh
    """
    parser = argparse.ArgumentParser(description="Kh·ªüi ƒë·ªông v√† qu·∫£n l√Ω h·ªá th·ªëng giao d·ªãch")
    
    # Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn
    parser.add_argument('--init', action='store_true', help='Kh·ªüi t·∫°o h·ªá th·ªëng (t·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh)')
    parser.add_argument('--market-analysis', action='store_true', help='Ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng m·ªôt l·∫ßn')
    parser.add_argument('--service-guardian', action='store_true', help='Kh·ªüi ƒë·ªông Service Guardian ƒë·ªÉ qu·∫£n l√Ω c√°c d·ªãch v·ª•')
    parser.add_argument('--all', action='store_true', help='Kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c d·ªãch v·ª•')
    
    args = parser.parse_args()
    
    # N·∫øu kh√¥ng c√≥ t√πy ch·ªçn n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, hi·ªÉn th·ªã tr·ª£ gi√∫p
    if not (args.init or args.market_analysis or args.service_guardian or args.all):
        parser.print_help()
        return
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if args.init or args.all:
        init_system()
    
    # Ch·∫°y ph√¢n t√≠ch th·ªã tr∆∞·ªùng m·ªôt l·∫ßn n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if args.market_analysis or args.all:
        start_market_analyzer()
    
    # Kh·ªüi ƒë·ªông Service Guardian n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if args.service_guardian or args.all:
        start_service_guardian()

if __name__ == "__main__":
    main()