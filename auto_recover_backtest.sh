#!/bin/bash

# Script t·ª± ƒë·ªông ph·ª•c h·ªìi backtest khi b·ªã crash
# Gi√°m s√°t ti·∫øn tr√¨nh backtest v√† kh·ªüi ƒë·ªông l·∫°i n√≥ n·∫øu b·ªã crash

# Thi·∫øt l·∫≠p m√†u s·∫Øc
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Thi·∫øt l·∫≠p cho Telegram
TELEGRAM_ENABLED=true
TELEGRAM_SCRIPT="python telegram_send_message.py"

# Thi·∫øt l·∫≠p c√°c tham s·ªë
CHECK_INTERVAL=60  # Ki·ªÉm tra m·ªói 60 gi√¢y
MAX_RESTARTS=3     # S·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i t·ªëi ƒëa
WAIT_BEFORE_RESTART=10  # ƒê·ª£i 10 gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i

# Bi·∫øn to√†n c·ª•c
restart_count=0
recovery_log="backtest_recovery.log"

# H√†m hi·ªÉn th·ªã th√¥ng b√°o
message() {
    echo -e "${BLUE}[INFO]${NC} $1"
    echo "[INFO] $1" >> $recovery_log
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "info" "[BACKTEST RECOVERY] $1" &> /dev/null
    fi
}

warning() {
    echo -e "${YELLOW}[C·∫¢NH B√ÅO]${NC} $1"
    echo "[WARNING] $1" >> $recovery_log
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "warning" "[BACKTEST RECOVERY] $1" &> /dev/null
    fi
}

error() {
    echo -e "${RED}[L·ªñI]${NC} $1"
    echo "[ERROR] $1" >> $recovery_log
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "error" "[BACKTEST RECOVERY] $1" &> /dev/null
    fi
}

success() {
    echo -e "${GREEN}[TH√ÄNH C√îNG]${NC} $1"
    echo "[SUCCESS] $1" >> $recovery_log
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "success" "[BACKTEST RECOVERY] $1" &> /dev/null
    fi
}

# Ki·ªÉm tra ti·∫øn tr√¨nh backtest
check_backtest_process() {
    if [ ! -f "backtest.pid" ]; then
        error "Kh√¥ng t√¨m th·∫•y file backtest.pid. Backtest c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
        return 1
    fi
    
    pid=$(cat backtest.pid)
    if ! ps -p $pid > /dev/null; then
        warning "Ti·∫øn tr√¨nh backtest v·ªõi PID $pid kh√¥ng c√≤n ho·∫°t ƒë·ªông!"
        
        # Ki·ªÉm tra exit code n·∫øu c√≥
        if [ -f "backtest_exit_code.txt" ]; then
            exit_code=$(cat backtest_exit_code.txt)
            if [ "$exit_code" = "0" ]; then
                success "Backtest ƒë√£ ho√†n th√†nh th√†nh c√¥ng. Kh√¥ng c·∫ßn ph·ª•c h·ªìi."
                return 0
            else
                warning "Backtest ƒë√£ k·∫øt th√∫c v·ªõi m√£ l·ªói $exit_code. C·∫ßn ph·ª•c h·ªìi."
                return 2
            fi
        else
            warning "Backtest ƒë√£ crash nh∆∞ng kh√¥ng t√¨m th·∫•y exit code. C·∫ßn ph·ª•c h·ªìi."
            return 2
        fi
    fi
    
    message "Ti·∫øn tr√¨nh backtest (PID: $pid) ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."
    return 0
}

# L∆∞u l·∫°i tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ ph·ª•c h·ªìi sau n√†y
backup_current_state() {
    # T·∫°o th∆∞ m·ª•c cho backup n·∫øu ch∆∞a t·ªìn t·∫°i
    backup_dir="backtest_recovery_backups"
    mkdir -p $backup_dir
    
    # T·∫°o t√™n backup d·ª±a tr√™n timestamp
    timestamp=$(date +%Y%m%d_%H%M%S)
    backup_file="$backup_dir/backtest_backup_$timestamp.tar.gz"
    
    # Danh s√°ch c√°c file c·∫ßn backup
    files_to_backup="backtest_status.json backtest_results backtest_charts"
    
    # Th√™m v√†o c√°c file kh√°c n·∫øu ch√∫ng t·ªìn t·∫°i
    [ -f "backtest_controller.log" ] && files_to_backup="$files_to_backup backtest_controller.log"
    [ -f "backtest_output.log" ] && files_to_backup="$files_to_backup backtest_output.log"
    
    # T·∫°o file backup
    tar -czf $backup_file $files_to_backup 2>/dev/null
    
    # Ki·ªÉm tra k·∫øt qu·∫£
    if [ $? -eq 0 ]; then
        message "ƒê√£ sao l∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o $backup_file"
        return 0
    else
        warning "Kh√¥ng th·ªÉ sao l∆∞u tr·∫°ng th√°i hi·ªán t·∫°i"
        return 1
    fi
}

# Kh·ªüi ƒë·ªông l·∫°i backtest
restart_backtest() {
    # Sao l∆∞u tr·∫°ng th√°i hi·ªán t·∫°i
    backup_current_state
    
    # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i
    message "ƒê·ª£i $WAIT_BEFORE_RESTART gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i..."
    sleep $WAIT_BEFORE_RESTART
    
    # TƒÉng bi·∫øn ƒë·∫øm kh·ªüi ƒë·ªông l·∫°i
    restart_count=$((restart_count + 1))
    message "ƒêang th·ª±c hi·ªán l·∫ßn kh·ªüi ƒë·ªông l·∫°i th·ª© $restart_count/$MAX_RESTARTS..."
    
    # X√≥a file PID c≈©
    rm -f backtest.pid
    
    # T·∫°o command ƒë·ªÉ ch·∫°y backtest
    backtest_cmd="python comprehensive_backtest.py --resume"
    
    # Ghi th√¥ng tin v√†o log
    message "Kh·ªüi ƒë·ªông l·∫°i backtest v·ªõi l·ªánh: $backtest_cmd"
    
    # Kh·ªüi ƒë·ªông backtest trong background
    eval "$backtest_cmd > backtest_output.log 2>&1 &"
    backtest_pid=$!
    
    # L∆∞u PID v√†o file
    echo $backtest_pid > backtest.pid
    
    # G·ª≠i th√¥ng b√°o Telegram
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        recover_msg="üîÑ *BACKTEST ƒê∆Ø·ª¢C KH·ªûI ƒê·ªòNG L·∫†I*\n"
        recover_msg+="L·∫ßn kh·ªüi ƒë·ªông l·∫°i: $restart_count/$MAX_RESTARTS\n"
        recover_msg+="PID m·ªõi: $backtest_pid\n"
        recover_msg+="Th·ªùi gian: $(date)"
        
        $TELEGRAM_SCRIPT "warning" "$recover_msg"
    fi
    
    # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ki·ªÉm tra ti·∫øn tr√¨nh ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng ch∆∞a
    sleep 5
    if ! ps -p $backtest_pid > /dev/null; then
        error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i backtest!"
        return 1
    fi
    
    success "ƒê√£ kh·ªüi ƒë·ªông l·∫°i backtest th√†nh c√¥ng v·ªõi PID: $backtest_pid"
    return 0
}

# H√†m ch√≠nh ƒë·ªÉ gi√°m s√°t v√† ph·ª•c h·ªìi
monitor_and_recover() {
    message "B·∫Øt ƒë·∫ßu gi√°m s√°t ti·∫øn tr√¨nh backtest..."
    
    while true; do
        # Ki·ªÉm tra ti·∫øn tr√¨nh
        check_backtest_process
        status=$?
        
        # X·ª≠ l√Ω theo tr·∫°ng th√°i
        if [ $status -eq 0 ]; then
            # Ti·∫øn tr√¨nh ƒëang ch·∫°y ho·∫∑c ƒë√£ ho√†n th√†nh, kh√¥ng c·∫ßn ph·ª•c h·ªìi
            message "Ki·ªÉm tra k·∫ø ti·∫øp sau $CHECK_INTERVAL gi√¢y..."
        elif [ $status -eq 2 ]; then
            # Ti·∫øn tr√¨nh ƒë√£ crash, c·∫ßn ph·ª•c h·ªìi
            warning "Ph√°t hi·ªán backtest b·ªã crash. Chu·∫©n b·ªã kh·ªüi ƒë·ªông l·∫°i..."
            
            # Ki·ªÉm tra s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i
            if [ $restart_count -lt $MAX_RESTARTS ]; then
                restart_backtest
            else
                error "ƒê√£ ƒë·∫°t ƒë·∫øn s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i t·ªëi ƒëa ($MAX_RESTARTS). D·ª´ng gi√°m s√°t."
                
                # G·ª≠i th√¥ng b√°o Telegram
                if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
                    $TELEGRAM_SCRIPT "error" "‚õî *BACKTEST RECOVERY TH·∫§T B·∫†I*\nƒê√£ ƒë·∫°t ƒë·∫øn s·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i t·ªëi ƒëa ($MAX_RESTARTS).\nC·∫ßn ki·ªÉm tra th·ªß c√¥ng."
                fi
                
                return 1
            fi
        else
            # Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh, c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông
            warning "Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh backtest. ƒê·ª£i $CHECK_INTERVAL gi√¢y..."
        fi
        
        # ƒê·ª£i ƒë·∫øn l·∫ßn ki·ªÉm tra ti·∫øp theo
        sleep $CHECK_INTERVAL
    done
}

# H√†m ch·∫°y trong ch·∫ø ƒë·ªô daemon
run_as_daemon() {
    message "Kh·ªüi ƒë·ªông auto_recover_backtest.sh trong ch·∫ø ƒë·ªô daemon..."
    
    # Ch·∫°y script trong background
    nohup bash "$0" --monitor > /dev/null 2>&1 &
    daemon_pid=$!
    
    # L∆∞u PID c·ªßa daemon
    echo $daemon_pid > backtest_recovery.pid
    
    success "Daemon ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v·ªõi PID: $daemon_pid"
    message "Nh·∫≠t k√Ω ph·ª•c h·ªìi ƒë∆∞·ª£c l∆∞u t·∫°i: $recovery_log"
    message "ƒê·ªÉ d·ª´ng daemon, s·ª≠ d·ª•ng: bash $0 --stop"
}

# H√†m d·ª´ng daemon
stop_daemon() {
    if [ ! -f "backtest_recovery.pid" ]; then
        error "Kh√¥ng t√¨m th·∫•y file backtest_recovery.pid. Daemon c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
        return 1
    fi
    
    daemon_pid=$(cat backtest_recovery.pid)
    if ! ps -p $daemon_pid > /dev/null; then
        warning "Daemon v·ªõi PID $daemon_pid kh√¥ng c√≤n ho·∫°t ƒë·ªông."
        rm -f backtest_recovery.pid
        return 1
    fi
    
    # D·ª´ng daemon
    kill -15 $daemon_pid
    
    # ƒê·ª£i v√† ki·ªÉm tra
    sleep 2
    if ps -p $daemon_pid > /dev/null; then
        # N·∫øu v·∫´n ch·∫°y, d√πng SIGKILL
        kill -9 $daemon_pid
        sleep 1
    fi
    
    # Ki·ªÉm tra l·∫°i
    if ps -p $daemon_pid > /dev/null; then
        error "Kh√¥ng th·ªÉ d·ª´ng daemon v·ªõi PID $daemon_pid"
        return 1
    else
        success "ƒê√£ d·ª´ng daemon th√†nh c√¥ng"
        rm -f backtest_recovery.pid
        return 0
    fi
}

# Hi·ªÉn th·ªã tr·∫°ng th√°i daemon
show_daemon_status() {
    if [ ! -f "backtest_recovery.pid" ]; then
        warning "Kh√¥ng t√¨m th·∫•y file backtest_recovery.pid. Daemon c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
        return 1
    fi
    
    daemon_pid=$(cat backtest_recovery.pid)
    if ! ps -p $daemon_pid > /dev/null; then
        warning "Daemon v·ªõi PID $daemon_pid kh√¥ng c√≤n ho·∫°t ƒë·ªông."
        return 1
    fi
    
    message "Daemon ƒëang ch·∫°y v·ªõi PID $daemon_pid"
    
    # Hi·ªÉn th·ªã th√¥ng tin t·ª´ log n·∫øu c√≥
    if [ -f "$recovery_log" ]; then
        echo -e "\n${BLUE}===== NH·∫¨T K√ù PH·ª§C H·ªíI G·∫¶N ƒê√ÇY =====${NC}"
        tail -n 10 $recovery_log
    fi
    
    return 0
}

# H√†m hi·ªÉn th·ªã c√°ch s·ª≠ d·ª•ng script
show_usage() {
    echo -e "${BLUE}C√ÅCH S·ª¨ D·ª§NG:${NC}"
    echo -e "  bash $0 [--option]"
    echo -e "\n${BLUE}C√ÅC T√ôY CH·ªåN:${NC}"
    echo -e "  --start     Kh·ªüi ƒë·ªông daemon gi√°m s√°t v√† ph·ª•c h·ªìi"
    echo -e "  --stop      D·ª´ng daemon"
    echo -e "  --status    Hi·ªÉn th·ªã tr·∫°ng th√°i daemon"
    echo -e "  --monitor   Ch·∫°y tr·ª±c ti·∫øp ch·∫ø ƒë·ªô gi√°m s√°t (kh√¥ng ph·∫£i daemon)"
    echo -e "  --help      Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
    echo -e "\n${BLUE}M√î T·∫¢:${NC}"
    echo -e "  Script n√†y gi√°m s√°t ti·∫øn tr√¨nh backtest v√† t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i"
    echo -e "  n·∫øu n√≥ b·ªã crash. S·ªë l·∫ßn kh·ªüi ƒë·ªông l·∫°i t·ªëi ƒëa l√† $MAX_RESTARTS l·∫ßn."
}

# H√†m ch√≠nh
main() {
    # Kh·ªüi t·∫°o log file n·∫øu ch∆∞a t·ªìn t·∫°i
    if [ ! -f "$recovery_log" ]; then
        echo "===== NH·∫¨T K√ù PH·ª§C H·ªíI BACKTEST =====" > $recovery_log
        echo "B·∫Øt ƒë·∫ßu: $(date)" >> $recovery_log
        echo "----------------------------------------" >> $recovery_log
    fi
    
    # X·ª≠ l√Ω tham s·ªë
    case "$1" in
        --start)
            run_as_daemon
            ;;
        --stop)
            stop_daemon
            ;;
        --status)
            show_daemon_status
            ;;
        --monitor)
            monitor_and_recover
            ;;
        --help)
            show_usage
            ;;
        *)
            # N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã menu
            clear
            echo -e "${BLUE}================================================================${NC}"
            echo -e "${BLUE}              PH·ª§C H·ªíI T·ª∞ ƒê·ªòNG BACKTEST                         ${NC}"
            echo -e "${BLUE}================================================================${NC}"
            
            echo -e "\n${BLUE}===== MENU PH·ª§C H·ªíI BACKTEST =====${NC}"
            echo "1. B·∫Øt ƒë·∫ßu daemon gi√°m s√°t v√† ph·ª•c h·ªìi"
            echo "2. D·ª´ng daemon"
            echo "3. Hi·ªÉn th·ªã tr·∫°ng th√°i daemon"
            echo "4. Ch·∫°y ch·∫ø ƒë·ªô gi√°m s√°t tr·ª±c ti·∫øp (kh√¥ng ph·∫£i daemon)"
            echo "5. Tho√°t"
            
            read -p "L·ª±a ch·ªçn c·ªßa b·∫°n (1-5): " menu_choice
            
            case $menu_choice in
                1)
                    run_as_daemon
                    ;;
                2)
                    stop_daemon
                    ;;
                3)
                    show_daemon_status
                    ;;
                4)
                    monitor_and_recover
                    ;;
                *)
                    message "Tho√°t ch∆∞∆°ng tr√¨nh."
                    ;;
            esac
            ;;
    esac
}

# Ch·∫°y h√†m ch√≠nh v·ªõi tham s·ªë ƒë∆∞·ª£c cung c·∫•p
main "$@"