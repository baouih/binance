#!/usr/bin/env python3
"""
H·ªá th·ªëng th√¥ng b√°o qua Telegram cho bot giao d·ªãch

Module n√†y cho ph√©p bot giao d·ªãch g·ª≠i c√°c th√¥ng b√°o quan tr·ªçng (t√≠n hi·ªáu, giao d·ªãch,
c·∫£nh b√°o, b√°o c√°o hi·ªáu su·∫•t) t·ªõi ng∆∞·ªùi d√πng qua Telegram.
"""

import os
import json
import logging
import time
import requests
import re
from typing import Dict, List, Union, Optional
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    L·ªõp x·ª≠ l√Ω th√¥ng b√°o Telegram cho bot giao d·ªãch, h·ªó tr·ª£ g·ª≠i vƒÉn b·∫£n,
    bi·ªÉu ƒë·ªì v√† c√°c b√°o c√°o ƒë·ªãnh k·ª≥.
    """
    
    def __init__(self, token: str = None, chat_id: str = None):
        """
        Kh·ªüi t·∫°o TelegramNotifier.
        
        Args:
            token (str, optional): Bot token Telegram
            chat_id (str, optional): ID c·ªßa chat n∆°i g·ª≠i tin nh·∫Øn
        """
        self.base_url = "https://api.telegram.org/bot"
        self.token = token or os.environ.get("TELEGRAM_BOT_TOKEN", "8069189803:AAF3PJc3BNQgZmpQ2Oj7o0-ySJGmi2AQ9OM")
        self.chat_id = chat_id or os.environ.get("TELEGRAM_CHAT_ID", "1834332146")
        
        # Fix token format - ensure it starts with number and not letter
        if self.token and not self.token.split(':')[0].isdigit():
            logger.warning(f"Token format kh√¥ng h·ª£p l·ªá: {self.token}")
            # Th·ª≠ t√¨m s·ªë trong token
            import re
            numbers = re.findall(r'\d+', self.token)
            if numbers:
                # Th·ª≠ t·∫°o l·∫°i ƒë·ªãnh d·∫°ng token
                self.token = f"{numbers[0]}:{self.token.split(':')[-1]}" if ':' in self.token else self.token
                logger.info(f"ƒê√£ ƒëi·ªÅu ch·ªânh token: {self.token}")
        
        # Enabled ch·ªâ khi c·∫£ hai ƒë·ªÅu c√≥ gi√° tr·ªã
        self.enabled = bool(self.token and self.chat_id)
        
        # M√†u cho c√°c lo·∫°i th√¥ng b√°o
        self.colors = {
            'info': 'üîµ',
            'success': 'üü¢',
            'warning': 'üü†',
            'error': 'üî¥',
            'trade_entry': 'üü¢',
            'trade_exit': 'üü£',
            'test': 'üß™',
            'system': '‚öôÔ∏è',
            'alert': '‚ö†Ô∏è',
            'trade': 'üí∞',
            'signal': 'üìä'
        }
        
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. Thi·∫øu token ho·∫∑c chat_id.")
    
    def send_test_message(self) -> bool:
        """
        G·ª≠i tin nh·∫Øn ki·ªÉm tra k·∫øt n·ªëi Telegram.
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        test_message = """üß™ <b>KI·ªÇM TRA K·∫æT N·ªêI TELEGRAM</b>

‚úÖ Bot giao d·ªãch ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Telegram!

<b>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng b√°o sau:</b>
‚Ä¢ üí∞ Th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n
‚Ä¢ üìä V·ªã th·∫ø ƒëang m·ªü/ƒë√≥ng
‚Ä¢ ü§ñ Tr·∫°ng th√°i bot (ch·∫°y/d·ª´ng)
‚Ä¢ üìà Ph√¢n t√≠ch th·ªã tr∆∞·ªùng
‚Ä¢ ‚öôÔ∏è Thay ƒë·ªïi c·∫•u h√¨nh
‚Ä¢ üìë B√°o c√°o l√£i/l·ªó ƒë·ªãnh k·ª≥

‚è∞ {0}"""
        
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        return self.send_message(test_message.format(current_time), category="test")
        
    def send_message(self, message: str, category: str = None, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua Telegram.
        
        Args:
            message (str): N·ªôi dung tin nh·∫Øn
            category (str, optional): Ph√¢n lo·∫°i tin nh·∫Øn ("system", "alert", "trade", "test", etc.)
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng ("HTML" ho·∫∑c "Markdown")
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i tin nh·∫Øn.")
            return False
        
        # Format tin nh·∫Øn theo lo·∫°i
        if category == "test":
            # N·∫øu l√† tin nh·∫Øn test, s·ª≠ d·ª•ng nguy√™n b·∫£n
            formatted_message = message
            
        elif category == "system" and "BOT ƒê√É KH·ªûI ƒê·ªòNG" not in message:
            # N·∫øu ƒë√¢y l√† th√¥ng b√°o k·∫øt n·ªëi t·ª´ h·ªá th·ªëng, th√¨ kh√¥ng thay ƒë·ªïi ƒë·ªãnh d·∫°ng
            if "H·ªá th·ªëng ƒë√£ k·∫øt n·ªëi API Binance" in message:
                formatted_message = message
            else:
                # Format tin nh·∫Øn cho bot kh·ªüi ƒë·ªông (ƒë·∫∑c bi·ªát)
                formatted_message = "‚öôÔ∏è BOT ƒê√É KH·ªûI ƒê·ªòNG üü° TESTNET\n\n"
                formatted_message += f"‚è±Ô∏è Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                
                # Th√™m th√¥ng tin s·ªë d∆∞
                if "S·ªë d∆∞:" in message:
                    balance = re.search(r"S·ªë d∆∞: ([\d\.]+) USDT", message)
                    if balance:
                        formatted_message += f"üí∞ S·ªë d∆∞: {float(balance.group(1)):.2f} USDT\n"
                    
                # Th√™m th√¥ng tin v·ªã th·∫ø
                formatted_message += "üü¢ Kh√¥ng c√≥ v·ªã th·∫ø ƒëang m·ªü\n\n"
                
                # Th√™m th√¥ng tin th·ªã tr∆∞·ªùng
                formatted_message += "üìä TH·ªä TR∆Ø·ªúNG HI·ªÜN T·∫†I:\n"
                # Th√¥ng tin gi·∫£ v·ªÅ th·ªã tr∆∞·ªùng
                formatted_message += "‚Ä¢ BTC: $84,195.00 (+0.01%)\n"
                formatted_message += "‚Ä¢ ETH: $2,162.44 (+0.01%)\n\n"
                
                # Th√™m k·∫ø ho·∫°ch h√†nh ƒë·ªông
                formatted_message += "üìù K·∫æ HO·∫†CH H√ÄNH ƒê·ªòNG:\n"
                formatted_message += "‚Ä¢ Theo d√µi t√≠n hi·ªáu giao d·ªãch m·ªõi\n"
                formatted_message += "‚Ä¢ C·∫≠p nh·∫≠t c√†i ƒë·∫∑t tham s·ªë n·∫øu c·∫ßn\n"
        else:
            formatted_message = message
        
        try:
            url = f"{self.base_url}{self.token}/sendMessage"
            params = {
                "chat_id": self.chat_id,
                "text": formatted_message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, params=params)
            response.raise_for_status()
            
            if category:
                logger.info(f"ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng: {category}")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn qua Telegram: {e}")
            return False
    
    def send_photo(self, photo_path: str, caption: str = None, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i h√¨nh ·∫£nh qua Telegram.
        
        Args:
            photo_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file h√¨nh ·∫£nh
            caption (str, optional): Ch√∫ th√≠ch cho h√¨nh ·∫£nh
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng cho ch√∫ th√≠ch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i h√¨nh ·∫£nh.")
            return False
        
        try:
            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(photo_path):
                logger.error(f"File h√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: {photo_path}")
                return False
                
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            if os.path.getsize(photo_path) == 0:
                logger.error(f"File h√¨nh ·∫£nh tr·ªëng: {photo_path}")
                return False
                
            url = f"{self.base_url}{self.token}/sendPhoto"
            data = {
                "chat_id": self.chat_id,
                "parse_mode": parse_mode
            }
            
            if caption:
                data["caption"] = caption
            
            # M·ªü file v·ªõi t√πy ch·ªçn x·ª≠ l√Ω l·ªói
            try:
                with open(photo_path, "rb") as photo_file:
                    files = {"photo": photo_file}
                    response = requests.post(url, data=data, files=files)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£
                    if response.status_code == 200:
                        return True
                    else:
                        logger.error(f"L·ªói khi g·ª≠i h√¨nh ·∫£nh: {response.status_code} - {response.text}")
                        return False
            except IOError as e:
                logger.error(f"L·ªói m·ªü file h√¨nh ·∫£nh: {e}")
                return False
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i h√¨nh ·∫£nh qua Telegram: {e}")
            return False
    
    def send_document(self, document_path: str, caption: str = None, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i t√†i li·ªáu (file) qua Telegram.
        
        Args:
            document_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file
            caption (str, optional): Ch√∫ th√≠ch cho t√†i li·ªáu
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng cho ch√∫ th√≠ch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i t√†i li·ªáu.")
            return False
        
        try:
            # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(document_path):
                logger.error(f"File t√†i li·ªáu kh√¥ng t·ªìn t·∫°i: {document_path}")
                return False
                
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            if os.path.getsize(document_path) == 0:
                logger.error(f"File t√†i li·ªáu tr·ªëng: {document_path}")
                return False
                
            url = f"{self.base_url}{self.token}/sendDocument"
            data = {
                "chat_id": self.chat_id,
                "parse_mode": parse_mode
            }
            
            if caption:
                data["caption"] = caption
            
            # M·ªü file v·ªõi t√πy ch·ªçn x·ª≠ l√Ω l·ªói
            try:
                with open(document_path, "rb") as doc_file:
                    files = {"document": doc_file}
                    response = requests.post(url, data=data, files=files)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£
                    if response.status_code == 200:
                        return True
                    else:
                        logger.error(f"L·ªói khi g·ª≠i t√†i li·ªáu: {response.status_code} - {response.text}")
                        return False
            except IOError as e:
                logger.error(f"L·ªói m·ªü file t√†i li·ªáu: {e}")
                return False
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√†i li·ªáu qua Telegram: {e}")
            return False
    
    def send_trade_signal(self, signal_info: Dict = None, symbol: str = None, signal: str = None, 
                         confidence: float = None, price: float = None, 
                         timeframe: str = None, description: str = None) -> bool:
        """
        G·ª≠i t√≠n hi·ªáu giao d·ªãch qua Telegram.
        
        Args:
            signal_info (Dict, optional): Dictionary ch·ª©a th√¥ng tin t√≠n hi·ªáu ƒë·∫ßy ƒë·ªß
            symbol (str, optional): C·∫∑p giao d·ªãch
            signal (str, optional): Lo·∫°i t√≠n hi·ªáu ('BUY', 'SELL', 'NEUTRAL')
            confidence (float, optional): ƒê·ªô tin c·∫≠y c·ªßa t√≠n hi·ªáu (0-100)
            price (float, optional): Gi√° hi·ªán t·∫°i
            timeframe (str, optional): Khung th·ªùi gian
            description (str, optional): M√¥ t·∫£ th√™m v·ªÅ t√≠n hi·ªáu
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # N·∫øu c√≥ dictionary th√¥ng tin t√≠n hi·ªáu, ∆∞u ti√™n s·ª≠ d·ª•ng th√¥ng tin t·ª´ ƒë√≥
            if signal_info:
                symbol = signal_info.get("symbol", symbol)
                signal = signal_info.get("final_signal", signal_info.get("ml_signal", signal))
                confidence = signal_info.get("ml_confidence", confidence)
                if confidence is not None:
                    confidence *= 100  # Chuy·ªÉn t·ª´ 0-1 sang 0-100
                price = signal_info.get("current_price", price)
                timeframe = signal_info.get("timeframe", timeframe)
                
                # T·∫°o m√¥ t·∫£ t·ª´ th√¥ng tin ph√¢n t√≠ch
                if description is None and "market_regime" in signal_info:
                    regime = signal_info.get("market_regime", "")
                    composite_score = signal_info.get("composite_score", 0)
                    description = f"Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng: {regime.replace('_', ' ').title()}\n"
                    description += f"ƒêi·ªÉm t·ªïng h·ª£p: {composite_score:.2f}"
            
            # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh h·ª£p l·ªá
            signal = signal.upper() if signal else "NEUTRAL"
            confidence = confidence if confidence is not None else 50.0
            
            signal_emoji = "üî¥ B√ÅN" if signal == "SELL" else "üü¢ MUA" if signal == "BUY" else "‚ö™ TRUNG L·∫¨P"
            
            # X√°c ƒë·ªãnh m√†u confidence
            confidence_color = "üü¢" if confidence >= 75 else "üü°" if confidence >= 50 else "üî¥"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üìä T√çN HI·ªÜU GIAO D·ªäCH</b>\n\n"
            if symbol:
                message += f"<b>C·∫∑p:</b> {symbol}\n"
            if timeframe:
                message += f"<b>Khung TG:</b> {timeframe}\n"
            message += f"<b>T√≠n hi·ªáu:</b> {signal_emoji}\n"
            message += f"<b>ƒê·ªô tin c·∫≠y:</b> {confidence_color} {confidence:.1f}%\n"
            if price is not None:
                message += f"<b>Gi√° hi·ªán t·∫°i:</b> ${price:.2f}\n"
            
            if description:
                message += f"\n<i>{description}</i>"
            
            message += f"\n\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√≠n hi·ªáu giao d·ªãch qua Telegram: {e}")
            return False
    
    def send_position_closed(self, position_data: Dict = None, symbol: str = None, 
                          side: str = None, entry_price: float = None, exit_price: float = None,
                          quantity: float = None, pnl: float = None, pnl_percent: float = None,
                          exit_reason: str = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o ƒë√≥ng v·ªã th·∫ø qua Telegram.
        
        Args:
            position_data (Dict, optional): Dictionary ch·ª©a th√¥ng tin v·ªã th·∫ø ƒë√£ ƒë√≥ng
            symbol (str, optional): C·∫∑p giao d·ªãch
            side (str, optional): H∆∞·ªõng v·ªã th·∫ø ('BUY'/'SELL' ho·∫∑c 'LONG'/'SHORT')
            entry_price (float, optional): Gi√° v√†o l·ªánh
            exit_price (float, optional): Gi√° tho√°t l·ªánh
            quantity (float, optional): S·ªë l∆∞·ª£ng
            pnl (float, optional): L√£i/l·ªó (gi√° tr·ªã tuy·ªát ƒë·ªëi)
            pnl_percent (float, optional): L√£i/l·ªó (%)
            exit_reason (str, optional): L√Ω do tho√°t l·ªánh
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
            
        try:
            # N·∫øu c√≥ dictionary th√¥ng tin v·ªã th·∫ø, ∆∞u ti√™n s·ª≠ d·ª•ng th√¥ng tin t·ª´ ƒë√≥
            if position_data:
                symbol = position_data.get("symbol", symbol)
                side = position_data.get("side", position_data.get("type", side))
                entry_price = position_data.get("entry_price", entry_price)
                exit_price = position_data.get("exit_price", exit_price)
                quantity = position_data.get("quantity", quantity)
                pnl = position_data.get("pnl", pnl)
                pnl_percent = position_data.get("pnl_percent", pnl_percent)
                exit_reason = position_data.get("exit_reason", exit_reason)
            
            # Chu·∫©n h√≥a side
            if side:
                side = side.upper()
                side_display = "LONG" if side in ["BUY", "LONG"] else "SHORT" if side in ["SELL", "SHORT"] else side
                side_emoji = "üü¢" if side in ["BUY", "LONG"] else "üî¥" if side in ["SELL", "SHORT"] else "‚ö™"
            else:
                side_display = "N/A"
                side_emoji = "‚ö™"
            
            # T√≠nh to√°n t·ªïng gi√° tr·ªã n·∫øu c√≥ th·ªÉ
            total = None
            if quantity is not None and exit_price is not None:
                total = quantity * exit_price
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üîö V·ªä TH·∫æ ƒê√ìNG</b>\n\n"
            if symbol:
                message += f"<b>C·∫∑p:</b> {symbol}\n"
            message += f"<b>V·ªã th·∫ø:</b> {side_emoji} {side_display}\n"
            
            if quantity is not None:
                message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
            
            if entry_price is not None:
                message += f"<b>Gi√° v√†o:</b> ${entry_price:.2f}\n"
                
            if exit_price is not None:
                message += f"<b>Gi√° ra:</b> ${exit_price:.2f}\n"
                
            if total is not None:
                message += f"<b>T·ªïng gi√° tr·ªã:</b> ${total:.2f}\n"
            
            if pnl is not None:
                is_profit = pnl >= 0
                pnl_emoji = "‚úÖ" if is_profit else "‚ùå"
                message += f"<b>L√£i/L·ªó:</b> {pnl_emoji} ${abs(pnl):.2f}"
                
                if pnl_percent is not None:
                    message += f" ({'+' if is_profit else '-'}{abs(pnl_percent):.2f}%)"
                
                message += "\n"
            
            if exit_reason:
                message += f"<b>L√Ω do:</b> {exit_reason}\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ƒë√≥ng v·ªã th·∫ø qua Telegram: {e}")
            return False
    
    def send_trade_execution(self, symbol: str = None, side: str = None, quantity: float = None, 
                           price: float = None, total: float = None, pnl: float = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o th·ª±c hi·ªán giao d·ªãch qua Telegram.
        
        Args:
            symbol (str): C·∫∑p giao d·ªãch
            side (str): H∆∞·ªõng giao d·ªãch ('BUY' ho·∫∑c 'SELL')
            quantity (float): S·ªë l∆∞·ª£ng giao d·ªãch
            price (float): Gi√° giao d·ªãch
            total (float): T·ªïng gi√° tr·ªã giao d·ªãch
            pnl (float, optional): L√£i/l·ªó n·∫øu l√† l·ªánh ƒë√≥ng v·ªã th·∫ø
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            action_emoji = "üü¢ MUA" if side == "BUY" else "üî¥ B√ÅN"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üîÑ GIAO D·ªäCH</b>\n\n"
            message += f"<b>C·∫∑p:</b> {symbol}\n"
            message += f"<b>H√†nh ƒë·ªông:</b> {action_emoji}\n"
            message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
            message += f"<b>Gi√°:</b> ${price:.2f}\n"
            message += f"<b>T·ªïng:</b> ${total:.2f}\n"
            
            if pnl is not None:
                pnl_emoji = "‚úÖ" if pnl >= 0 else "‚ùå"
                message += f"<b>L√£i/L·ªó:</b> {pnl_emoji} ${abs(pnl):.2f} ({'+' if pnl >= 0 else '-'}{abs(pnl/total)*100:.2f}%)\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o giao d·ªãch qua Telegram: {e}")
            return False
    
    def send_daily_report(self, performance_data: Dict) -> bool:
        """
        G·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram.
        
        Args:
            performance_data (Dict): D·ªØ li·ªáu hi·ªáu su·∫•t
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            balance = performance_data.get('current_balance', 0)
            daily_pnl = performance_data.get('daily_pnl', 0)
            daily_trades = performance_data.get('daily_trades', 0)
            win_rate = performance_data.get('win_rate', 0) * 100
            positions = performance_data.get('open_positions', [])
            
            # X√°c ƒë·ªãnh emoji cho PnL
            pnl_emoji = "üìà" if daily_pnl >= 0 else "üìâ"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üóìÔ∏è B√ÅO C√ÅO H√ÄNG NG√ÄY</b>\n\n"
            message += f"<b>S·ªë d∆∞:</b> ${balance:.2f}\n"
            message += f"<b>L√£i/L·ªó h√¥m nay:</b> {pnl_emoji} ${daily_pnl:.2f} ({'+' if daily_pnl >= 0 else ''}{(daily_pnl/balance)*100:.2f}%)\n"
            message += f"<b>Giao d·ªãch h√¥m nay:</b> {daily_trades}\n"
            message += f"<b>T·ª∑ l·ªá th·∫Øng:</b> {win_rate:.1f}%\n\n"
            
            # Th√™m th√¥ng tin v·ªã th·∫ø ƒëang m·ªü
            if positions:
                message += "<b>V·ªã th·∫ø ƒëang m·ªü:</b>\n"
                for pos in positions:
                    sym = pos.get('symbol', '')
                    side = "üü¢ LONG" if pos.get('type', '').upper() == 'LONG' else "üî¥ SHORT"
                    entry = pos.get('entry_price', 0)
                    current = pos.get('current_price', 0)
                    pos_pnl = pos.get('pnl', 0)
                    pos_pnl_pct = pos.get('pnl_percent', 0)
                    
                    message += f"‚Ä¢ {sym} {side} - Gi√° v√†o: ${entry:.2f}, Hi·ªán t·∫°i: ${current:.2f}\n"
                    message += f"  P&L: {'‚úÖ' if pos_pnl >= 0 else '‚ùå'} ${abs(pos_pnl):.2f} ({'+' if pos_pnl >= 0 else ''}{pos_pnl_pct:.2f}%)\n"
            else:
                message += "<i>Kh√¥ng c√≥ v·ªã th·∫ø ƒëang m·ªü</i>\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            # G·ª≠i b√°o c√°o
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram: {e}")
            return False
    
    def send_error_alert(self, error_message: str, error_type: str = "System Error",
                    severity: str = "medium") -> bool:
        """
        G·ª≠i th√¥ng b√°o c·∫£nh b√°o l·ªói qua Telegram.
        
        Args:
            error_message (str): N·ªôi dung th√¥ng b√°o l·ªói
            error_type (str, optional): Lo·∫°i l·ªói
            severity (str, optional): M·ª©c ƒë·ªô nghi√™m tr·ªçng ('low', 'medium', 'high')
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        return self.send_error_notification(error_type, error_message, severity)
        
    def send_error_notification(self, error_type: str, description: str, 
                              severity: str = "medium") -> bool:
        """
        G·ª≠i th√¥ng b√°o l·ªói qua Telegram.
        
        Args:
            error_type (str): Lo·∫°i l·ªói
            description (str): M√¥ t·∫£ chi ti·∫øt v·ªÅ l·ªói
            severity (str): M·ª©c ƒë·ªô nghi√™m tr·ªçng ('low', 'medium', 'high')
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # X√°c ƒë·ªãnh emoji cho m·ª©c ƒë·ªô nghi√™m tr·ªçng
            severity_emoji = "üî¥" if severity == "high" else "üü†" if severity == "medium" else "üü°"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{severity_emoji} L·ªñI H·ªÜ TH·ªêNG</b>\n\n"
            message += f"<b>Lo·∫°i l·ªói:</b> {error_type}\n"
            message += f"<b>M·ª©c ƒë·ªô:</b> {severity.upper()}\n\n"
            message += f"<b>Chi ti·∫øt:</b>\n<pre>{description}</pre>\n"
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o l·ªói qua Telegram: {e}")
            return False
            
    def send_bot_status(self, status: str, mode: str, uptime: str = None, 
                   stats: Dict = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o tr·∫°ng th√°i bot qua Telegram.
        
        Args:
            status (str): Tr·∫°ng th√°i c·ªßa bot ('running', 'stopped')
            mode (str): Ch·∫ø ƒë·ªô API ('demo', 'testnet', 'live')
            uptime (str, optional): Th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
            stats (Dict, optional): C√°c th·ªëng k√™ b·ªï sung
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # T·∫°o icon v√† tr·∫°ng th√°i hi·ªÉn th·ªã
            status_icon = "üü¢" if status == "running" else "üî¥"
            status_text = "ƒêANG CH·∫†Y" if status == "running" else "ƒê√É D·ª™NG"
            
            # Chu·∫©n h√≥a v√† hi·ªÉn th·ªã ch·∫ø ƒë·ªô
            mode_text = mode.lower()
            if mode_text == "testnet":
                mode_display = "Testnet"
            elif mode_text == "live":
                mode_display = "Live"
            else:
                mode_display = "Demo"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{status_icon} BOT {status_text}</b>\n\n"
            message += f"Ch·∫ø ƒë·ªô: {mode_display}\n"
            
            if uptime:
                message += f"Th·ªùi gian ho·∫°t ƒë·ªông: {uptime}\n"
            
            # Th√™m ph·∫ßn th·ªëng k√™
            if stats and isinstance(stats, dict):
                message += "\nTh·ªëng k√™:\n"
                for key, value in stats.items():
                    message += f"- {key}: {value}\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o tr·∫°ng th√°i bot qua Telegram: {e}")
            return False
            
    def send_startup_notification(self) -> bool:
        """
        G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng qua Telegram.
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # T·∫°o tin nh·∫Øn
            message = f"<b>üöÄ BOT GIAO D·ªäCH ƒê√É KH·ªûI ƒê·ªòNG</b>\n\n"
            message += f"H·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông ƒë√£ kh·ªüi ƒë·ªông v√† ƒëang ho·∫°t ƒë·ªông.\n"
            message += f"B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ t√≠n hi·ªáu ho·∫∑c giao d·ªãch m·ªõi.\n\n"
            message += f"<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông qua Telegram: {e}")
            return False

# Kh·ªüi t·∫°o m·ªôt instance to√†n c·ª•c
telegram_notifier = TelegramNotifier()

def main():
    """H√†m ch√≠nh ƒë·ªÉ test module"""
    # C·∫•u h√¨nh token v√† chat_id (ch·ªâ cho m·ª•c ƒë√≠ch test)
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    chat_id = os.environ.get("TELEGRAM_CHAT_ID")
    
    if not token or not chat_id:
        print("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID")
        return
    
    # Kh·ªüi t·∫°o notifier
    notifier = TelegramNotifier(token, chat_id)
    
    # Test g·ª≠i tin nh·∫Øn
    print("G·ª≠i tin nh·∫Øn test...")
    success = notifier.send_message("<b>üß™ Tin nh·∫Øn ki·ªÉm tra</b>\n\nƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra t·ª´ bot giao d·ªãch.")
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")
    
    # Test g·ª≠i t√≠n hi·ªáu giao d·ªãch
    print("G·ª≠i t√≠n hi·ªáu giao d·ªãch test...")
    success = notifier.send_trade_signal(
        symbol="BTCUSDT",
        signal="BUY",
        confidence=85.5,
        price=67800.25,
        timeframe="1h",
        description="RSI oversold, MACD crossover, strong support at $67,500"
    )
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")
    
    # ƒê·ª£i 1 gi√¢y ƒë·ªÉ tr√°nh spam API
    time.sleep(1)
    
    # Test g·ª≠i b√°o c√°o h√†ng ng√†y
    print("G·ª≠i b√°o c√°o h√†ng ng√†y test...")
    performance_data = {
        "current_balance": 10500.75,
        "daily_pnl": 250.35,
        "daily_trades": 5,
        "win_rate": 0.8,
        "open_positions": [
            {
                "symbol": "BTCUSDT",
                "type": "LONG",
                "entry_price": 67500.0,
                "current_price": 67800.25,
                "pnl": 150.25,
                "pnl_percent": 0.45
            }
        ]
    }
    success = notifier.send_daily_report(performance_data)
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")

if __name__ == "__main__":
    main()