#!/usr/bin/env python3
"""
H·ªá th·ªëng th√¥ng b√°o qua Telegram cho bot giao d·ªãch

Module n√†y cho ph√©p bot giao d·ªãch g·ª≠i c√°c th√¥ng b√°o quan tr·ªçng (t√≠n hi·ªáu, giao d·ªãch,
c·∫£nh b√°o, b√°o c√°o hi·ªáu su·∫•t) t·ªõi ng∆∞·ªùi d√πng qua Telegram.
"""

import os
import json
import logging
import time
import requests
from typing import Dict, List, Union, Optional
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    L·ªõp x·ª≠ l√Ω th√¥ng b√°o Telegram cho bot giao d·ªãch, h·ªó tr·ª£ g·ª≠i vƒÉn b·∫£n,
    bi·ªÉu ƒë·ªì v√† c√°c b√°o c√°o ƒë·ªãnh k·ª≥.
    """
    
    def __init__(self, token: str = None, chat_id: str = None):
        """
        Kh·ªüi t·∫°o TelegramNotifier.
        
        Args:
            token (str, optional): Bot token Telegram
            chat_id (str, optional): ID c·ªßa chat n∆°i g·ª≠i tin nh·∫Øn
        """
        self.base_url = "https://api.telegram.org/bot"
        self.token = token or os.environ.get("TELEGRAM_BOT_TOKEN")
        self.chat_id = chat_id or os.environ.get("TELEGRAM_CHAT_ID")
        self.enabled = bool(self.token and self.chat_id)
        
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. Thi·∫øu token ho·∫∑c chat_id.")
    
    def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua Telegram.
        
        Args:
            message (str): N·ªôi dung tin nh·∫Øn
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng ("HTML" ho·∫∑c "Markdown")
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i tin nh·∫Øn.")
            return False
        
        try:
            url = f"{self.base_url}{self.token}/sendMessage"
            params = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, params=params)
            response.raise_for_status()
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn qua Telegram: {e}")
            return False
    
    def send_photo(self, photo_path: str, caption: str = None, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i h√¨nh ·∫£nh qua Telegram.
        
        Args:
            photo_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file h√¨nh ·∫£nh
            caption (str, optional): Ch√∫ th√≠ch cho h√¨nh ·∫£nh
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng cho ch√∫ th√≠ch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i h√¨nh ·∫£nh.")
            return False
        
        try:
            url = f"{self.base_url}{self.token}/sendPhoto"
            data = {
                "chat_id": self.chat_id,
                "parse_mode": parse_mode
            }
            
            if caption:
                data["caption"] = caption
            
            files = {"photo": open(photo_path, "rb")}
            
            response = requests.post(url, data=data, files=files)
            response.raise_for_status()
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i h√¨nh ·∫£nh qua Telegram: {e}")
            return False
    
    def send_document(self, document_path: str, caption: str = None, parse_mode: str = "HTML") -> bool:
        """
        G·ª≠i t√†i li·ªáu (file) qua Telegram.
        
        Args:
            document_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file
            caption (str, optional): Ch√∫ th√≠ch cho t√†i li·ªáu
            parse_mode (str): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng cho ch√∫ th√≠ch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.warning("Telegram kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t. B·ªè qua g·ª≠i t√†i li·ªáu.")
            return False
        
        try:
            url = f"{self.base_url}{self.token}/sendDocument"
            data = {
                "chat_id": self.chat_id,
                "parse_mode": parse_mode
            }
            
            if caption:
                data["caption"] = caption
            
            files = {"document": open(document_path, "rb")}
            
            response = requests.post(url, data=data, files=files)
            response.raise_for_status()
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√†i li·ªáu qua Telegram: {e}")
            return False
    
    def send_trade_signal(self, symbol: str, signal: str, confidence: float, 
                         price: float, timeframe: str, description: str = None) -> bool:
        """
        G·ª≠i t√≠n hi·ªáu giao d·ªãch qua Telegram.
        
        Args:
            symbol (str): C·∫∑p giao d·ªãch
            signal (str): Lo·∫°i t√≠n hi·ªáu ('BUY', 'SELL', 'NEUTRAL')
            confidence (float): ƒê·ªô tin c·∫≠y c·ªßa t√≠n hi·ªáu (0-100)
            price (float): Gi√° hi·ªán t·∫°i
            timeframe (str): Khung th·ªùi gian
            description (str, optional): M√¥ t·∫£ th√™m v·ªÅ t√≠n hi·ªáu
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            signal_emoji = "üî¥ B√ÅN" if signal == "SELL" else "üü¢ MUA" if signal == "BUY" else "‚ö™ TRUNG L·∫¨P"
            
            # X√°c ƒë·ªãnh m√†u confidence
            confidence_color = "üü¢" if confidence >= 75 else "üü°" if confidence >= 50 else "üî¥"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üìä T√çN HI·ªÜU GIAO D·ªäCH</b>\n\n"
            message += f"<b>C·∫∑p:</b> {symbol}\n"
            message += f"<b>Khung TG:</b> {timeframe}\n"
            message += f"<b>T√≠n hi·ªáu:</b> {signal_emoji}\n"
            message += f"<b>ƒê·ªô tin c·∫≠y:</b> {confidence_color} {confidence:.1f}%\n"
            message += f"<b>Gi√° hi·ªán t·∫°i:</b> ${price:.2f}\n"
            
            if description:
                message += f"\n<i>{description}</i>"
            
            message += f"\n\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i t√≠n hi·ªáu giao d·ªãch qua Telegram: {e}")
            return False
    
    def send_trade_execution(self, symbol: str, side: str, quantity: float, 
                           price: float, total: float, pnl: float = None) -> bool:
        """
        G·ª≠i th√¥ng b√°o th·ª±c hi·ªán giao d·ªãch qua Telegram.
        
        Args:
            symbol (str): C·∫∑p giao d·ªãch
            side (str): H∆∞·ªõng giao d·ªãch ('BUY' ho·∫∑c 'SELL')
            quantity (float): S·ªë l∆∞·ª£ng giao d·ªãch
            price (float): Gi√° giao d·ªãch
            total (float): T·ªïng gi√° tr·ªã giao d·ªãch
            pnl (float, optional): L√£i/l·ªó n·∫øu l√† l·ªánh ƒë√≥ng v·ªã th·∫ø
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            action_emoji = "üü¢ MUA" if side == "BUY" else "üî¥ B√ÅN"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üîÑ GIAO D·ªäCH</b>\n\n"
            message += f"<b>C·∫∑p:</b> {symbol}\n"
            message += f"<b>H√†nh ƒë·ªông:</b> {action_emoji}\n"
            message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
            message += f"<b>Gi√°:</b> ${price:.2f}\n"
            message += f"<b>T·ªïng:</b> ${total:.2f}\n"
            
            if pnl is not None:
                pnl_emoji = "‚úÖ" if pnl >= 0 else "‚ùå"
                message += f"<b>L√£i/L·ªó:</b> {pnl_emoji} ${abs(pnl):.2f} ({'+' if pnl >= 0 else '-'}{abs(pnl/total)*100:.2f}%)\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o giao d·ªãch qua Telegram: {e}")
            return False
    
    def send_daily_report(self, performance_data: Dict) -> bool:
        """
        G·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram.
        
        Args:
            performance_data (Dict): D·ªØ li·ªáu hi·ªáu su·∫•t
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            balance = performance_data.get('current_balance', 0)
            daily_pnl = performance_data.get('daily_pnl', 0)
            daily_trades = performance_data.get('daily_trades', 0)
            win_rate = performance_data.get('win_rate', 0) * 100
            positions = performance_data.get('open_positions', [])
            
            # X√°c ƒë·ªãnh emoji cho PnL
            pnl_emoji = "üìà" if daily_pnl >= 0 else "üìâ"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>üóìÔ∏è B√ÅO C√ÅO H√ÄNG NG√ÄY</b>\n\n"
            message += f"<b>S·ªë d∆∞:</b> ${balance:.2f}\n"
            message += f"<b>L√£i/L·ªó h√¥m nay:</b> {pnl_emoji} ${daily_pnl:.2f} ({'+' if daily_pnl >= 0 else ''}{(daily_pnl/balance)*100:.2f}%)\n"
            message += f"<b>Giao d·ªãch h√¥m nay:</b> {daily_trades}\n"
            message += f"<b>T·ª∑ l·ªá th·∫Øng:</b> {win_rate:.1f}%\n\n"
            
            # Th√™m th√¥ng tin v·ªã th·∫ø ƒëang m·ªü
            if positions:
                message += "<b>V·ªã th·∫ø ƒëang m·ªü:</b>\n"
                for pos in positions:
                    sym = pos.get('symbol', '')
                    side = "üü¢ LONG" if pos.get('type', '').upper() == 'LONG' else "üî¥ SHORT"
                    entry = pos.get('entry_price', 0)
                    current = pos.get('current_price', 0)
                    pos_pnl = pos.get('pnl', 0)
                    pos_pnl_pct = pos.get('pnl_percent', 0)
                    
                    message += f"‚Ä¢ {sym} {side} - Gi√° v√†o: ${entry:.2f}, Hi·ªán t·∫°i: ${current:.2f}\n"
                    message += f"  P&L: {'‚úÖ' if pos_pnl >= 0 else '‚ùå'} ${abs(pos_pnl):.2f} ({'+' if pos_pnl >= 0 else ''}{pos_pnl_pct:.2f}%)\n"
            else:
                message += "<i>Kh√¥ng c√≥ v·ªã th·∫ø ƒëang m·ªü</i>\n"
            
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            # G·ª≠i b√°o c√°o
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i b√°o c√°o h√†ng ng√†y qua Telegram: {e}")
            return False
    
    def send_error_notification(self, error_type: str, description: str, 
                              severity: str = "medium") -> bool:
        """
        G·ª≠i th√¥ng b√°o l·ªói qua Telegram.
        
        Args:
            error_type (str): Lo·∫°i l·ªói
            description (str): M√¥ t·∫£ chi ti·∫øt v·ªÅ l·ªói
            severity (str): M·ª©c ƒë·ªô nghi√™m tr·ªçng ('low', 'medium', 'high')
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # X√°c ƒë·ªãnh emoji cho m·ª©c ƒë·ªô nghi√™m tr·ªçng
            severity_emoji = "üî¥" if severity == "high" else "üü†" if severity == "medium" else "üü°"
            
            # T·∫°o tin nh·∫Øn
            message = f"<b>{severity_emoji} L·ªñI H·ªÜ TH·ªêNG</b>\n\n"
            message += f"<b>Lo·∫°i l·ªói:</b> {error_type}\n"
            message += f"<b>M·ª©c ƒë·ªô:</b> {severity.upper()}\n\n"
            message += f"<b>Chi ti·∫øt:</b>\n<pre>{description}</pre>\n"
            message += f"\n<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o l·ªói qua Telegram: {e}")
            return False
            
    def send_startup_notification(self) -> bool:
        """
        G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông h·ªá th·ªëng qua Telegram.
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        try:
            # T·∫°o tin nh·∫Øn
            message = f"<b>üöÄ BOT GIAO D·ªäCH ƒê√É KH·ªûI ƒê·ªòNG</b>\n\n"
            message += f"H·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông ƒë√£ kh·ªüi ƒë·ªông v√† ƒëang ho·∫°t ƒë·ªông.\n"
            message += f"B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ t√≠n hi·ªáu ho·∫∑c giao d·ªãch m·ªõi.\n\n"
            message += f"<i>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            
            return self.send_message(message)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông qua Telegram: {e}")
            return False

# Kh·ªüi t·∫°o m·ªôt instance to√†n c·ª•c
telegram_notifier = TelegramNotifier()

def main():
    """H√†m ch√≠nh ƒë·ªÉ test module"""
    # C·∫•u h√¨nh token v√† chat_id (ch·ªâ cho m·ª•c ƒë√≠ch test)
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    chat_id = os.environ.get("TELEGRAM_CHAT_ID")
    
    if not token or not chat_id:
        print("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID")
        return
    
    # Kh·ªüi t·∫°o notifier
    notifier = TelegramNotifier(token, chat_id)
    
    # Test g·ª≠i tin nh·∫Øn
    print("G·ª≠i tin nh·∫Øn test...")
    success = notifier.send_message("<b>üß™ Tin nh·∫Øn ki·ªÉm tra</b>\n\nƒê√¢y l√† tin nh·∫Øn ki·ªÉm tra t·ª´ bot giao d·ªãch.")
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")
    
    # Test g·ª≠i t√≠n hi·ªáu giao d·ªãch
    print("G·ª≠i t√≠n hi·ªáu giao d·ªãch test...")
    success = notifier.send_trade_signal(
        symbol="BTCUSDT",
        signal="BUY",
        confidence=85.5,
        price=67800.25,
        timeframe="1h",
        description="RSI oversold, MACD crossover, strong support at $67,500"
    )
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")
    
    # ƒê·ª£i 1 gi√¢y ƒë·ªÉ tr√°nh spam API
    time.sleep(1)
    
    # Test g·ª≠i b√°o c√°o h√†ng ng√†y
    print("G·ª≠i b√°o c√°o h√†ng ng√†y test...")
    performance_data = {
        "current_balance": 10500.75,
        "daily_pnl": 250.35,
        "daily_trades": 5,
        "win_rate": 0.8,
        "open_positions": [
            {
                "symbol": "BTCUSDT",
                "type": "LONG",
                "entry_price": 67500.0,
                "current_price": 67800.25,
                "pnl": 150.25,
                "pnl_percent": 0.45
            }
        ]
    }
    success = notifier.send_daily_report(performance_data)
    print(f"K·∫øt qu·∫£: {'Th√†nh c√¥ng' if success else 'Th·∫•t b·∫°i'}")

if __name__ == "__main__":
    main()