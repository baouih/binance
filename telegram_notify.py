"""
H·ªá th·ªëng th√¥ng b√°o qua Telegram cho bot giao d·ªãch

Module n√†y cho ph√©p bot giao d·ªãch g·ª≠i c√°c th√¥ng b√°o quan tr·ªçng (t√≠n hi·ªáu, giao d·ªãch,
c·∫£nh b√°o, b√°o c√°o hi·ªáu su·∫•t) t·ªõi ng∆∞·ªùi d√πng qua Telegram.
"""

import os
import logging
import requests
from typing import Dict, List, Optional, Union, Any
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger('telegram_notify')

class TelegramNotifier:
    """L·ªõp x·ª≠ l√Ω th√¥ng b√°o Telegram cho bot giao d·ªãch"""
    
    def __init__(self, token: Optional[str] = None, chat_id: Optional[str] = None):
        """
        Kh·ªüi t·∫°o Telegram Notifier.
        
        Args:
            token (str, optional): Telegram Bot API token. N·∫øu None, s·∫Ω l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN
            chat_id (str, optional): Telegram chat ID. N·∫øu None, s·∫Ω l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_CHAT_ID
        """
        self.token = token or os.environ.get('TELEGRAM_BOT_TOKEN')
        self.chat_id = chat_id or os.environ.get('TELEGRAM_CHAT_ID')
        self.enabled = self.token is not None and self.chat_id is not None
        
        if not self.enabled:
            logger.warning("Telegram notifier kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t do thi·∫øu token ho·∫∑c chat_id")
            logger.warning("ƒê·∫∑t TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ k√≠ch ho·∫°t")
        else:
            logger.info(f"Telegram notifier ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho chat ID: {self.chat_id}")
    
    def send_message(self, message: str) -> bool:
        """
        G·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua Telegram.
        
        Args:
            message (str): N·ªôi dung tin nh·∫Øn
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            logger.debug(f"Kh√¥ng g·ª≠i tin nh·∫Øn Telegram (kh√¥ng k√≠ch ho·∫°t): {message}")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.debug(f"ƒê√£ g·ª≠i tin nh·∫Øn Telegram: {message[:50]}...")
                return True
            else:
                logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {str(e)}")
            return False
    
    def send_trade_signal(self, signal_data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o t√≠n hi·ªáu giao d·ªãch.
        
        Args:
            signal_data (Dict): D·ªØ li·ªáu t√≠n hi·ªáu giao d·ªãch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled or signal_data.get('final_signal') == 'neutral':
            return False
        
        symbol = signal_data.get('symbol', 'UNKNOWN')
        signal = signal_data.get('final_signal', 'neutral')
        confidence = signal_data.get('ml_confidence', 0)
        regime = signal_data.get('market_regime', 'unknown')
        price = signal_data.get('current_price', 0)
        
        # Bi·ªÉu t∆∞·ª£ng emoji
        emoji = "üü¢" if signal == "buy" else "üî¥" if signal == "sell" else "‚ö™Ô∏è"
        
        # X√¢y d·ª±ng tin nh·∫Øn
        message = f"<b>{emoji} T√çN HI·ªÜU GIAO D·ªäCH: {symbol}</b>\n\n"
        message += f"<b>T√≠n hi·ªáu:</b> {signal.upper()}\n"
        message += f"<b>Gi√° hi·ªán t·∫°i:</b> ${price:,.2f}\n"
        message += f"<b>ƒê·ªô tin c·∫≠y:</b> {confidence:.2%}\n"
        message += f"<b>Ch·∫ø ƒë·ªô th·ªã tr∆∞·ªùng:</b> {regime}\n"
        message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        # Th√™m chi ti·∫øt t·ª´ c√°c ch·ªâ b√°o ri√™ng bi·ªát
        if 'individual_scores' in signal_data:
            message += "\n<b>Chi ti·∫øt ch·ªâ b√°o:</b>\n"
            for indicator, score in signal_data['individual_scores'].items():
                if abs(score) >= 0.3:  # Ch·ªâ hi·ªán th·ªã c√°c ch·ªâ b√°o c√≥ t√≠n hi·ªáu ƒë√°ng k·ªÉ
                    direction = "‚ÜóÔ∏è" if score > 0 else "‚ÜòÔ∏è"
                    message += f"- {indicator}: {direction} {score:.2f}\n"
        
        return self.send_message(message)
    
    def send_trade_execution(self, trade_data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o khi th·ª±c hi·ªán giao d·ªãch.
        
        Args:
            trade_data (Dict): D·ªØ li·ªáu giao d·ªãch
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        symbol = trade_data.get('symbol', 'UNKNOWN')
        side = trade_data.get('side', 'UNKNOWN')
        quantity = trade_data.get('quantity', 0)
        price = trade_data.get('price', 0)
        
        # Bi·ªÉu t∆∞·ª£ng emoji
        emoji = "üü¢" if side == "BUY" else "üî¥" if side == "SELL" else "‚ö™Ô∏è"
        
        # X√¢y d·ª±ng tin nh·∫Øn
        message = f"<b>{emoji} ƒê√É TH·ª∞C HI·ªÜN GIAO D·ªäCH: {symbol}</b>\n\n"
        message += f"<b>H√†nh ƒë·ªông:</b> {side}\n"
        message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
        message += f"<b>Gi√°:</b> ${price:,.2f}\n"
        message += f"<b>T·ªïng gi√° tr·ªã:</b> ${quantity * price:,.2f}\n"
        message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        if 'simulated' in trade_data and trade_data['simulated']:
            message += "\n<i>Ghi ch√∫: ƒê√¢y l√† giao d·ªãch gi·∫£ l·∫≠p</i>"
        
        return self.send_message(message)
    
    def send_position_closed(self, position_data: Dict) -> bool:
        """
        G·ª≠i th√¥ng b√°o khi ƒë√≥ng v·ªã th·∫ø.
        
        Args:
            position_data (Dict): D·ªØ li·ªáu v·ªÅ v·ªã th·∫ø ƒë√£ ƒë√≥ng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        symbol = position_data.get('symbol', 'UNKNOWN')
        side = position_data.get('side', 'UNKNOWN')
        entry_price = position_data.get('entry_price', 0)
        exit_price = position_data.get('exit_price', 0)
        quantity = position_data.get('quantity', 0)
        pnl = position_data.get('pnl', 0)
        
        # Bi·ªÉu t∆∞·ª£ng emoji
        emoji = "‚úÖ" if pnl > 0 else "‚ùå" if pnl < 0 else "‚ö™Ô∏è"
        
        # X√¢y d·ª±ng tin nh·∫Øn
        message = f"<b>{emoji} ƒê√É ƒê√ìNG V·ªä TH·∫æ: {symbol}</b>\n\n"
        message += f"<b>Lo·∫°i v·ªã th·∫ø:</b> {side}\n"
        message += f"<b>Gi√° v√†o:</b> ${entry_price:,.2f}\n"
        message += f"<b>Gi√° ra:</b> ${exit_price:,.2f}\n"
        message += f"<b>S·ªë l∆∞·ª£ng:</b> {quantity}\n"
        message += f"<b>L√£i/L·ªó:</b> ${pnl:,.2f}\n"
        
        pnl_pct = (pnl / (entry_price * quantity)) * 100
        message += f"<b>L√£i/L·ªó (%):</b> {pnl_pct:,.2f}%\n"
        message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        return self.send_message(message)
    
    def send_daily_report(self, performance_data: Dict) -> bool:
        """
        G·ª≠i b√°o c√°o hi·ªáu su·∫•t h√†ng ng√†y.
        
        Args:
            performance_data (Dict): D·ªØ li·ªáu hi·ªáu su·∫•t
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        # X√¢y d·ª±ng tin nh·∫Øn
        message = f"<b>üìä B√ÅO C√ÅO HI·ªÜU SU·∫§T H√ÄNG NG√ÄY</b>\n\n"
        message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        # Th√¥ng tin s·ªë d∆∞
        balance = performance_data.get('balance', 0)
        message += f"<b>S·ªë d∆∞ hi·ªán t·∫°i:</b> ${balance:,.2f}\n"
        
        # Th√¥ng tin l√£i/l·ªó
        daily_pnl = performance_data.get('daily_pnl', 0)
        daily_pnl_pct = performance_data.get('daily_pnl_pct', 0)
        emoji = "üìà" if daily_pnl >= 0 else "üìâ"
        message += f"<b>L√£i/L·ªó h√¥m nay:</b> {emoji} ${daily_pnl:,.2f} ({daily_pnl_pct:,.2f}%)\n\n"
        
        # Th√¥ng tin giao d·ªãch
        trades = performance_data.get('trades', [])
        num_trades = len(trades)
        win_trades = sum(1 for t in trades if t.get('pnl', 0) > 0)
        loss_trades = sum(1 for t in trades if t.get('pnl', 0) < 0)
        
        if num_trades > 0:
            win_rate = (win_trades / num_trades) * 100
            message += f"<b>S·ªë giao d·ªãch:</b> {num_trades}\n"
            message += f"<b>Th·∫Øng/Thua:</b> {win_trades}/{loss_trades}\n"
            message += f"<b>T·ª∑ l·ªá th·∫Øng:</b> {win_rate:.2f}%\n\n"
        else:
            message += "<b>Kh√¥ng c√≥ giao d·ªãch n√†o h√¥m nay</b>\n\n"
        
        # Hi·ªáu su·∫•t c√°c c·∫∑p giao d·ªãch
        if 'symbol_performance' in performance_data:
            message += "<b>Hi·ªáu su·∫•t theo c·∫∑p:</b>\n"
            for symbol, perf in performance_data['symbol_performance'].items():
                symbol_emoji = "üü¢" if perf.get('pnl', 0) >= 0 else "üî¥"
                message += f"- {symbol_emoji} {symbol}: ${perf.get('pnl', 0):,.2f}\n"
        
        # Ghi ch√∫
        message += "\n<i>Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.</i>"
        
        return self.send_message(message)
    
    def send_error_alert(self, error_message: str, error_type: str = "General") -> bool:
        """
        G·ª≠i c·∫£nh b√°o l·ªói.
        
        Args:
            error_message (str): Th√¥ng b√°o l·ªói
            error_type (str): Lo·∫°i l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        if not self.enabled:
            return False
        
        # X√¢y d·ª±ng tin nh·∫Øn
        message = f"<b>‚ö†Ô∏è C·∫¢NH B√ÅO L·ªñI: {error_type}</b>\n\n"
        message += f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        message += f"<b>Chi ti·∫øt:</b> {error_message}\n"
        
        return self.send_message(message)
    
    def send_startup_notification(self) -> bool:
        """
        G·ª≠i th√¥ng b√°o khi bot kh·ªüi ƒë·ªông.
        
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        message = (
            "<b>ü§ñ BOT GIAO D·ªäCH ƒê√É KH·ªûI ƒê·ªòNG</b>\n\n"
            f"<b>Th·ªùi gian:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            "<b>Tr·∫°ng th√°i:</b> ƒêang ho·∫°t ƒë·ªông\n"
            "<b>Ch·∫ø ƒë·ªô:</b> Gi·∫£ l·∫≠p (kh√¥ng c√≥ giao d·ªãch th·ª±c)\n\n"
            "<i>Bot ƒëang theo d√µi th·ªã tr∆∞·ªùng v√† s·∫Ω g·ª≠i t√≠n hi·ªáu khi c√≥ c∆° h·ªôi giao d·ªãch.</i>"
        )
        
        return self.send_message(message)

# T·∫°o instance khi import module
telegram_notifier = TelegramNotifier()