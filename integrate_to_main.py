"""
Script t√≠ch h·ª£p c√°c module m·ªõi v√†o h·ªá th·ªëng ch√≠nh
Script n√†y s·∫Ω ƒë∆∞·ª£c ch·∫°y ƒë·ªÉ b·∫Øt ƒë·∫ßu t√≠ch h·ª£p c√°c module m·ªõi v√†o bot hi·ªán c√≥
"""

import logging
import os
import sys
import json
from datetime import datetime

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('integrate_to_main')

# Import c√°c module ƒë√£ t·∫°o
from telegram_notifier import TelegramNotifier
from detailed_trade_notifications import DetailedTradeNotifications
from position_monitoring import PositionMonitor
from enhanced_market_updater import EnhancedMarketUpdater
from integrate_modules import integrate_modules
from modules_manager import register_module_routes

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ t√≠ch h·ª£p c√°c module m·ªõi
    """
    logger.info("B·∫Øt ƒë·∫ßu t√≠ch h·ª£p c√°c module m·ªõi v√†o h·ªá th·ªëng ch√≠nh...")
    
    try:
        # Import c√°c module t·ª´ h·ªá th·ªëng ch√≠nh
        from binance_api import BinanceAPI
        from data_processor import DataProcessor
        from composite_trading_strategy import CompositeTradingStrategy
        import main as main_app
        
        # Th√¥ng b√°o
        logger.info("ƒê√£ import c√°c module t·ª´ h·ªá th·ªëng ch√≠nh th√†nh c√¥ng")
        
        # Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        os.makedirs('logs', exist_ok=True)
        os.makedirs('market_analysis', exist_ok=True)
        os.makedirs('position_analysis', exist_ok=True)
        os.makedirs('trade_notifications', exist_ok=True)
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
        api_connector = BinanceAPI()
        data_processor = DataProcessor()
        strategy_engine = CompositeTradingStrategy()
        
        # T√≠ch h·ª£p c√°c module
        modules = integrate_modules(api_connector, data_processor, strategy_engine)
        
        # Th√™m c√°c API routes v√†o Flask app ch√≠nh
        if hasattr(main_app, 'app'):
            register_module_routes(main_app.app)
            logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c API routes v√†o Flask app ch√≠nh")
        
        # L∆∞u modules v√†o bi·∫øn to√†n c·ª•c c·ªßa main app
        main_app.integrated_modules = modules
        
        # In th√¥ng b√°o th√†nh c√¥ng
        if all([
            modules['detailed_notifier'],
            modules['position_monitor'],
            modules['market_updater']
        ]):
            logger.info("------------------------------------")
            logger.info("T√≠ch h·ª£p c√°c module m·ªõi th√†nh c√¥ng!")
            logger.info("- Th√¥ng b√°o chi ti·∫øt v·ªÅ giao d·ªãch: ‚úÖ")
            logger.info("- Gi√°m s√°t v·ªã th·∫ø giao d·ªãch: ‚úÖ")
            logger.info("- C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng n√¢ng cao: ‚úÖ")
            logger.info("------------------------------------")
            
            # G·ª≠i th√¥ng b√°o qua Telegram
            notifier = TelegramNotifier()
            message = (
                "üöÄ *T√çCH H·ª¢P MODULE M·ªöI TH√ÄNH C√îNG*\n\n"
                "C√°c module sau ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o h·ªá th·ªëng:\n"
                "‚úÖ Th√¥ng b√°o chi ti·∫øt v·ªÅ giao d·ªãch\n"
                "‚úÖ Gi√°m s√°t v·ªã th·∫ø giao d·ªãch\n"
                "‚úÖ C·∫≠p nh·∫≠t th·ªã tr∆∞·ªùng n√¢ng cao\n\n"
                f"‚è∞ Th·ªùi gian: `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
            )
            notifier.send_message(message, parse_mode='Markdown')
            
            return True
        else:
            logger.error("T√≠ch h·ª£p c√°c module m·ªõi kh√¥ng th√†nh c√¥ng")
            return False
    
    except ImportError as e:
        logger.error(f"L·ªói khi import module t·ª´ h·ªá th·ªëng ch√≠nh: {e}")
        return False
    except Exception as e:
        logger.error(f"L·ªói khi t√≠ch h·ª£p c√°c module m·ªõi: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)