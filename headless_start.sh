#!/bin/bash
# Script kh·ªüi ƒë·ªông h·ªá th·ªëng giao d·ªãch kh√¥ng c·∫ßn giao di·ªán ng∆∞·ªùi d√πng (headless)
# L√Ω t∆∞·ªüng cho m√¥i tr∆∞·ªùng m√°y ch·ªß

LOG_FILE="headless_start.log"

# Ghi log
log() {
    echo "[$(date)] $1" | tee -a $LOG_FILE
}

log "===== KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG GIAO D·ªäCH T·ª∞ ƒê·ªòNG ====="

# Ki·ªÉm tra xem python ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
if ! command -v python &> /dev/null; then
    log "‚ùå Python ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Python tr∆∞·ªõc khi ti·∫øp t·ª•c."
    exit 1
fi

# Ki·ªÉm tra file c·∫•u h√¨nh
if [ ! -f "account_config.json" ]; then
    log "‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh account_config.json."
    exit 1
fi

# Ki·ªÉm tra API keys
if ! grep -q "BINANCE_TESTNET_API_KEY" .env 2>/dev/null || ! grep -q "BINANCE_TESTNET_API_SECRET" .env 2>/dev/null; then
    log "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y API key ho·∫∑c Secret trong file .env!"
fi

log "‚úÖ Ki·ªÉm tra c·∫•u h√¨nh ho√†n t·∫•t"

# Ki·ªÉm tra k·∫øt n·ªëi Binance API
log "üîç Ki·ªÉm tra k·∫øt n·ªëi Binance API..."
API_TEST=$(python -c "
import requests
try:
    response = requests.get('https://testnet.binancefuture.com/fapi/v1/ping')
    if response.status_code == 200:
        print('success')
    else:
        print('fail')
except Exception as e:
    print('fail')
")

if [ "$API_TEST" != "success" ]; then
    log "‚ùå Ki·ªÉm tra k·∫øt n·ªëi Binance API th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† API."
    exit 1
else
    log "‚úÖ K·∫øt n·ªëi Binance API OK"
fi

# D·ª´ng c√°c d·ªãch v·ª• ƒëang ch·∫°y (n·∫øu c√≥)
log "üîÑ T·ª± ƒë·ªông d·ª´ng c√°c d·ªãch v·ª• ƒëang ch·∫°y (n·∫øu c√≥)..."

sltp_pid=$(pgrep -f "python auto_sltp_manager.py")
if [ ! -z "$sltp_pid" ]; then
    log "D·ª´ng Auto SLTP Manager (PID: $sltp_pid)..."
    kill $sltp_pid 2>/dev/null
    sleep 1
fi

trailing_pid=$(pgrep -f "python position_trailing_stop.py")
if [ ! -z "$trailing_pid" ]; then
    log "D·ª´ng Trailing Stop Service (PID: $trailing_pid)..."
    kill $trailing_pid 2>/dev/null
    sleep 1
fi

# Kh·ªüi ƒë·ªông Auto SLTP Manager
log "üöÄ Kh·ªüi ƒë·ªông Auto SLTP Manager..."
nohup python auto_sltp_manager.py > auto_sltp_manager.log 2>&1 &
sltp_pid=$!
echo $sltp_pid > auto_sltp_manager.pid
log "‚úÖ Auto SLTP Manager ƒë√£ kh·ªüi ƒë·ªông v·ªõi PID $sltp_pid"

# Kh·ªüi ƒë·ªông Trailing Stop Service
log "üöÄ Kh·ªüi ƒë·ªông Trailing Stop Service..."
nohup python position_trailing_stop.py > trailing_stop_service.log 2>&1 &
trailing_pid=$!
echo $trailing_pid > trailing_stop_service.pid
log "‚úÖ Trailing Stop Service ƒë√£ kh·ªüi ƒë·ªông v·ªõi PID $trailing_pid"

# Ki·ªÉm tra tr·∫°ng th√°i sau 3 gi√¢y
sleep 3
sltp_running=$(pgrep -f "python auto_sltp_manager.py")
trailing_running=$(pgrep -f "python position_trailing_stop.py")
log "Auto SLTP Manager: $([ ! -z "$sltp_running" ] && echo "üü¢ ƒêang ch·∫°y" || echo "üî¥ Kh√¥ng ch·∫°y")"
log "Trailing Stop:     $([ ! -z "$trailing_running" ] && echo "üü¢ ƒêang ch·∫°y" || echo "üî¥ Kh√¥ng ch·∫°y")"

# Th√¥ng b√°o k·∫øt qu·∫£
log
log "=== TR·∫†NG TH√ÅI KH·ªûI ƒê·ªòNG ==="
if [ ! -z "$sltp_running" ] && [ ! -z "$trailing_running" ]; then
    log "‚úÖ T·∫•t c·∫£ d·ªãch v·ª• ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng"
    
    # C√†i ƒë·∫∑t cron job ki·ªÉm tra s·ª©c kh·ªèe n·∫øu ch∆∞a c√≥
    CURRENT_DIR=$(pwd)
    CRON_JOB="*/30 * * * * cd $CURRENT_DIR && ./health_check.sh > /dev/null 2>&1"
    EXISTING_CRON=$(crontab -l 2>/dev/null | grep "health_check.sh")
    if [ -z "$EXISTING_CRON" ]; then
        # Th√™m cron job m·ªõi
        (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
        log "‚úÖ ƒê√£ c√†i ƒë·∫∑t l·ªãch ki·ªÉm tra s·ª©c kh·ªèe t·ª± ƒë·ªông m·ªói 30 ph√∫t"
    fi
else
    log "‚ö†Ô∏è M·ªôt s·ªë d·ªãch v·ª• kh√¥ng kh·ªüi ƒë·ªông ƒë√∫ng c√°ch. Vui l√≤ng ki·ªÉm tra logs."
fi

log
log "üìä V·ªã th·∫ø hi·ªán t·∫°i:"
python -c "
import json
try:
    with open('active_positions.json', 'r') as f:
        positions = json.load(f)
    if positions:
        for symbol, pos in positions.items():
            print(f\"  {symbol}: {pos.get('side')} @ {pos.get('entry_price', 0):.2f}, SL: {pos.get('stop_loss', 'N/A'):.2f}, TP: {pos.get('take_profit', 'N/A'):.2f}\")
    else:
        print('  Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü')
except Exception as e:
    print(f'  L·ªói khi ƒë·ªçc v·ªã th·∫ø: {e}')
" | tee -a $LOG_FILE

log
log "===== HO√ÄN T·∫§T KH·ªûI ƒê·ªòNG KH√îNG GIAO DI·ªÜN ====="
log "Vui l√≤ng ki·ªÉm tra logs ƒë·ªÉ theo d√µi tr·∫°ng th√°i h·ªá th·ªëng."
log "  Auto SLTP Manager: tail -f auto_sltp_manager.log"
log "  Trailing Stop:     tail -f trailing_stop_service.log"