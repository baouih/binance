#!/bin/bash

# Script d·ª´ng qu√° tr√¨nh backtest v√† g·ª≠i th√¥ng b√°o qua Telegram

# Thi·∫øt l·∫≠p m√†u s·∫Øc
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Thi·∫øt l·∫≠p cho Telegram
TELEGRAM_ENABLED=true
TELEGRAM_SCRIPT="python telegram_send_message.py"

# H√†m hi·ªÉn th·ªã th√¥ng b√°o
message() {
    echo -e "${BLUE}[INFO]${NC} $1"
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "info" "[BACKTEST] $1" &> /dev/null
    fi
}

warning() {
    echo -e "${YELLOW}[C·∫¢NH B√ÅO]${NC} $1"
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "warning" "[BACKTEST C·∫¢NH B√ÅO] $1" &> /dev/null
    fi
}

error() {
    echo -e "${RED}[L·ªñI]${NC} $1"
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "error" "[BACKTEST L·ªñI] $1" &> /dev/null
    fi
}

success() {
    echo -e "${GREEN}[TH√ÄNH C√îNG]${NC} $1"
    if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
        $TELEGRAM_SCRIPT "success" "[BACKTEST TH√ÄNH C√îNG] $1" &> /dev/null
    fi
}

# Ki·ªÉm tra xem ti·∫øn tr√¨nh backtest c√≥ ƒëang ch·∫°y kh√¥ng
check_backtest_process() {
    if [ ! -f "backtest.pid" ]; then
        error "Kh√¥ng t√¨m th·∫•y file backtest.pid. Backtest c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
        return 1
    fi
    
    pid=$(cat backtest.pid)
    if ! ps -p $pid > /dev/null; then
        warning "Ti·∫øn tr√¨nh backtest v·ªõi PID $pid kh√¥ng c√≤n ho·∫°t ƒë·ªông."
        rm -f backtest.pid
        return 1
    fi
    
    message "ƒê√£ t√¨m th·∫•y ti·∫øn tr√¨nh backtest (PID: $pid)"
    return 0
}

# D·ª´ng ti·∫øn tr√¨nh backtest v√† c√°c ti·∫øn tr√¨nh con
stop_backtest() {
    local pid=$1
    local force=$2
    
    # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i n·∫øu c√≥
    if [ -f "backtest_status.json" ]; then
        cp backtest_status.json backtest_status_backup.json
        message "ƒê√£ sao l∆∞u tr·∫°ng th√°i backtest hi·ªán t·∫°i"
    fi
    
    message "ƒêang d·ª´ng ti·∫øn tr√¨nh backtest (PID: $pid)..."
    
    # T√¨m t·∫•t c·∫£ c√°c ti·∫øn tr√¨nh con
    local child_pids=$(pgrep -P $pid)
    
    if [ "$force" = "force" ]; then
        # D·ª´ng ti·∫øn tr√¨nh b·∫±ng SIGKILL (bu·ªôc d·ª´ng)
        kill -9 $pid 2>/dev/null
        message "ƒê√£ g·ª≠i t√≠n hi·ªáu SIGKILL ƒë·∫øn ti·∫øn tr√¨nh ch√≠nh"
        
        for child_pid in $child_pids; do
            kill -9 $child_pid 2>/dev/null
            message "ƒê√£ g·ª≠i t√≠n hi·ªáu SIGKILL ƒë·∫øn ti·∫øn tr√¨nh con (PID: $child_pid)"
        done
    else
        # D·ª´ng ti·∫øn tr√¨nh b·∫±ng SIGTERM (y√™u c·∫ßu d·ª´ng)
        kill -15 $pid 2>/dev/null
        message "ƒê√£ g·ª≠i t√≠n hi·ªáu SIGTERM ƒë·∫øn ti·∫øn tr√¨nh ch√≠nh"
        
        # Ch·ªù 5 gi√¢y
        message "Ch·ªù ti·∫øn tr√¨nh k·∫øt th√∫c..."
        sleep 5
        
        # Ki·ªÉm tra xem ti·∫øn tr√¨nh ƒë√£ k·∫øt th√∫c ch∆∞a
        if ps -p $pid > /dev/null; then
            warning "Ti·∫øn tr√¨nh kh√¥ng ph·∫£n h·ªìi v·ªõi SIGTERM. S·ª≠ d·ª•ng SIGKILL ƒë·ªÉ bu·ªôc d·ª´ng."
            kill -9 $pid 2>/dev/null
            
            for child_pid in $child_pids; do
                kill -9 $child_pid 2>/dev/null
                message "ƒê√£ bu·ªôc d·ª´ng ti·∫øn tr√¨nh con (PID: $child_pid)"
            done
        fi
    fi
    
    # Ki·ªÉm tra l·∫°i sau khi d·ª´ng
    if ps -p $pid > /dev/null; then
        error "Kh√¥ng th·ªÉ d·ª´ng ti·∫øn tr√¨nh backtest (PID: $pid)"
        return 1
    else
        success "ƒê√£ d·ª´ng th√†nh c√¥ng ti·∫øn tr√¨nh backtest"
        # X√≥a file PID
        rm -f backtest.pid
        
        # Ghi log th√¥ng tin
        echo "D·ª´ng backtest: $(date)" >> backtest_controller.log
        
        # G·ª≠i th√¥ng b√°o Telegram
        if [ "$TELEGRAM_ENABLED" = true ] && [ -f "$TELEGRAM_SCRIPT" ]; then
            $TELEGRAM_SCRIPT "warning" "üõë *BACKTEST ƒê√É D·ª™NG*\nBacktest ƒë√£ ƒë∆∞·ª£c d·ª´ng theo y√™u c·∫ßu. Xem chi ti·∫øt trong log."
        fi
        
        return 0
    fi
}

# Tr√≠ch xu·∫•t v√† hi·ªÉn th·ªã b√°o c√°o ng·∫Øn t·ª´ log backtest
extract_summary() {
    if [ ! -f "backtest_output.log" ]; then
        warning "Kh√¥ng t√¨m th·∫•y file log backtest_output.log"
        return 1
    fi
    
    echo -e "\n${BLUE}===== T√ìM T·∫ÆT BACKTEST =====${NC}"
    
    # T√¨m th√¥ng tin trong log
    echo -e "${YELLOW}Th·ªùi gian ch·∫°y:${NC}"
    grep -E "Backtest started|Backtest completed" backtest_output.log | tail -2
    
    echo -e "\n${YELLOW}K·∫øt qu·∫£ chung:${NC}"
    grep -E "Total profit|Win rate|Sharpe ratio|Max drawdown" backtest_output.log | tail -4
    
    echo -e "\n${YELLOW}Th√¥ng tin m√¥ h√¨nh:${NC}"
    grep -E "Best model|Accuracy|Precision|F1 score" backtest_output.log | tail -4
    
    echo -e "\n${YELLOW}10 d√≤ng log cu·ªëi:${NC}"
    tail -10 backtest_output.log
    
    return 0
}

# H√†m ch√≠nh
main() {
    clear
    echo -e "${BLUE}================================================================${NC}"
    echo -e "${BLUE}                D·ª™NG BACKTEST CRYPTO BOT                        ${NC}"
    echo -e "${BLUE}================================================================${NC}"
    
    # Ki·ªÉm tra ti·∫øn tr√¨nh backtest
    check_backtest_process
    if [ $? -ne 0 ]; then
        read -p "Ti·∫øn tr√¨nh backtest kh√¥ng t√¨m th·∫•y. B·∫°n c√≥ mu·ªën ki·ªÉm tra t√≥m t·∫Øt backtest kh√¥ng? (y/n): " check_summary
        if [ "$check_summary" = "y" ]; then
            extract_summary
        fi
        return 1
    fi
    
    # Hi·ªÉn th·ªã menu
    echo -e "\n${BLUE}===== T√ôY CH·ªåN D·ª™NG BACKTEST =====${NC}"
    echo "1. D·ª´ng backtest m·ªôt c√°ch an to√†n (ƒë·ª£i ho√†n th√†nh t√°c v·ª• hi·ªán t·∫°i)"
    echo "2. Bu·ªôc d·ª´ng backtest ngay l·∫≠p t·ª©c"
    echo "3. Ch·ªâ hi·ªÉn th·ªã t√≥m t·∫Øt backtest (kh√¥ng d·ª´ng)"
    echo "4. Tho√°t (kh√¥ng l√†m g√¨)"
    
    read -p "L·ª±a ch·ªçn c·ªßa b·∫°n (1-4): " stop_choice
    
    pid=$(cat backtest.pid)
    
    case $stop_choice in
        1)
            stop_backtest $pid
            if [ $? -eq 0 ]; then
                extract_summary
            fi
            ;;
        2)
            stop_backtest $pid "force"
            if [ $? -eq 0 ]; then
                extract_summary
            fi
            ;;
        3)
            extract_summary
            ;;
        *)
            message "ƒê√£ h·ªßy thao t√°c d·ª´ng backtest."
            ;;
    esac
    
    echo ""
    message "X·ª≠ l√Ω ho√†n t·∫•t."
}

# Ch·∫°y h√†m ch√≠nh
main "$@"